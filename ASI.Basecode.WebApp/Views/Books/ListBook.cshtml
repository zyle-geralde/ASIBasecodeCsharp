@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
﻿@using ASI.Basecode.Data.Interfaces;
@model PaginatedList<ASI.Basecode.Services.ServiceModels.BookViewModel>
@using Microsoft.AspNetCore.Routing;
@using ASI.Basecode.Services.ServiceModels;

@{
    // var current_genre_details = ViewBag.CurrentGenreDetails as ASI.Basecode.Services.ServiceModels.BookGenreViewModel;
    // var current_language_details = ViewBag.CurrentLanguageDetails as ASI.Basecode.Services.ServiceModels.LanguageViewModel;
    // var current_author_details = ViewBag.CurrentAuthorDetails as ASI.Basecode.Services.ServiceModels.AuthorViewModel;
    // string display_name = null;
    // string description = null;


    // if(current_genre_details != null)
    // {
    //     display_name = current_genre_details?.GenreName ?? ViewBag.CurrentGenreDetails as string ?? "Books";
    //     description = current_genre_details?.GenreDescription ?? ViewBag.CurrentGenreDetails as string ?? "";
    // }
    // else if(current_language_details != null){
    //     display_name = current_language_details?.LanguageName ?? ViewBag.CurrentLanguageDetails as string ?? "Books";
    //     description = "Language";
    // }
    // else if (current_author_details != null)
    // {
    //     display_name = current_author_details?.AuthorName ?? ViewBag.CurrentAuthorDetails as string ?? "Books";
    //     description = current_author_details?.AuthorDescription ?? ViewBag.CurrentAuthorDetails as string ?? "";
    // }
    // else
    // {
    //     display_name = "Books";
    //     description = "Manage Your Book Collection";

    // }



    // ViewData["Title"] = "Book List";
    // Layout = "_AdminSidebarLayout";
}

@{
    ViewData["Title"] = "Book List";
    Layout = "_AdminSidebarLayout";
    string display_name = "Books";
    string description = "Manage books";
    var currentCategory  = (string?)ViewContext.HttpContext.Request.Query["category"];
    var allGenres = (List<BookGenreViewModel>)ViewData["AllGenres"];
    var currentSearch    = (string?)ViewData["CurrentSearch"];
    var currentAuthor    = (string?)ViewData["CurrentAuthor"];
    var currentRating = (int?)ViewData["CurrentRating"];
    var currentFromDate  = (string?)ViewData["CurrentFromDate"];
    var currentToDate    = (string?)ViewData["CurrentToDate"];
    var currentGenres = ViewData["CurrentGenres"] as string[] ?? Array.Empty<string>();
    var currentSort = (string?)ViewData["CurrentSort"];
    var currentSortDescending = (bool)(ViewData["CurrentSortDescending"] ?? false);
    var currentIsFeatured = (bool?)ViewData["CurrentIsFeatured"];
    var routeValues = new Dictionary<string,string>();
    var descriptionParts = new List<string>();

    if (!string.IsNullOrWhiteSpace(currentCategory)) {
        routeValues["category"] = currentCategory;
        // descriptionParts.Add($"Category: {currentCategory}");
    }
    if (!string.IsNullOrWhiteSpace(currentSearch)) {
        routeValues["searchTerm"] = currentSearch;
        descriptionParts.Add($"Search: \"{currentSearch}\"");
    }
    if (!string.IsNullOrWhiteSpace(currentAuthor)) {
        routeValues["author"] = currentAuthor;
        descriptionParts.Add($"Author: {currentAuthor}");
    }
    if (currentRating.HasValue) {
        routeValues["rating"] = currentRating.Value.ToString();
        descriptionParts.Add($"Rating: {currentRating.Value}★ & up");
    }
    if (!string.IsNullOrWhiteSpace(currentFromDate)) {
        routeValues["publishedFrom"] = currentFromDate;
        descriptionParts.Add($"Published from: {DateTime.Parse(currentFromDate).ToString("yyyy-MM-dd")} ");
    }
    if (!string.IsNullOrWhiteSpace(currentToDate)) {
        routeValues["publishedTo"] = currentToDate;
        descriptionParts.Add($"Published to: {DateTime.Parse(currentToDate).ToString("yyyy-MM-dd")} ");
    }
    if (currentIsFeatured == true) {
      routeValues["isFeatured"] = "true";
      descriptionParts.Add("Featured");
    }
    if (currentGenres.Any()) {
        routeValues["genreFilter"] = string.Join(",", currentGenres);
        var selectedNames = allGenres
            .Where(g => currentGenres.Contains(g.BookGenreId))
            .Select(g => g.GenreName);
        descriptionParts.Add($"Genre: {string.Join(", ", selectedNames)}");
    }
    if (!string.IsNullOrEmpty(currentSort) && currentSort != "title") {
        routeValues["sortOrder"] = currentSort;
    }


    if (currentSortDescending) {
        routeValues["sortDescending"] = "true";
    }

    // Final description text
    var descriptionText = descriptionParts.Any()
        ? string.Join(" | ", descriptionParts)
        : "Manage books";
}
@section styles {
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <link rel="stylesheet" href="~/css/admin/common.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/admin/books/listbook.css" asp-append-version="true" />
}


<div class="content-card p-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div class="header-section">
            <h1>@display_name</h1>
            <p>@descriptionText</p>
        </div>
        <p>
            <a href="/Book/AddBook" class="btn btn-secondary">
                <i class="fas fa-plus me-2" style="color: #fff"></i> ADD BOOKS
            </a>
        </p>
    </div>

    <form asp-action="ListBook" method="get" class="mb-3">

<div class="row g-3 align-items-end">
    <div class="col-md-4">
      <label class="form-label">Search</label>
      <input type="text"
             name="searchTerm"
             value="@ViewData["CurrentSearch"]"
             placeholder="Title, subtitle, author…"
             class="form-control" />
    </div>

      <div class="col-md-3">
      <label class="form-label">Sort by</label>
      <select name="sortOrder" class="form-select">
        <option value="title"             selected="@(currentSort == "title")">Title</option>
        <option value="publicationdate"   selected="@(currentSort == "publicationdate")">Publication Date</option>
        <option value="rating"            selected="@(currentSort == "rating")">Rating</option>
      </select>
    </div>

     <div class="col-md-2">
      <label class="form-label">Direction</label>
      <select name="sortDescending" class="form-select">
        <option value="false" selected="@(!currentSortDescending)">Ascending</option>
        <option value="true"  selected="@( currentSortDescending)">Descending</option>
      </select>
    </div>



    <div class="col-md-3">
      <label class="form-label">Author</label>
      <input type="text"
             name="author"
             value="@currentAuthor"
             class="form-control" />
    </div>

    <div class="col-md-2">
      <label class="form-label">Rating</label>
       <select name="rating" class="form-select">
      <option value="">Any</option>
          @for (int i = 1; i <= 5; i++)
          {
            if (currentRating == i)
            {
              <option value="@i" selected>
                @i ★ & up
              </option>
            }
            else
            {
              <option value="@i">
                @i ★ & up
              </option>
            }
          }
    </select>

    </div>

    <div class="col-md-3">
      <label class="form-label">Date Published</label>
      <div class="d-flex">
        <input type="date"
               name="publishedFrom"
               value="@currentFromDate"
               class="form-control me-1" />
        <input type="date"
               name="publishedTo"
               value="@currentToDate"
               class="form-control" />
      </div>
    </div>
  </div>

  <fieldset class="mt-3">
    <legend class="form-label">Genres</legend>
    <div class="row">
      @foreach (var genre in allGenres)
      {
        <div class="col-sm-3">
          <div class="form-check">
            <input class="form-check-input"
                   type="checkbox"
                   name="genreFilter"
                   value="@genre.BookGenreId"
                   id="g_@genre.BookGenreId"
                   @(currentGenres.Contains(genre.BookGenreId) ? "checked" : "") />
            <label class="form-check-label" for="g_@genre">
              @genre.GenreName
            </label>
          </div>
        </div>
      }
    </div>
  </fieldset>
    <div class="form-check mt-4">
      <input 
        class="form-check-input" 
        type="checkbox" 
        id="isFeatured" 
        name="isFeatured" 
        value="true"
        @(currentIsFeatured == true ? "checked" : "") />
      <label class="form-check-label" for="isFeatured">
        Featured only
      </label>
    </div>

  <div class="d-flex justify-content-end mt-3">
    <a asp-action="ListBook" class="btn btn-outline-secondary me-2">
      Clear All
    </a>
    <button type="submit" class="btn btn-primary">
      Apply Filters
    </button>
  </div>

</form>

    

    <p class="no-search-results-message" style="display: none;">No books found matching your search criteria.</p> 

    @if (Model != null && Model.Any())
    {
        <div class="table-responsive">
            <table class="data-table table table-hover">
            <thead>
                <tr>
                    <th>Cover</th>
<th>Title</th>
      <th>Subtitle</th>
      <th>Author</th>
      <th>Publication Date</th>
      <th>Language</th>
      <th>Rating</th>
      <th>Series</th>
      <th>Actions</th>                         
                </tr>
            </thead>
            <tbody>
                @* <td style="display:none" id="book-id"></td>
                <td style="display:none" id="cover-url"></td>
                <td style="display:none" id="book-url"></td> *@
                @foreach (var book in Model)
                {
                    <tr>
                        <td>
                                @if (!string.IsNullOrWhiteSpace(book.CoverImage))
                            {
                                <img src="@book.CoverImage" alt="Cover Image" class="cover-image" /> 
                            }
                            else
                            {
                                <span>No Image</span>
                            }
                        </td>
                        <td>@book.Title</td>
                        <td>@book.Subtitle</td>
                        <td>@book.Author</td>
 @*<td>
        @{
          var ids = (book.GenreList ?? "")
                    .Split(',', StringSplitOptions.RemoveEmptyEntries);
          var names = allGenres
                      .Where(g => ids.Contains(g.BookGenreId))
                      .Select(g => g.GenreName);
        }
        @string.Join(", ", names)

      </td*@>  
      <td>@book.PublicationDate?.ToString("yyyy-MM-dd")</td>
                        <td>@book.Language</td>
                        @* <td>@book.NumberOfPages</td> *@
                        <td>@book.AverageRating</td>
                        @* <td>@book.Likes</td> *@
                        <td>@book.SeriesName</td>
                        @* <td>@book.Description</td> *@
                        <td>
                                <div class="d-flex gap-2">
                                    <a href="/Book/BookDetails/@book.BookId" class="action-icon-button text-secondary">
                                        <i class="fas fa-info-circle"></i> 
                                    </a>
                                    <a href="/Book/EditBook/@book.BookId" class="action-icon-button text-primary">
                                        <i class="fas fa-edit"></i> 
                                    </a>
                                <button type="button" class="action-icon-button text-danger" data-bs-toggle="modal" data-bs-target="#deleteModal" id="delete-modal-button" data-book-id="@book.BookId" data-cover-url=@book.CoverImageUrl data-book-url=@book.BookFileUrl>
                                        <i class="fas fa-trash"></i> 
                                    </button>
                                </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
        </div>
    }
    else
    {
        <p class="empty-message">No books found. Why not add some?</p>
    }
      <ul class="pagination">
    <li class="page-item @(Model.HasPreviousPage ? "" : "disabled")">
        <a class="page-link"
         asp-all-route-data="@(new Dictionary<string,string>(routeValues) { ["page"] = (Model.PageIndex - 1).ToString() })">
        ‹ Prev
      </a>

    </li>
    @for (int i = 1; i <= Model.TotalPages; i++)
    {
      <li class="page-item @(i==Model.PageIndex ? "active":"")">
<a class="page-link"
           asp-all-route-data="@(new Dictionary<string,string>(routeValues) { ["page"] = i.ToString() })">
          @i
        </a>      </li>
    }
    <li class="page-item @(Model.HasNextPage ? "" : "disabled")">
     <a class="page-link"
         asp-all-route-data="@(new Dictionary<string,string>(routeValues) { ["page"] = (Model.PageIndex + 1).ToString() })">
        Next ›

      </a>    </li>
  </ul>
</div>


<div class="modal fade confirmation-modal" id="deleteModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header border-0">
                <h5 class="modal-title" id="deleteModalLabel">Delete Confirmation</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body text-center">
                <p class="mb-4">Are you sure you want to delete this item?</p>
                <div class="d-flex justify-content-center gap-2">
                    <button type="button" class="btn btn-secondary px-4" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-danger px-4" @*onclick="showSuccessModal()"*@ id="delete-book-button">Delete</button>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="modal fade status-modal" id="statusModal" tabindex="-1" aria-labelledby="statusModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-body text-center py-4">
                <div class="status-icon mb-3">
                    <i class="fas fa-check"></i>
                </div>
                <h5 class="modal-title mb-2" id="statusModalLabel">Success!</h5>
                <p class="mb-4" id="statusModalMessage">Item deleted successfully!</p>
                <button type="button" class="btn btn-secondary px-4" data-bs-dismiss="modal">OK</button>
            </div>
        </div>
    </div>
</div>


@section Scripts {
    <script type = "module">
        // Your Firebase configuration
        //Transfer this secretes into AnalyserNode env or file, and include it in gitignore.
        const firebaseConfig = {
            apiKey: "AIzaSyA4CTMSbgGQN_yLn9lEZlswbZ_2A2Xhl0k",
            authDomain: "basabuzz-ca8fe.firebaseapp.com",
            projectId: "basabuzz-ca8fe",
            storageBucket: "basabuzz-ca8fe.firebasestorage.app",
            messagingSenderId: "206533484485",
            appId: "1:206533484485:web:2c71a06a17d5244efe75ac"
        };

        // Initialize Firebase
        import { initializeApp } from "https://www.gstatic.com/firebasejs/11.9.1/firebase-app.js";
        import { getStorage, ref, uploadBytesResumable, getDownloadURL, deleteObject } from "https://www.gstatic.com/firebasejs/11.9.1/firebase-storage.js";

        const app = initializeApp(firebaseConfig);
        const storage = getStorage(app);

        async function deleteFileFromFirebase(fileUrl) {
            if (!fileUrl) {
                console.warn("Attempted to delete null or empty file URL.");
                return;
            }
            try {
                //Get a reference to the file from the download URL
                const fileRef = ref(storage, fileUrl);
                await deleteObject(fileRef);
                console.log(`Successfully deleted file: ${fileUrl}`);
            } catch (error) {
                // alert(`Failed to delete file ${fileUrl}:`, error)
                showStatusModal(`Failed to delete file ${fileUrl}: ${error.message}`, 'Error');
                console.error(`Failed to delete file ${fileUrl}:`, error);
            }
        }

        async function deleteCoverUrlFromError(coverUrlCopy, coverUploadStatusCopy) {
            if (coverUrlCopy) {
                await deleteFileFromFirebase(coverUrlCopy);
                coverUploadStatusCopy.textContent = 'Cover image upload rolled back due to backend error.';
            }
            else {
                showStatusModal("Warning: No cover URL provided for rollback.", 'Warning');
            }
        }

        async function deleteBookUrlFromError(bookFileUploadStatusCopy, bookUrlCopy) {
            if (bookUrlCopy) {
                await deleteFileFromFirebase(bookUrlCopy);
                bookFileUploadStatusCopy.textContent = 'Book file upload rolled back due to backend error.';
            }
            else {
                showStatusModal("Warning: No book URL provided for rollback.", 'Warning');
            }
        }

        async function deleteCoverUrl(coverUrlCopy) {
            if (coverUrlCopy) {
                await deleteFileFromFirebase(coverUrlCopy);
            }
            else {
                showStatusModal("Warning: No cover URL provided.", 'Warning');
            }
        }

        async function deleteBookUrl(bookUrlCopy) {
            if (bookUrlCopy) {
                await deleteFileFromFirebase(bookUrlCopy);
            }
            else {
                showStatusModal("Warning: No book URL provided.", 'Warning');
            }
        }

        //Firebase Upload Function
        //This function returns the download URL or null on failure/no file
        async function uploadFileToFirebase(file, path, statusElement) {
            if (!file) {
                statusElement.textContent = 'No file selected.';
                return null; //Indicates no file was provided
            }

            //Generate New File Name
            const timestamp = new Date().getTime();
            const randomString = Math.random().toString(36).substring(2, 8);
            const uniqueFileName = `${timestamp}-${randomString}-${file.name}`;

            const storageRef = ref(storage, path + uniqueFileName);
            const uploadTask = uploadBytesResumable(storageRef, file);

            return new Promise((resolve, reject) => {
                uploadTask.on('state_changed',
                    (snapshot) => {
                        const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;
                        statusElement.textContent = `Upload is ${progress.toFixed(2)}% done`;
                    },
                    (error) => {
                        statusElement.textContent = `Upload failed: ${error.message}`;
                        console.error("Upload error:", error);
                        showSuccessModal(`File upload failed: ${error.message}`, 'Error');
                        reject(error); //Reject the promise on upload error
                    },
                    async () => {
                        try {
                            const downloadURL = await getDownloadURL(uploadTask.snapshot.ref);
                            statusElement.textContent = 'Upload successful!';
                            resolve(downloadURL); //Resolve with the download URL
                        } catch (error) {
                            statusElement.textContent = `Failed to get download URL: ${error.message}`;
                            console.error("Get Download URL error:", error);
                            showSuccessModal(`Failed to get download URL: ${error.message}`, 'Error');
                            reject(error); //Reject the promise if getting URL fails
                        }
                    }
                );
            });
        }


        // dynamic status modal
        function showStatusModal(message, type = 'Success') { 
            var deleteModalElement = document.getElementById('deleteModal');
            var deleteModal = bootstrap.Modal.getInstance(deleteModalElement);
            if (deleteModal) {
                deleteModal.hide();
            }

            const statusModalTitle = document.getElementById('statusModalLabel'); 
            const statusModalMessage = document.getElementById('statusModalMessage');  

            if (statusModalTitle) {
                statusModalTitle.textContent = type;
            }
            if (statusModalMessage) {
                statusModalMessage.textContent = message;
            }

            // Change icon based on type
            const statusIcon = document.querySelector('#statusModal .status-icon i'); 
            if (statusIcon) {
                statusIcon.classList.remove('fa-check', 'fa-times', 'fa-exclamation-triangle');
                if (type === 'Success') {
                    statusIcon.classList.add('fa-check');
                    statusIcon.style.color = '#28a745';
                } else if (type === 'Error') {
                    statusIcon.classList.add('fa-times');
                    statusIcon.style.color = '#dc3545';
                } else if (type === 'Warning') {
                    statusIcon.classList.add('fa-exclamation-triangle');
                    statusIcon.style.color = '#ffc107';
                } else {
                    statusIcon.classList.add('fa-check');
                    statusIcon.style.color = '#28a745';
                }
            }


            setTimeout(function () {
                var statusModalElement = document.getElementById('statusModal'); 
                var statusModal = new bootstrap.Modal(statusModalElement);
                statusModal.show();
            }, 100);
        }

        const show_delete_modal = document.querySelectorAll("#delete-modal-button");
        // const get_book_id = document.getElementById("book-id")
        //  const get_cover_url = document.getElementById("cover-url")
        // const get_book_url = document.getElementById("book-url")

        let currentBookIdToDelete = null;
        let currentCoverUrlToDelete = null;
        let currentBookUrlToDelete = null;

        //Adding click event listener for each delete button
        //Grab the bookId cover Url and Book Url from which the trash button was clicked
        show_delete_modal.forEach(button => {
            button.addEventListener("click", function (event) {
                currentBookIdToDelete = this.dataset.bookId;
                currentCoverUrlToDelete = this.dataset.coverUrl;
                currentBookUrlToDelete = this.dataset.bookUrl;

                // const hold_book_id = this.dataset.bookId
                // const hold_cover_url = this.dataset.coverUrl
                // const hold_book_url = this.dataset.bookUrl
                // get_book_id.textContent = hold_book_id
                // get_cover_url.textContent = hold_cover_url
                // get_book_url.textContent = hold_book_url

            })
        })


        //Fetch Api to delete book
        const delete_book_button = document.getElementById("delete-book-button")
        delete_book_button.addEventListener("click", async function (event) {
            try{
                const response = await fetch("/Book/Delete",{
                    method:"POST",
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    // body: JSON.stringify({ BookId: get_book_id.textContent })
                    body: JSON.stringify({ BookId: currentBookIdToDelete })
                })

                if (response.ok) 
                {
                    const result = await response.json()
                    // alert(`${result.message}`)
                    showStatusModal(result.message || "Book deleted successfully!", 'Success');
                    if (currentCoverUrlToDelete !== null && currentCoverUrlToDelete !== "") {
                        // await deleteCoverUrl(get_cover_url.textContent);
                        await deleteCoverUrl(currentCoverUrlToDelete);
                    }

                    if (currentBookUrlToDelete !== null && currentBookUrlToDelete !== "") {
                        // await deleteBookUrl(get_book_url.textContent)
                        await deleteBookUrl(currentBookUrlToDelete)
                    }

                    setTimeout(() => {
                        window.location.reload();
                    }, 500);

                }
                else{
                    // alert(`Error: ${result.message}`)
                    const errorResult = await response.json();
                    showStatusModal(`Error: ${errorResult.message}`, 'Error');
                }
            }
            catch(error){
                // alert(`Error: An unexpected error occurred while deleting book data. Please try again.`)
                showStatusModal(`Error: An unexpected error occurred while deleting book data. Please try again.`, 'Error');
                console.error("Fetch error:", error);
            }
        })


        // dynamic search functionality
        const searchInput = document.getElementById('searchInput');
        const dataTable = document.querySelector('.data-table');
        const tableRows = document.querySelectorAll('.data-table tbody tr');
        const emptyMessage = document.querySelector('.empty-message'); 
        const noSearchResultsMessage = document.querySelector('.no-search-results-message'); 


        if (emptyMessage) {
            if (tableRows.length === 0) {
                emptyMessage.style.display = 'block';
                if (dataTable) dataTable.style.display = 'none'; 
            } else {
                emptyMessage.style.display = 'none';
            }
        }
        if (noSearchResultsMessage) {
            noSearchResultsMessage.style.display = 'none'; 
        }


        searchInput.addEventListener('keyup', function () {
            const searchTerm = searchInput.value.toLowerCase().trim();

            // revert to original state, if clear search bar is clear
            if (searchTerm === '') {
                tableRows.forEach(row => row.style.display = ''); 
                if (noSearchResultsMessage) noSearchResultsMessage.style.display = 'none'; 
                if (emptyMessage) {
                    if (tableRows.length === 0) {
                        emptyMessage.style.display = 'block';
                        if (dataTable) dataTable.style.display = 'none';
                    } else {
                        emptyMessage.style.display = 'none';
                        if (dataTable) dataTable.style.display = ''; 
                    }
                } else { 
                    if (dataTable) dataTable.style.display = ''; 
                }
                return;
            }

            let hasVisibleRows = false;
            tableRows.forEach(row => {
                let rowVisible = false;
                const cells = row.querySelectorAll('td');

                for (let i = 0; i < cells.length; i++) {
                    if (i === cells.length - 1) {
                        continue;
                    }
                    if (i === 0) {
                        const imgElement = cells[i].querySelector('img');
                        const spanElement = cells[i].querySelector('span');
                        let cellText = '';
                        if (imgElement && imgElement.alt) {
                            cellText = imgElement.alt.toLowerCase();
                        } else if (spanElement) {
                            cellText = spanElement.textContent.toLowerCase();
                        }
                        if (cellText.includes(searchTerm)) {
                            rowVisible = true;
                            break;
                        }
                        continue;
                    }

                    const cellText = cells[i].textContent.toLowerCase().trim();
                    if (cellText.includes(searchTerm)) {
                        rowVisible = true;
                        break;
                    }
                }

                if (rowVisible) {
                    row.style.display = '';
                    hasVisibleRows = true;
                } else {
                    row.style.display = 'none';
                }
            });

            
            if (hasVisibleRows) {
                if (noSearchResultsMessage) noSearchResultsMessage.style.display = 'none'; 
                if (dataTable) dataTable.style.display = ''; 
                if (emptyMessage) emptyMessage.style.display = 'none'; 
            } else {
                if (noSearchResultsMessage) noSearchResultsMessage.style.display = 'block'; 
                if (dataTable) dataTable.style.display = 'none';
                if (emptyMessage) emptyMessage.style.display = 'none'; 
            }
        });

    </script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
}