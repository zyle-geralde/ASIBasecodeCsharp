@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@using ASI.Basecode.Data.Interfaces;
@model PaginatedList<ASI.Basecode.Services.ServiceModels.BookViewModel>
@using Microsoft.AspNetCore.Routing;
@using ASI.Basecode.Services.ServiceModels;

@{
    ViewData["Title"] = "Book List";
    Layout = "_AdminSidebarLayout";
    string display_name = "Books";
    string description = "Manage books";
    var allLanguages = (List<LanguageViewModel>)ViewData["AllLanguages"];
    var currentCategory = (string?)ViewContext.HttpContext.Request.Query["category"];
    var allGenres = (List<BookGenreViewModel>)ViewData["AllGenres"];
    var currentSearch = (string?)ViewData["CurrentSearch"];
    var currentAuthor = (string?)ViewData["CurrentAuthor"];
    var currentRating = (int?)ViewData["CurrentRating"];
    var currentFromDate = (string?)ViewData["CurrentFromDate"];
    var currentToDate = (string?)ViewData["CurrentToDate"];
    var currentGenres = ViewData["CurrentGenres"] as string[] ?? Array.Empty<string>();
    var currentSort = (string?)ViewData["CurrentSort"];
    var currentSortDescending = (bool)(ViewData["CurrentSortDescending"] ?? false);
    var currentIsFeatured = (bool?)ViewData["CurrentIsFeatured"];
    var routeValues = new Dictionary<string, string>();
    var descriptionParts = new List<string>();
    var currentLanguage = (string?)ViewData["CurrentLanguage"];

    if (!string.IsNullOrWhiteSpace(currentCategory))
    {
        routeValues["category"] = currentCategory;
    }
    if (!string.IsNullOrWhiteSpace(currentSearch))
    {
        routeValues["searchTerm"] = currentSearch;
        descriptionParts.Add($"Search: \"{currentSearch}\"");
    }
    if (!string.IsNullOrWhiteSpace(currentAuthor))
    {
        routeValues["author"] = currentAuthor;
        descriptionParts.Add($"Author: {currentAuthor}");
    }
    if (currentRating.HasValue)
    {
        routeValues["rating"] = currentRating.Value.ToString();
        descriptionParts.Add($"Rating: {currentRating.Value}★ & up");
    }
    if (!string.IsNullOrWhiteSpace(currentFromDate))
    {
        routeValues["publishedFrom"] = currentFromDate;
        descriptionParts.Add($"Published from: {DateTime.Parse(currentFromDate).ToString("yyyy-MM-dd")} ");
    }
    if (!string.IsNullOrWhiteSpace(currentToDate))
    {
        routeValues["publishedTo"] = currentToDate;
        descriptionParts.Add($"Published to: {DateTime.Parse(currentToDate).ToString("yyyy-MM-dd")} ");
    }
    if (currentIsFeatured == true)
    {
        routeValues["isFeatured"] = "true";
        descriptionParts.Add("Featured");
    }
    if (currentGenres.Any())
    {
        routeValues["genreFilter"] = string.Join(",", currentGenres);
        var selectedNames = allGenres
            .Where(g => currentGenres.Contains(g.BookGenreId))
            .Select(g => g.GenreName);
        descriptionParts.Add($"Genre: {string.Join(", ", selectedNames)}");
    }
    if (!string.IsNullOrEmpty(currentSort) && currentSort != "title")
    {
        routeValues["sortOrder"] = currentSort;
    }
    if (!string.IsNullOrWhiteSpace(currentLanguage))
    {
        routeValues["languageFilter"] = currentLanguage;
    }

    if (currentSortDescending)
    {
        routeValues["sortDescending"] = "true";
    }

    // Final description text
    var descriptionText = descriptionParts.Any()
        ? string.Join(" | ", descriptionParts)
        : "Manage books";
}
@section styles {
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" />
    <link rel="stylesheet" href="~/css/admin/common.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/admin/books/listbook.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/pagination.css" asp-append-version="true" />

}

<div class="content-card p-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div class="header-section">
            <h1>@display_name</h1>
            <p>@descriptionText</p>
        </div>
        <p>
            <a href="/Book/AddBook" class="btn btn-secondary">
                <i class="fas fa-plus me-2" style="color: #fff"></i> ADD BOOKS
            </a>
        </p>
    </div>

    <div class="search-filter-container">
        <!-- Search Bar -->
        <div class="search-container">
            <i class="fas fa-search"></i>
            <input type="text"
                   name="searchTerm"
                   value="@ViewData["CurrentSearch"]"
                   placeholder="Search title, subtitle, author…"
                   class="form-control" id="globalSearchInput" />
        </div>

        <!-- Filter and Sort Buttons -->
        <div class="action-buttons">
            <button type="button" class="btn btn-outline-secondary filter-btn" id="filterToggleBtn">
                <i class="fas fa-filter"></i> Filter
            </button>
            <button type="button" class="btn btn-outline-secondary sort-btn" id="sortToggleBtn">
                <i class="fas fa-sort"></i> Sort
            </button>
        </div>
    </div>

    <!-- Filter Popup -->
    <div class="filter-popup" id="filterPopup">
        <div class="popup-header">
            <h5>Filter By</h5>
            <button class="popup-close" id="closeFilterPopup">&times;</button>
        </div>
        <form asp-action="ListBook" method="get" id="filterForm">
            <div class="filter-section">
                <label class="form-label">Author</label>
                <input type="text"
                       name="author"
                       value="@currentAuthor"
                       class="form-control" id="filterAuthor" />
            </div>

            <div class="filter-section">
                <label class="form-label">Rating</label>
                <select name="rating" class="form-select" id="filterRating">
                    <option value="">Any</option>
                    @for (int i = 1; i <= 5; i++)
                    {
                        <option value="@i" selected="@(currentRating == i ? "selected" : null)">
                            @i ★ & up
                        </option>
                    }
                </select>
            </div>

            <div class="filter-section">
                <label class="form-label">Date Published</label>
                <div class="date-range">
                    <input type="date"
                           name="publishedFrom"
                           value="@currentFromDate"
                           class="form-control" id="filterPublishedFrom" />
                    <input type="date"
                           name="publishedTo"
                           value="@currentToDate"
                           class="form-control" id="filterPublishedTo" />
                </div>
            </div>

            <div class="filter-section">
                <label class="form-label">Genres</label>
                <div class="genre-grid">
                    @foreach (var genre in allGenres)
                    {
                        <div class="form-check">
                            <input class="form-check-input"
                                   type="checkbox"
                                   name="genreFilter"
                                   value="@genre.BookGenreId"
                                   id="g_@genre.BookGenreId"
                            @(currentGenres.Contains(genre.BookGenreId) ? "checked" : null) />
                            <label class="form-check-label" for="g_@genre.BookGenreId">
                                @genre.GenreName
                            </label>
                        </div>
                    }
                </div>
            </div>

            <div class="filter-section">
                <label class="form-label">Language</label>
                <div class="genre-grid">
                    @foreach (var language in allLanguages)
                    {
                        <div class="form-check">
                            <input class="form-check-input"
                                   type="radio"
                                   name="languageFilter"
                                   value="@language.LanguageId"
                                   id="lang_@language.LanguageId"
                            @(currentLanguage == language.LanguageId ? "checked" : null) />
                            <label class="form-check-label" for="lang_@language.LanguageId">
                                @language.LanguageName
                            </label>
                        </div>
                    }
                </div>
            </div>

            <div class="form-check filter-section">
                <input class="form-check-input"
                       type="checkbox"
                       id="isFeaturedFilter"
                       name="isFeatured"
                       value="true"
                @(currentIsFeatured == true ? "checked" : null) />
                <label class="form-check-label" for="isFeaturedFilter">
                    Featured only
                </label>
            </div>

            <div class="popup-footer">
                <a asp-action="ListBook" class="btn btn-outline-secondary">
                    Clear All
                </a>
                <button type="submit" class="btn btn-primary">
                    Apply Filter
                </button>
            </div>
        </form>
    </div>

    <!-- Sort Popup -->
    <div class="book-sort-popup" id="sortPopup">
        <div class="popup-header">
            <h5>Sort By</h5>
            <button class="popup-close" id="closeSortPopup">&times;</button>
        </div>
        <form asp-action="ListBook" method="get" id="sortForm">
            <div class="filter-section">
                <label class="form-label">Sort by</label>
                <select name="sortOrder" class="form-select" id="sortOrderSelect">
                    <option value="title" selected="@(currentSort == "title" ? "selected" : null)">Title</option>
                    <option value="author" selected="@(currentSort == "author" ? "selected" : null)">Author</option>
                    <option value="publicationdate" selected="@(currentSort == "publicationdate" ? "selected" : null)">Publication Date</option>
                    <option value="rating" selected="@(currentSort == "rating" ? "selected" : null)">Rating</option>
                    <option value="uploaddate" selected="@(currentSort == "uploaddate" ? "selected" : null)">Upload Date</option>
                </select>
            </div>

            <div class="filter-section">
                <label class="form-label">Direction</label>
                <select name="sortDescending" class="form-select" id="sortDirectionSelect">
                    <option value="false" selected="@(!currentSortDescending ? "selected" : null)">Ascending</option>
                    <option value="true" selected="@(currentSortDescending ? "selected" : null)">Descending</option>
                </select>
            </div>

            <div class="popup-footer">
                <a asp-action="ListBook" class="btn btn-outline-secondary">
                    Clear Sort
                </a>
                <button type="submit" class="btn btn-primary">
                    Apply Sort
                </button>
            </div>
        </form>
    </div>

    <p class="no-search-results-message" style="display: none;">No books found matching your search criteria.</p>

    @if (Model != null && Model.Any())
    {
        <div class="table-responsive">
            <table class="data-table table">
                <thead>
                    <tr>
                        <th>Cover</th>
                        <th>Title</th>
                        <th>Subtitle</th>
                        <th>Author</th>
                        <th>Publication Date</th>
                        <th>Language</th>
                        <th>Rating</th>
                        <th>Upload Date</th>
                        <th>Series</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var book in Model)
                    {
                        <tr>
                            <td>
                                @if (!string.IsNullOrWhiteSpace(book.CoverImage))
                                {
                                    <img src="@book.CoverImage" alt="Cover Image" class="cover-image" />
                                }
                                else
                                {
                                    <span>No Image</span>
                                }
                            </td>
                            <td>@book.Title</td>
                            <td>@book.Subtitle</td>
                            <td>@book.Author</td>
                            <td>@book.PublicationDate?.ToString("yyyy-MM-dd")</td>
                            <td>@book.Language</td>
                            <td>@book.AverageRating</td>
                            <td>@book.UploadDate</td>
                            <td>@book.SeriesName</td>
                            <td>
                                <div class="d-flex gap-2">
                                    <a href="/Book/BookDetails/@book.BookId" class="action-icon-button text-secondary">
                                        <i class="fas fa-info-circle"></i>
                                    </a>
                                    <a href="/Book/EditBook/@book.BookId" class="action-icon-button text-primary">
                                        <i class="fas fa-edit"></i>
                                    </a>
                                    <button type="button" class="action-icon-button text-danger" data-bs-toggle="modal" data-bs-target="#deleteModal" id="delete-modal-button" data-book-id="@book.BookId" data-cover-url="@book.CoverImageUrl" data-book-url="@book.BookFileUrl">
                                        <i class="fas fa-trash"></i>
                                    </button>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
    else
    {
        <p class="empty-message">No books found. Why not add some?</p>
    }

    <partial name="_PaginationPartial" view-data='@new ViewDataDictionary(ViewData) {
        { "RouteValues", routeValues },
        { "CurrentPage", Model.PageIndex },
        { "TotalPages", Model.TotalPages }
    }' />
</div>


<div class="modal fade confirmation-modal" id="deleteModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header border-0">
                <h5 class="modal-title" id="deleteModalLabel">Delete Confirmation</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body text-center">
                <p class="mb-4">Are you sure you want to delete this item?</p>
                <div class="d-flex justify-content-center gap-2">
                    <button type="button" class="btn btn-secondary px-4" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-danger px-4" id="delete-book-button">Delete</button>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="modal fade status-modal" id="statusModal" tabindex="-1" aria-labelledby="statusModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-body text-center py-4">
                <div class="status-icon mb-3">
                    <i class="fas fa-check"></i>
                </div>
                <h5 class="modal-title mb-2" id="statusModalLabel">Success!</h5>
                <p class="mb-4" id="statusModalMessage">Item deleted successfully!</p>
                <button type="button" class="btn btn-secondary px-4" data-bs-dismiss="modal">OK</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="//cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
    <script type="module">
        
        const firebaseConfig = {
            apiKey: "AIzaSyA4CTMSbgGQN_yLn9lEZlswbZ_2A2Xhl0k",
            authDomain: "basabuzz-ca8fe.firebaseapp.com",
            projectId: "basabuzz-ca8fe",
            storageBucket: "basabuzz-ca8fe.firebasestorage.app",
            messagingSenderId: "206533484485",
            appId: "1:206533484485:web:2c71a06a17d5244efe75ac"
        };

   
        import { initializeApp } from "https://www.gstatic.com/firebasejs/11.9.1/firebase-app.js";
        import { getStorage, ref, deleteObject } from "https://www.gstatic.com/firebasejs/11.9.1/firebase-storage.js";

        const app = initializeApp(firebaseConfig);
        const storage = getStorage(app);

        
        async function deleteFileFromFirebase(fileUrl) {
            if (!fileUrl) {
                console.warn("Attempted to delete null or empty file URL.");
                return;
            }
            try {
                
                const fileRef = ref(storage, fileUrl);
                await deleteObject(fileRef);
                console.log(`Successfully deleted file: ${fileUrl}`);
            } catch (error) {
               
                showStatusModal(`Failed to delete file ${fileUrl}: ${error.message}`, 'Error');
                console.error(`Failed to delete file ${fileUrl}:`, error);
            }
        }


        async function deleteCoverUrl(coverUrlCopy) {

            if (coverUrlCopy && !coverUrlCopy.includes("placeholder.jpg")) {
                await deleteFileFromFirebase(coverUrlCopy);
            }
        }

        async function deleteBookUrl(bookUrlCopy) {
            if (bookUrlCopy && !bookUrlCopy.includes("placeholder.pdf")) {
                await deleteFileFromFirebase(bookUrlCopy);
            }
        }


        function showStatusModal(message, type = 'Success') {
            var deleteModalElement = document.getElementById('deleteModal');
            var deleteModal = bootstrap.Modal.getInstance(deleteModalElement);
            if (deleteModal) {
                deleteModal.hide();
            }

            const statusModalTitle = document.getElementById('statusModalLabel');
            const statusModalMessage = document.getElementById('statusModalMessage');

            if (statusModalTitle) {
                statusModalTitle.textContent = type;
            }
            if (statusModalMessage) {
                statusModalMessage.textContent = message;
            }


            const statusIcon = document.querySelector('#statusModal .status-icon i');
            if (statusIcon) {
                statusIcon.classList.remove('fa-check', 'fa-times', 'fa-exclamation-triangle');
                if (type === 'Success') {
                    statusIcon.classList.add('fa-check');
                    statusIcon.style.color = '#28a745'; 
                } else if (type === 'Error') {
                    statusIcon.classList.add('fa-times');
                    statusIcon.style.color = '#dc3545'; 
                } else if (type === 'Warning') {
                    statusIcon.classList.add('fa-exclamation-triangle');
                    statusIcon.style.color = '#ffc107'; 
                } else {
                    statusIcon.classList.add('fa-check'); 
                    statusIcon.style.color = '#28a745';
                }
            }


            setTimeout(function () {
                var statusModalElement = document.getElementById('statusModal');
                var statusModal = new bootstrap.Modal(statusModalElement);
                statusModal.show();
            }, 100);
        }
       
        const deleteModalButtons = document.querySelectorAll("#delete-modal-button");
        
        let currentBookIdToDelete = null;
        let currentCoverUrlToDelete = null;
        let currentBookUrlToDelete = null;

        
        deleteModalButtons.forEach(button => {
            button.addEventListener("click", function () {
                currentBookIdToDelete = this.dataset.bookId;
                currentCoverUrlToDelete = this.dataset.coverUrl;
                currentBookUrlToDelete = this.dataset.bookUrl;
            });
        });


        const deleteBookButton = document.getElementById("delete-book-button");
        if (deleteBookButton) {
            
            deleteBookButton.addEventListener("click", async function () {
                try {
                    
                    const response = await fetch("/Book/Delete", {
                        method: "POST",
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({ BookId: currentBookIdToDelete })
                    });

                    if (response.ok) {
                        
                        const result = await response.json();
                        showStatusModal(result.message || "Book deleted successfully!", 'Success');

                       
                        if (currentCoverUrlToDelete) {
                            await deleteCoverUrl(currentCoverUrlToDelete);
                        }
                        if (currentBookUrlToDelete) {
                            await deleteBookUrl(currentBookUrlToDelete);
                        }

                        setTimeout(() => {
                            window.location.reload();
                        }, 500);

                    } else {

                        const errorResult = await response.json();
                        showStatusModal(`Error: ${errorResult.message || "Failed to delete book."}`, 'Error');
                    }
                } catch (error) {
                    showStatusModal(`Error: An unexpected error occurred while deleting book data. Please try again.`, 'Error');
                    console.error("Fetch error:", error);
                }
            });
        }



        document.addEventListener('DOMContentLoaded', function () {
            const filterToggleBtn = document.getElementById('filterToggleBtn');
            const sortToggleBtn = document.getElementById('sortToggleBtn');
            const filterPopup = document.getElementById('filterPopup');
            const sortPopup = document.getElementById('sortPopup');
            const closeFilterPopup = document.getElementById('closeFilterPopup');
            const closeSortPopup = document.getElementById('closeSortPopup');
            const globalSearchInput = document.getElementById('globalSearchInput');


            filterToggleBtn?.addEventListener('click', function (e) {
                e.stopPropagation();
                sortPopup.classList.remove('show');
                filterPopup.classList.toggle('show');

                if (filterPopup.classList.contains('show')) {
                    filterToggleBtn.classList.add('active');
                    sortToggleBtn.classList.remove('active');
                } else {
                    filterToggleBtn.classList.remove('active');
                }
            });

            sortToggleBtn?.addEventListener('click', function (e) {
                e.stopPropagation();
                filterPopup.classList.remove('show');
                sortPopup.classList.toggle('show');

                if (sortPopup.classList.contains('show')) {
                    sortToggleBtn.classList.add('active');
                    filterToggleBtn.classList.remove('active');
                } else {
                    sortToggleBtn.classList.remove('active');
                }
            });

            closeFilterPopup?.addEventListener('click', function () {
                filterPopup.classList.remove('show');
                filterToggleBtn.classList.remove('active');
            });

            closeSortPopup?.addEventListener('click', function () {
                sortPopup.classList.remove('show');
                sortToggleBtn.classList.remove('active');
            });

            document.addEventListener('click', function (e) {
                if (!filterPopup.contains(e.target) && e.target !== filterToggleBtn) {
                    filterPopup.classList.remove('show');
                    filterToggleBtn.classList.remove('active');
                }

                if (!sortPopup.contains(e.target) && e.target !== sortToggleBtn) {
                    sortPopup.classList.remove('show');
                    sortToggleBtn.classList.remove('active');
                }
            });


            let typingTimer;
            const doneTypingInterval = 500; 

            globalSearchInput?.addEventListener('input', function () {
                clearTimeout(typingTimer);
                typingTimer = setTimeout(submitAllFilters, doneTypingInterval);
            });

            function submitAllFilters() {
                const currentUrl = new URL(window.location.origin + window.location.pathname);
                const params = new URLSearchParams();

                // global search 
                if (globalSearchInput && globalSearchInput.value) {
                    params.set('searchTerm', globalSearchInput.value);
                }

                // filter
                const filterForm = document.getElementById('filterForm');
                if (filterForm) {
                    const filterFormData = new FormData(filterForm);
                    filterFormData.forEach((value, key) => {
                        if (key === 'genreFilter') {
                            const existingParam = params.get(key);
                            if (existingParam) {
                                params.set(key, existingParam + ',' + value);
                            } else {
                                params.set(key, value);
                            }
                        } else {
                            if (value) { 
                                params.set(key, value);
                            }
                        }
                    });

                    const isFeaturedCheckbox = filterForm.querySelector('#isFeaturedFilter');
                    if (isFeaturedCheckbox && !isFeaturedCheckbox.checked) {
                        if (params.has('isFeatured')) {
                            params.delete('isFeatured');
                        }
                    }
                }

                // sort
                const sortForm = document.getElementById('sortForm');
                if (sortForm) {
                    const sortFormData = new FormData(sortForm);
                    sortFormData.forEach((value, key) => {
                        if (value) {
                            params.set(key, value);
                        }
                    });
                }

                currentUrl.search = params.toString();
                window.location.href = currentUrl.toString();
            }

            const filterForm = document.getElementById('filterForm');
            const sortForm = document.getElementById('sortForm');

            if (filterForm) {
                filterForm.addEventListener('submit', function (e) {
                    e.preventDefault();
                    submitAllFilters();
                });
            }

            if (sortForm) {
                sortForm.addEventListener('submit', function (e) {
                    e.preventDefault();
                    submitAllFilters();
                });
            }

            
            function checkActiveFilters() {
                const urlParams = new URLSearchParams(window.location.search);

                const hasFilters = Array.from(urlParams.entries()).some(
                    ([key, value]) =>
                        key !== 'searchTerm' &&
                        key !== 'sortOrder' &&
                        key !== 'sortDescending'
                );

                if (hasFilters) {
                    filterToggleBtn.classList.add('active');
                }

                const sortOrder = urlParams.get('sortOrder');
                const sortDescending = urlParams.get('sortDescending');

                if ((sortOrder && sortOrder !== 'title') || sortDescending === 'true') {
                    sortToggleBtn.classList.add('active');
                }
            }

            checkActiveFilters();
        });
    </script>
}