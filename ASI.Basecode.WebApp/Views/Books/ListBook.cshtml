@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@using ASI.Basecode.Data.Models
@model List<Book>

@{
    ViewData["Title"] = "Book List";
    Layout = "_AdminSidebarLayout";
}

@section styles {
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <link rel="stylesheet" href="~/css/admin/common.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/admin/books/listbook.css" asp-append-version="true" />
}


<div class="content-card p-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div class="header-section">
            <h1>Books</h1>
            <p>Manage your book collection</p>
        </div>
        <p>
            <a href="/Book/AddBook" class="btn btn-secondary">
                <i class="fas fa-plus me-2" style="color: #fff"></i> ADD BOOKS
            </a>
        </p>
    </div>
    

    <div class="search-filter-container">
        <div style="position: relative; flex-grow: 1;">
            <i class="fas fa-search search-icon"></i>
            <input type="text" id="searchInput" class="form-control search-field" placeholder="Search" style="padding-left: 33px;" /> 
        </div>
        <div class="d-flex gap-2">
            <button class="btn btn-outline-secondary">
                <i class="fas fa-sort"></i> Sort
            </button>
            <button class="btn btn-outline-secondary">
                <i class="fas fa-filter"></i> Filter
            </button>
        </div>
    </div>

    @if (Model != null && Model.Any())
    {
        <div class="table-responsive">
            <table class="data-table table table-hover">
            <thead>
                <tr>
                    <th>Cover</th>
                    <th>Title</th>
                    <th>Subtitle</th>
                    <th>Author</th>
                    <th>Publisher</th>
                    <th>Publication Date</th>
                    <th>Language</th>
                    @* <th>Pages</th> *@
                    <th>Rating</th>
                    @* <th>Likes</th> *@
                    <th>Series</th>
                    @* <th>Description</th> *@
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                <td style="display:none" id="book-id"></td>
                <td style="display:none" id="cover-url"></td>
                <td style="display:none" id="book-url"></td>
                @foreach (var book in Model)
                {
                    <tr>
                        <td>
                            @if (!string.IsNullOrWhiteSpace(book.CoverImage))
                            {
                                <img src="@book.CoverImage" alt="Cover Image" class="cover-image" /> 
                            }
                            else
                            {
                                <span>No Image</span>
                            }
                        </td>
                        <td>@book.Title</td>
                        <td>@book.Subtitle</td>
                        <td>@book.Author</td>
                        <td>@book.Publisher</td>
                        <td>@book.PublicationDate?.ToString("yyyy-MM-dd")</td>
                        <td>@book.Language</td>
                        @* <td>@book.NumberOfPages</td> *@
                        <td>@book.AverageRating</td>
                        @* <td>@book.Likes</td> *@
                        <td>@book.SeriesName</td>
                        @* <td>@book.Description</td> *@
                        <td>
                                <div class="d-flex gap-2">
                                    <a href="/Book/BookDetails/@book.BookId" class="action-icon-button text-secondary">
                                        <i class="fas fa-info-circle"></i> 
                                    </a>
                                    <a href="/Book/EditBook/@book.BookId" class="action-icon-button text-primary">
                                        <i class="fas fa-edit"></i> 
                                    </a>
                                <button type="button" class="action-icon-button text-danger" data-bs-toggle="modal" data-bs-target="#deleteModal" id="delete-modal-button" data-book-id="@book.BookId" data-cover-url=@book.CoverImage data-book-url=@book.BookFile>
                                        <i class="fas fa-trash"></i> 
                                    </button>
                                </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
        </div>
    }
    else
    {
        <p class="empty-message">No books found. Why not add some?</p>
    }
</div>


<div class="modal fade confirmation-modal" id="deleteModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header border-0">
                <h5 class="modal-title" id="deleteModalLabel">Delete Confirmation</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body text-center">
                <p class="mb-4">Are you sure you want to delete this item?</p>
                <div class="d-flex justify-content-center gap-2">
                    <button type="button" class="btn btn-secondary px-4" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-danger px-4" id="delete-book-button">Delete</button>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="modal fade success-modal" id="successModal" tabindex="-1" aria-labelledby="successModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-body text-center py-4">
                <div class="success-icon mb-3">
                    <i class="fas fa-check"></i>
                </div>
                <h5 class="modal-title mb-2">Success!</h5> 
                <p class="mb-4" id="successModalMessage">Item deleted successfully!</p> 
                <button type="button" class="btn btn-secondary px-4" data-bs-dismiss="modal">OK</button>
            </div>
        </div>
    </div>
</div>


@section Scripts {
    <script type = "module">
        // Your Firebase configuration
        //Transfer this secretes into AnalyserNode env or file, and include it in gitignore.
        const firebaseConfig = {
            apiKey: "AIzaSyA4CTMSbgGQN_yLn9lEZlswbZ_2A2Xhl0k",
            authDomain: "basabuzz-ca8fe.firebaseapp.com",
            projectId: "basabuzz-ca8fe",
            storageBucket: "basabuzz-ca8fe.firebasestorage.app",
            messagingSenderId: "206533484485",
            appId: "1:206533484485:web:2c71a06a17d5244efe75ac"
        };

        // Initialize Firebase
        import { initializeApp } from "https://www.gstatic.com/firebasejs/11.9.1/firebase-app.js";
        import { getStorage, ref, uploadBytesResumable, getDownloadURL, deleteObject } from "https://www.gstatic.com/firebasejs/11.9.1/firebase-storage.js";

        const app = initializeApp(firebaseConfig);
        const storage = getStorage(app);

        async function deleteFileFromFirebase(fileUrl) {
            if (!fileUrl) {
                console.warn("Attempted to delete null or empty file URL.");
                return;
            }
            try {
                //Get a reference to the file from the download URL
                const fileRef = ref(storage, fileUrl);
                await deleteObject(fileRef);
                console.log(`Successfully deleted file: ${fileUrl}`);
            } catch (error) {
                // alert(`Failed to delete file ${fileUrl}:`, error)
                showSuccessModal(`Failed to delete file ${fileUrl}: ${error.message}`, 'Error');
                console.error(`Failed to delete file ${fileUrl}:`, error);
            }
        }

        async function deleteCoverUrlFromError(coverUrlCopy, coverUploadStatusCopy) {
            if (coverUrlCopy) {
                await deleteFileFromFirebase(coverUrlCopy);
                coverUploadStatusCopy.textContent = 'Cover image upload rolled back due to backend error.';
            }
            else {
                showSuccessModal("Warning: No cover URL provided for rollback.", 'Warning');
            }
        }

        async function deleteBookUrlFromError(bookFileUploadStatusCopy, bookUrlCopy) {
            if (bookUrlCopy) {
                await deleteFileFromFirebase(bookUrlCopy);
                bookFileUploadStatusCopy.textContent = 'Book file upload rolled back due to backend error.';
            }
            else {
                showSuccessModal("Warning: No book URL provided for rollback.", 'Warning');
            }
        }

        async function deleteCoverUrl(coverUrlCopy) {
            if (coverUrlCopy) {
                await deleteFileFromFirebase(coverUrlCopy);
            }
            else {
                showSuccessModal("Warning: No cover URL provided.", 'Warning');
            }
        }

        async function deleteBookUrl(bookUrlCopy) {
            if (bookUrlCopy) {
                await deleteFileFromFirebase(bookUrlCopy);
            }
            else {
                showSuccessModal("Warning: No book URL provided.", 'Warning');
            }
        }

        //Firebase Upload Function
        //This function returns the download URL or null on failure/no file
        async function uploadFileToFirebase(file, path, statusElement) {
            if (!file) {
                statusElement.textContent = 'No file selected.';
                return null; //Indicates no file was provided
            }

            //Generate New File Name
            const timestamp = new Date().getTime();
            const randomString = Math.random().toString(36).substring(2, 8);
            const uniqueFileName = `${timestamp}-${randomString}-${file.name}`;

            const storageRef = ref(storage, path + uniqueFileName);
            const uploadTask = uploadBytesResumable(storageRef, file);

            return new Promise((resolve, reject) => {
                uploadTask.on('state_changed',
                    (snapshot) => {
                        const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;
                        statusElement.textContent = `Upload is ${progress.toFixed(2)}% done`;
                    },
                    (error) => {
                        statusElement.textContent = `Upload failed: ${error.message}`;
                        console.error("Upload error:", error);
                        showSuccessModal(`File upload failed: ${error.message}`, 'Error');
                        reject(error); //Reject the promise on upload error
                    },
                    async () => {
                        try {
                            const downloadURL = await getDownloadURL(uploadTask.snapshot.ref);
                            statusElement.textContent = 'Upload successful!';
                            resolve(downloadURL); //Resolve with the download URL
                        } catch (error) {
                            statusElement.textContent = `Failed to get download URL: ${error.message}`;
                            console.error("Get Download URL error:", error);
                            showSuccessModal(`Failed to get download URL: ${error.message}`, 'Error');
                            reject(error); //Reject the promise if getting URL fails
                        }
                    }
                );
            });
        }


        // dynamic success modal 
        function showSuccessModal(message, type = 'Success') { 
            var deleteModalElement = document.getElementById('deleteModal');
            var deleteModal = bootstrap.Modal.getInstance(deleteModalElement);
            if (deleteModal) {
                deleteModal.hide();
            }

            const successModalTitle = document.getElementById('successModalLabel');
            const successModalMessage = document.getElementById('successModalMessage'); 

            if (successModalTitle) {
                successModalTitle.textContent = type; 
            }
            if (successModalMessage) {
                successModalMessage.textContent = message;
            }

            // Change icon based on type
            const successIcon = document.querySelector('#successModal .success-icon i');
            if (successIcon) {
                successIcon.classList.remove('fa-check', 'fa-times', 'fa-exclamation-triangle'); 
                if (type === 'Success') {
                    successIcon.classList.add('fa-check');
                    successIcon.style.color = '#28a745'; /
                } else if (type === 'Error') {
                    successIcon.classList.add('fa-times');
                    successIcon.style.color = '#dc3545'; 
                } else if (type === 'Warning') {
                    successIcon.classList.add('fa-exclamation-triangle');
                    successIcon.style.color = '#ffc107'; 
                } else {
                    successIcon.classList.add('fa-check'); 
                    successIcon.style.color = '#28a745';
                }
            }


            setTimeout(function () {
                var successModalElement = document.getElementById('successModal');
                var successModal = new bootstrap.Modal(successModalElement);
                successModal.show();
            }, 100);
        }

        const show_delete_modal = document.querySelectorAll("#delete-modal-button");
        const get_book_id = document.getElementById("book-id")
         const get_cover_url = document.getElementById("cover-url")
        const get_book_url = document.getElementById("book-url")

        //Adding click event listener for each delete button
        //Grab the bookId cover Url and Book Url from which the trash button was clicked
        show_delete_modal.forEach(button => {
            button.addEventListener("click", function (event) {


                const hold_book_id = this.dataset.bookId
                const hold_cover_url = this.dataset.coverUrl
                const hold_book_url = this.dataset.bookUrl
                get_book_id.textContent = hold_book_id
                get_cover_url.textContent = hold_cover_url
                get_book_url.textContent = hold_book_url

            })
        })


        //Fetch Api to delete book
        const delete_book_button = document.getElementById("delete-book-button")
        delete_book_button.addEventListener("click", async function (event) {
            try{
                const response = await fetch("/Book/Delete",{
                    method:"POST",
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ BookId: get_book_id.textContent })
                })

                if (response.ok) 
                {
                    const result = await response.json()
                    // alert(`${result.message}`)
                    showSuccessModal(result.message || "Book deleted successfully!", 'Success');
                    if(get_cover_url.textContent !== null || get_cover_url.textConent !== "")
                    {
                        await deleteCoverUrl(get_cover_url.textContent);
                    }

                    if (get_book_url.textContent !== null || get_book_url.textConent !== "") {
                        await deleteBookUrl(get_book_url.textContent)
                    }

                    setTimeout(() => {
                        window.location.reload();
                    }, 1500);
                    // window.location.reload()
                }
                else{
                    // alert(`Error: ${result.message}`)
                    const errorResult = await response.json();
                    showSuccessModal(`Error: ${errorResult.message}`, 'Error');
                }
            }
            catch(error){
                // alert(`Error: An unexpected error occurred while deleting book data. Please try again.`)
                showSuccessModal(`Error: An unexpected error occurred while deleting book data. Please try again.`, 'Error');
                console.error("Fetch error:", error);
            }
        })


    </script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
}