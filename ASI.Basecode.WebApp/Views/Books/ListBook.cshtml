@using ASI.Basecode.Data.Interfaces;
@model PaginatedList<ASI.Basecode.Services.ServiceModels.BookViewModel>
@using Microsoft.AspNetCore.Routing;
@using ASI.Basecode.Services.ServiceModels;

@{
    ViewData["Title"] = "Book List";
    Layout = "_AdminSidebarLayout";
    string display_name = "Books";
    var allLanguages = (List<LanguageViewModel>)ViewData["AllLanguages"];
    var currentCategory = (string?)ViewContext.HttpContext.Request.Query["category"];
    var allGenres = (List<BookGenreViewModel>)ViewData["AllGenres"];
    var currentSearch = (string?)ViewData["CurrentSearch"];
    var currentAuthor = (string?)ViewData["CurrentAuthor"];
    var currentRating = (int?)ViewData["CurrentRating"];
    var currentFromDate = (string?)ViewData["CurrentFromDate"];
    var currentToDate = (string?)ViewData["CurrentToDate"];
    var currentGenres = ViewData["CurrentGenres"] as string[] ?? Array.Empty<string>();
    var currentSort = (string?)ViewData["CurrentSort"];
    var currentSortDescending = (bool)(ViewData["CurrentSortDescending"] ?? false);
    var currentIsFeatured = (bool?)ViewData["CurrentIsFeatured"];
    var routeValues = new Dictionary<string, string>();
    var descriptionParts = new List<string>();
    var currentLanguage = (string?)ViewData["CurrentLanguage"];

    if (!string.IsNullOrWhiteSpace(currentCategory))
    {
        routeValues["category"] = currentCategory;
    }
    if (!string.IsNullOrWhiteSpace(currentSearch))
    {
        routeValues["searchTerm"] = currentSearch;
        descriptionParts.Add($"Search: \"{currentSearch}\"");
    }
    if (!string.IsNullOrWhiteSpace(currentAuthor))
    {
        routeValues["author"] = currentAuthor;
        descriptionParts.Add($"Author: {currentAuthor}");
    }
    if (currentRating.HasValue)
    {
        routeValues["rating"] = currentRating.Value.ToString();
        descriptionParts.Add($"Rating: {currentRating.Value}★ & up");
    }
    if (!string.IsNullOrWhiteSpace(currentFromDate))
    {
        routeValues["publishedFrom"] = currentFromDate;
        descriptionParts.Add($"Published from: {DateTime.Parse(currentFromDate).ToString("yyyy-MM-dd")} ");
    }
    if (!string.IsNullOrWhiteSpace(currentToDate))
    {
        routeValues["publishedTo"] = currentToDate;
        descriptionParts.Add($"Published to: {DateTime.Parse(currentToDate).ToString("yyyy-MM-dd")} ");
    }
    if (currentIsFeatured == true)
    {
        routeValues["isFeatured"] = "true";
        descriptionParts.Add("Featured");
    }

        if (currentGenres.Any()) {
        routeValues["genreFilter"] = string.Join(",", currentGenres);
        var selectedNames = allGenres
            .Where(g => currentGenres.Contains(g.BookGenreId))
            .Select(g => g.GenreName);
        descriptionParts.Add($"Genre: {string.Join(", ", selectedNames)}");
    }
    if (!string.IsNullOrEmpty(currentSort) && currentSort != "title")
    {
        routeValues["sortOrder"] = currentSort;
    }
    if (!string.IsNullOrWhiteSpace(currentLanguage)) {
        routeValues["languageFilter"] = currentLanguage;
       var languageName = allLanguages
        .FirstOrDefault(l => l.LanguageId == currentLanguage)?.LanguageName ?? currentLanguage;
    
        descriptionParts.Add($"Language: {languageName}");

    }

    if (currentSortDescending)
    {
        routeValues["sortDescending"] = "true";
    }

    // Final description text
    var descriptionText = descriptionParts.Any()
        ? string.Join(" | ", descriptionParts)
        : "Manage books";

    var deleteBookConfirmationModel = new ConfirmationModalModel
            {
                Id = "deleteBookConfirmationModal", 
                Title = "Delete Confirmation",
                Message = "Are you sure you want to delete this book?",
                CancelButtonText = "Cancel",
                ConfirmButtonText = "Delete",
                ConfirmButtonId = "confirmDeleteBookAction", 
                ConfirmButtonClass = "btn-danger px-4"
            };
}
@section styles {
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" />
    <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css" />
    <link rel="stylesheet" href="~/css/admin/common.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/admin/books/listbook.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/pagination.css" asp-append-version="true" />

    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/select2-bootstrap-5-theme@1.3.0/dist/select2-bootstrap-5-theme.min.css" />

    <style>
    .sort-popup {
            top: 276px;
        }

        input[type="text"] {
            transform: translateY(-3px);
        }

            input[type="text"]:hover {
                transform: translateY(-2px);
            }
    </style>
}

<div class="content-card p-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div class="header-section">
            <h1>@display_name</h1>
            @if (descriptionParts.Any())
            {
                                <p>Search Results</p>

            }
            else
            {
                                <p>Manage your books</p>
            }
            @if(descriptionParts.Any())
                    {
                        <div class="active-filters">
                            <div class="filter-tags">
                                @foreach(var part in descriptionParts)
                                {
                                    <p class="filter-tag">@part</p>
                                }
                            </div>
                        </div>
                    }
        </div>
        <p>
            <a href="/Book/AddBook" class="btn btn-secondary">
                <i class="fas fa-plus me-2" style="color: #fff"></i> ADD BOOKS
            </a>
        </p>
    </div>
    <div class="card">
        <div class="card-body">
             <div class="search-filter-container" style="height: 50px; align-items: stretch; margin-top: 10px; margin-bottom: 15px">
                    <div class="search-container" style="margin-right: 10px">
                         <!-- Search Bar -->

                        <i class="fas fa-search"></i>
                        <input type="text"
                               name="searchTerm"
                               value=@currentSearch
                               placeholder="Search title, author…"
                               class="book-master-form-input align-self-center" 
                               style="font-weight: 300; margin-right: 10px"
                               id="globalSearchInput" />
                    </div>
                    <div class="action-buttons position-relative">
                        <button type="button" class="btn btn-outline-secondary filter-btn" id="filterToggleBtn">
                            <i class="fas fa-sort"></i> Sort & Filter
                        </button>
                          <a asp-action="ListBook" class="btn btn-outline-secondary">
                                Clear All
                            </a>
                    </div>

            </div>


        </div>

    </div>
        
      
        
    </div>

    <!-- Filter Popup -->
    <div class="filter-popup" id="filterPopup">
        <div class="popup-header">
            <h5>Filter By</h5>
            <button class="popup-close" id="closeFilterPopup">&times;</button>
        </div>

        <form asp-action="ListBook" method="get" id="filterForm">

        <div class="card-body filter-sections-container">
        <div class="filter-section">
        <div class="filter-section">
                <label class="form-label">Author</label>
                <input type="text"
                       name="author"
                       value="@currentAuthor"
                       class="form-control" id="filterAuthor" />
            </div>

            <div class="filter-section">
                <label class="form-label">Rating</label>
                <select name="rating" class="form-select select2-rating" id="filterRating">
                    <option value="">Any Rating</option>
                    @for (int i = 1; i <= 5; i++)
                    {
                        <option value="@i" selected="@(currentRating == i ? "selected" : null)">
                            @i ★ & up
                        </option>
                    }
                </select>

            </div>

            <div class="filter-section">
                <label class="form-label">Date Published</label>
                <div class="date-range">
                    <input type="date"
                           name="publishedFrom"
                           value="@currentFromDate"
                           class="form-control" id="filterPublishedFrom" />
                    <input type="date"
                           name="publishedTo"
                           value="@currentToDate"
                           class="form-control" id="filterPublishedTo" />
                </div>
            </div>

            <div class="filter-section">
                <label class="form-label">Genres</label>
                <select name="genreFilter" class="form-select" id="filterGenres" multiple="multiple" style="width: 100%;">
                    @foreach (var genre in allGenres)
                    {
                        <option value="@genre.BookGenreId" selected="@(currentGenres.Contains(genre.BookGenreId) ? "selected" : null)">
                            @genre.GenreName
                        </option>
                    }
                </select>
            </div>

            <div class="filter-section">
                <label class="form-label">Language</label>
                <select name="languageFilter" class="form-select" id="filterLanguage" style="width: 100%;">
                    <option value="">Any</option> 
                    @foreach (var language in allLanguages)
                    {
                        <option value="@language.LanguageId" selected="@(currentLanguage == language.LanguageId ? "selected" : null)">
                            @language.LanguageName
                        </option>
                    }
                </select>
            </div>

            <div class="form-check filter-section">
                <input class="form-check-input"
                       type="checkbox"
                       id="isFeaturedFilter"
                       name="isFeatured"
                       value="true"
                @(currentIsFeatured == true ? "checked" : null) />
                <label class="form-check-label mt-3" for="isFeaturedFilter">
                    Featured only
                </label>
            </div>
        </div>
          
        </div>
                      <div class="card-body">
                <div class="mb-3">
                    <label class="form-label fw-bold">Sort by:</label>
                    <div class="ms-2">
                        <div class="form-check">
                            <input class="form-check-input" type="radio" name="sortOrder" id="sortTitle" value="title" @(currentSort == "title" ? "checked" : null)>
                            <label class="form-check-label" for="sortTitle">Title</label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input" type="radio" name="sortOrder" id="sortPublicationDate" value="publicationdate" @(currentSort == "publicationdate" ? "checked" : null)>
                            <label class="form-check-label" for="sortPublicationDate">Publication Date</label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input" type="radio" name="sortOrder" id="sortRating" value="rating" @(currentSort == "rating" ? "checked" : null)>
                            <label class="form-check-label" for="sortRating">Rating</label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input" type="radio" name="sortOrder" id="sortUploadDate" value="uploaddate" @(currentSort == "uploaddate" ? "checked" : null)>
                            <label class="form-check-label" for="sortUploadDate">Upload Date</label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input" type="radio" name="sortOrder" id="sortUpdatedDate" value="updateddate" @(currentSort == "updateddate" ? "checked" : null)>
                            <label class="form-check-label" for="sortUpdatedDate">Updated Date</label>
                        </div>
                    </div>
                </div>

                <div class="mb-3">
                    <label class="form-label fw-bold">Direction:</label>
                    <div class="ms-2">
                        <div class="form-check">
                            <input class="form-check-input" type="radio" name="sortDescending" id="sortAsc" value="false" @(!currentSortDescending ? "checked" : null)>
                            <label class="form-check-label" for="sortAsc">Ascending <i class="fas fa-arrow-up"></i></label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input" type="radio" name="sortDescending" id="sortDesc" value="true" @(currentSortDescending ? "checked" : null)>
                            <label class="form-check-label" for="sortDesc">Descending <i class="fas fa-arrow-down"></i></label>
                        </div>
                    </div>
                </div>
            </div>

            <div class="popup-footer">
                <a asp-action="ListBook" class="btn btn-outline-secondary">
                    Clear All
                </a>
                <button type="submit" class="btn btn-primary">
                    Apply Filter
                </button>
            </div>
        </form>
    </div>

    <!-- Sort Popup -->
    <div class="sort-popup card shadow" id="sortPopup">
        
    </div>
      
                <p style="font-size: 12px; color:"gray">Showing  @Model.StartIndex - @Model.EndIndex out of @Model.TotalCount books</p>

    <p class="no-search-results-message" style="display: none;">No books found matching your search criteria.</p>

    @if (Model != null && Model.Any())
    {
        <div class="table-responsive">
            <table class="data-table table">
                <thead>
                    <tr>
                        <th>Cover</th>
                        <th>Title</th>
                        <th>Author</th>
                        
                        <th>Language</th>
                        <th>Rating</th>
                        <th>Publication Date</th>
                        <th>Upload Date</th>
                        <th class="text-md-center">Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var book in Model)
                    {
                        <tr style="cursor:pointer" onclick="window.location='/Book/BookDetails/@book.BookId'" >
                            <td>
                                @if (!string.IsNullOrWhiteSpace(book.CoverImage))
                                {
                                    <img src="@book.CoverImage" alt="Cover Image" class="cover-image" />
                                }
                                else
                                {
                                    <span>No Image</span>
                                }
                            </td>
                            <td>@book.Title</td>
                            <td>@book.Author</td>
                            
                            <td>@book.Language</td>
                            <td>@book.AverageRating</td>
                            <td>@book.PublicationDate?.ToString("yyyy-MM-dd")</td>
                            <td>@book.UploadDate</td>
                            <td>
                                <div class="d-flex gap-2 justify-content-center">
                                    <a href="/Book/EditBook/@book.BookId" class="action-icon-button text-primary">
                                        <i class="fas fa-edit"></i>
                                    </a>
                                     
                                     <button type="button" class="action-icon-button text-danger"
                                            data-bs-toggle="modal"
                                            data-bs-target="#@deleteBookConfirmationModel.Id" 
                                            data-book-id="@book.BookId"
                                            data-cover-url="@book.CoverImageUrl"
                                            data-book-url="@book.BookFileUrl">
                                        <i class="fas fa-trash"></i>
                                    </button>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
    else
    {
        <p class="empty-message">No books found. Why not add some?</p>
    }

    <partial name="_PaginationPartial" view-data='@new ViewDataDictionary(ViewData) {
        { "RouteValues", routeValues },
        { "CurrentPage", Model.PageIndex },
        { "TotalPages", Model.TotalPages }
    }' />


</div>

<div class="loading-overlay" id="loadingOverlay">
    <div class="loading-spinner"></div>
</div>
<partial name="_ConfirmationModal" model="deleteBookConfirmationModel" />





@section Scripts {
    <script src="//cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>
    <script type="module">
        import { showLoadingOverlay, hideLoadingOverlay } from "/js/common/_loadingSpinner.js";

        const firebaseConfig = {
            apiKey: "AIzaSyA4CTMSbgGQN_yLn9lEZlswbZ_2A2Xhl0k",
            authDomain: "basabuzz-ca8fe.firebaseapp.com",
            projectId: "basabuzz-ca8fe",
            storageBucket: "basabuzz-ca8fe.firebasestorage.app",
            messagingSenderId: "206533484485",
            appId: "1:206533484485:web:2c71a06a17d5244efe75ac"
        };

   
        import { initializeApp } from "https://www.gstatic.com/firebasejs/11.9.1/firebase-app.js";
        import { getStorage, ref, deleteObject } from "https://www.gstatic.com/firebasejs/11.9.1/firebase-storage.js";

        const app = initializeApp(firebaseConfig);
        const storage = getStorage(app);

        
        async function deleteFileFromFirebase(fileUrl) {
            if (!fileUrl) {
                console.warn("Attempted to delete null or empty file URL.");
                return;
            }
            try {
                
                const fileRef = ref(storage, fileUrl);
                await deleteObject(fileRef);
                console.log(`Successfully deleted file: ${fileUrl}`);
            } catch (error) {

                toastr.error(`Failed to delete file ${fileUrl}: ${error.message}`);
                console.error(`Failed to delete file ${fileUrl}:`, error);
            }
        }


        async function deleteCoverUrl(coverUrlCopy) {

            if (coverUrlCopy && !coverUrlCopy.includes("placeholder.jpg")) {
                await deleteFileFromFirebase(coverUrlCopy);
            }
        }

        async function deleteBookUrl(bookUrlCopy) {
            if (bookUrlCopy && !bookUrlCopy.includes("placeholder.pdf")) {
                await deleteFileFromFirebase(bookUrlCopy);
            }
        }
        const deleteModalButtons = document.querySelectorAll("[data-bs-target='#@deleteBookConfirmationModel.Id']");
        
        let currentBookIdToDelete = null;
        let currentCoverUrlToDelete = null;
        let currentBookUrlToDelete = null;

        
        deleteModalButtons.forEach(button => {
            button.addEventListener("click", function () {
                currentBookIdToDelete = this.dataset.bookId;
                currentCoverUrlToDelete = this.dataset.coverUrl;
                currentBookUrlToDelete = this.dataset.bookUrl;
            });
        });


        const confirmDeleteBookButton = document.getElementById("@deleteBookConfirmationModel.ConfirmButtonId"); 
        if (confirmDeleteBookButton) {
            confirmDeleteBookButton.addEventListener("click", async function () {
                var deleteModalElement = document.getElementById('@deleteBookConfirmationModel.Id'); 
                var deleteModal = bootstrap.Modal.getInstance(deleteModalElement);

                showLoadingOverlay(); 
                confirmDeleteBookButton.disabled = true;

                if (deleteModal) {
                    deleteModal.hide(); 
                }

                try {
                    const response = await fetch("/Book/Delete", {
                        method: "POST",
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({ BookId: currentBookIdToDelete })
                    });

                    if (response.ok) {
                        const result = await response.json();
                        toastr.success(result.message || "Book deleted successfully!");

                        if (currentCoverUrlToDelete) {
                            await deleteCoverUrl(currentCoverUrlToDelete);
                        }
                        if (currentBookUrlToDelete) {
                            await deleteBookUrl(currentBookUrlToDelete);
                        }

                        setTimeout(() => {
                            window.location.reload();
                        }, 500);

                    } else {
                        const errorResult = await response.json();
                        toastr.error(`Error: ${errorResult.message || "Failed to delete book."}`);
                    }
                } catch (error) {
                    toastr.error(`Error: An unexpected error occurred while deleting book data. Please try again.`);
                    console.error("Fetch error:", error);
                } finally{
                    hideLoadingOverlay();
                    confirmDeleteBookButton.disabled = false;
                }
            });
        }



        document.addEventListener('DOMContentLoaded', function () {
            const filterToggleBtn = document.getElementById('filterToggleBtn');
            const sortToggleBtn = document.getElementById('sortToggleBtn');
            const filterPopup = document.getElementById('filterPopup');
            const sortPopup = document.getElementById('sortPopup');

            const cancelSortButton = document.getElementById('cancelSortButton');
            const applySortButton = document.getElementById('applySortButton');

            $('#filterGenres').select2({
                placeholder: "Select genres",
                allowClear: true,
                theme: "bootstrap-5"
            });

            $('#filterLanguage').select2({
                placeholder: "Select a language",
                allowClear: true,
                theme: "bootstrap-5"
            });

            $('.select2-rating').select2({
                theme: 'bootstrap-5',
                minimumResultsForSearch: Infinity,
                templateResult: formatRatingOption,
                templateSelection: formatRatingSelection
            });

            function formatRatingOption(state) {
                if (!state.id) return state.text;
                return $('<span>').addClass('rating-option').html(
                    '<span class="rating-stars">' +
                    '★'.repeat(parseInt(state.id)) +
                    '</span> <span class="rating-text">& up</span>'
                );
            }

            function formatRatingSelection(state) {
                if (!state.id) return state.text;
                return $('<span>').addClass('rating-selection').html(
                    '<span class="rating-stars">' +
                    '★'.repeat(parseInt(state.id)) +
                    '</span> <span class="rating-text">& up</span>'
                );
            }

            const currentGenresArray = @Html.Raw(Json.Serialize(currentGenres));
            $('#filterGenres').val(currentGenresArray).trigger('change');

            const currentLanguageValue = "@currentLanguage";
            if (currentLanguageValue) {
                $('#filterLanguage').val(currentLanguageValue).trigger('change');
            }

            // filter popup
            filterToggleBtn?.addEventListener('click', function (e) {
                e.stopPropagation();

                if (sortPopup.classList.contains('show')) {
                    sortPopup.classList.remove('show');
                    sortToggleBtn.classList.remove('active');
                }

                filterPopup.classList.toggle('show');
                if (filterPopup.classList.contains('show')) {
                    filterToggleBtn.classList.add('active');
                } else {
                    filterToggleBtn.classList.remove('active');
                }
            });




            // sort sort popup
            sortToggleBtn?.addEventListener('click', function (e) {
                e.stopPropagation();

                if (filterPopup.classList.contains('show')) {
                    filterPopup.classList.remove('show');
                    filterToggleBtn.classList.remove('active');
                }

                sortPopup.classList.toggle('show');
                if (sortPopup.classList.contains('show')) {
                    sortToggleBtn.classList.add('active');
                } else {
                    sortToggleBtn.classList.remove('active');
                }
            });

            document.getElementById('closeFilterPopup')?.addEventListener('click', function () {
                filterPopup.classList.remove('show');
                filterToggleBtn.classList.remove('active');
            });

            cancelSortButton?.addEventListener('click', function () {
                sortPopup.classList.remove('show');
                sortToggleBtn.classList.remove('active');
            });

            applySortButton?.addEventListener('click', function () {
                submitAllFilters();
            });

            document.addEventListener('click', function (e) {
                if (!filterPopup.contains(e.target) && e.target !== filterToggleBtn && !filterToggleBtn.contains(e.target)) {
                    filterPopup.classList.remove('show');
                    filterToggleBtn.classList.remove('active');
                }

                if (!sortPopup.contains(e.target) && e.target !== sortToggleBtn && !sortToggleBtn.contains(e.target)) {
                    sortPopup.classList.remove('show');
                    sortToggleBtn.classList.remove('active');
                }
            });



            let typingTimer;
            const doneTypingInterval = 500;

 globalSearchInput?.addEventListener('keypress', function (e) {
    if (e.key === 'Enter') {
        e.preventDefault(); // Prevent form submission if it's inside a form
        submitAllFilters();
    }
});

            function submitAllFilters() {
                const currentUrl = new URL(window.location.origin + window.location.pathname);
                const params = new URLSearchParams();

                // global search
                if (globalSearchInput && globalSearchInput.value) {
                    params.set('searchTerm', globalSearchInput.value);
                }

                // filter
                const filterForm = document.getElementById('filterForm');
                if (filterForm) {
                    const filterFormData = new FormData(filterForm);
                    filterFormData.forEach((value, key) => {
                        if (key === 'genreFilter') {
                            const selectedGenres = Array.from(filterForm.querySelectorAll('#filterGenres option:checked'))
                                .map(option => option.value);
                            if (selectedGenres.length > 0) {
                                params.set(key, selectedGenres.join(','));
                            } else {
                                params.delete(key);
                            }
                        } else if (key === 'languageFilter') {
                            if (value) {
                                params.set(key, value);
                            } else {
                                params.delete(key);
                            }
                        }
                        else {
                            if (value) {
                                params.set(key, value);
                            }
                        }
                    });

                    const isFeaturedCheckbox = filterForm.querySelector('#isFeaturedFilter');
                    if (isFeaturedCheckbox && !isFeaturedCheckbox.checked) {
                        if (params.has('isFeatured')) {
                            params.delete('isFeatured');
                        }
                    }
                }

                // sort
                const sortForm = document.getElementById('sortForm');
                if (sortForm) {
                    const selectedSortOrder = sortForm.querySelector('input[name="sortOrder"]:checked')?.value;
                    const selectedSortDirection = sortForm.querySelector('input[name="sortDescending"]:checked')?.value;

                    if (selectedSortOrder) {
                        params.set('sortOrder', selectedSortOrder);
                    } else {
                        params.delete('sortOrder');
                    }

                    if (selectedSortDirection) {
                        params.set('sortDescending', selectedSortDirection);
                    } else {
                        params.delete('sortDescending');
                    }
                }

                currentUrl.search = params.toString();
                window.location.href = currentUrl.toString();
            }


            const filterForm = document.getElementById('filterForm');
            const sortForm = document.getElementById('sortForm');

            if (filterForm) {
                filterForm.addEventListener('submit', function (e) {
                    e.preventDefault();
                    submitAllFilters();
                });
            }

            if (sortForm) {
                 filterForm.addEventListener('submit', function (e) {
                    e.preventDefault();
                    submitAllFilters();
                });
            }


            function checkActiveFilters() {
                const urlParams = new URLSearchParams(window.location.search);

                const hasFilters = Array.from(urlParams.entries()).some(
                    ([key, value]) =>
                        key !== 'searchTerm' &&
                        key !== 'sortOrder' &&
                        key !== 'sortDescending' &&
                        value !== '' &&
                        !(key === 'isFeatured' && value === 'false')
                );


                if (hasFilters) {
                    filterToggleBtn.classList.add('active');
                }

                const sortOrder = urlParams.get('sortOrder');
                const sortDescending = urlParams.get('sortDescending');

                if ((sortOrder && sortOrder !== 'title') || (sortDescending === 'true')) {
                    sortToggleBtn.classList.add('active');
                } else if (sortOrder === null && sortDescending === null && !urlParams.has('sortOrder') && !urlParams.has('sortDescending')) {
                    sortToggleBtn.classList.remove('active');
                }
            }



            checkActiveFilters();
        });
    </script>
}