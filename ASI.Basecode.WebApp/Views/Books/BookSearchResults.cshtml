@using ASI.Basecode.Services.ServiceModels
@model PaginatedList<BookViewModel>
@{
    ViewData["Title"] = "Search Results";
    var categoryTitle = (string?)ViewData["CategoryTitle"] ?? "";
    var allGenres = (List<BookGenreViewModel>)ViewData["AllGenres"];
    var allLanguages = (List<LanguageViewModel>)ViewData["AllLanguages"];
    var currentSearch = (string?)ViewData["CurrentSearch"];
    var currentIsFeatured = (bool?)ViewData["CurrentIsFeatured"];
    var currentAuthor = (string?)ViewData["CurrentAuthor"];
    var currentRating = (int?)ViewData["CurrentRating"];
    var currentLanguage = (string?)ViewData["CurrentLanguage"];
    var currentFromDate = (string?)ViewData["CurrentFromDate"];
    var currentToDate = (string?)ViewData["CurrentToDate"];
    var currentGenres = ViewData["CurrentGenres"] as string[] ?? Array.Empty<string>();
    var currentSort = (string?)ViewData["CurrentSort"];
    var currentSortDescending = (bool)(ViewData["CurrentSortDescending"] ?? false);
    var currentCategory = (string?)ViewContext.HttpContext.Request.Query["category"] ?? string.Empty;

    
    var routeValues = new Dictionary<string,string>();
    var descriptionParts = new List<string>();

    if (!string.IsNullOrWhiteSpace(currentCategory)) {
        routeValues["category"] = currentCategory;
        // descriptionParts.Add($"Category: {currentCategory}");
    }
    if (!string.IsNullOrWhiteSpace(currentSearch)) {
        routeValues["searchTerm"] = currentSearch;
        descriptionParts.Add($"Search: \"{currentSearch}\"");
    }
    if (!string.IsNullOrWhiteSpace(currentLanguage)) {
        routeValues["languageFilter"] = currentLanguage;
        descriptionParts.Add($"Language: \"{currentLanguage}\"");
    }
    if (!string.IsNullOrWhiteSpace(currentAuthor)) {
        routeValues["author"] = currentAuthor;
        descriptionParts.Add($"Author: {currentAuthor}");
    }
    if (currentRating.HasValue) {
        routeValues["rating"] = currentRating.Value.ToString();
        descriptionParts.Add($"Rating: {currentRating.Value}★ & up");
    }
    if (currentIsFeatured == true) {
      routeValues["isFeatured"] = "true";
      descriptionParts.Add("Featured");
    }

    if (!string.IsNullOrWhiteSpace(currentFromDate)) {
        routeValues["publishedFrom"] = currentFromDate;
        descriptionParts.Add($"Published from: {DateTime.Parse(currentFromDate).ToString("yyyy-MM-dd")} ");
    }
    if (!string.IsNullOrWhiteSpace(currentToDate)) {
        routeValues["publishedTo"] = currentToDate;
        descriptionParts.Add($"Published to: {DateTime.Parse(currentToDate).ToString("yyyy-MM-dd")} ");
    }
    if (currentGenres.Any()) {
        routeValues["genreFilter"] = string.Join(",", currentGenres);
        var selectedNames = allGenres
            .Where(g => currentGenres.Contains(g.BookGenreId))
            .Select(g => g.GenreName);
        descriptionParts.Add($"Genre: {string.Join(", ", selectedNames)}");
    }
    if (!string.IsNullOrEmpty(currentSort) && currentSort != "title") {
        routeValues["sortOrder"] = currentSort;
    }
    if (currentSortDescending) {
        routeValues["sortDescending"] = "true";
    }

        var descriptionText = descriptionParts.Any()
        ? string.Join(" | ", descriptionParts)
        : "Manage books";
}

@section styles {
    <link rel="stylesheet" href="~/css/searchresults.css" asp-append-version="true" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" />
}

<div class="search-results-container">
    <!-- Left Side - Scrollable Book Results -->
    <div class="search-results-left">
        <div class="sticky-header-wrapper">
            <div class="search-header">
                <h2>Results for: @categoryTitle</h2>
                <p>Displaying @Model.PageIndex of @Model.TotalPages out of @Model.TotalCount results</p>
            </div>
            

       
    <form asp-controller="Book" asp-action="SearchResults"  method="get" class="mb-3">

<div class="row g-3 align-items-end">
    <div class="col-md-4">
      <label class="form-label">Search</label>
      <input type="text"
             name="searchTerm"
             value="@ViewData["CurrentSearch"]"
             placeholder="Title, subtitle, author…"
             class="form-control" />
    </div>

      <div class="col-md-3">
      <label class="form-label">Sort by</label>
      <select name="sortOrder" class="form-select">
        <option value="title"             selected="@(currentSort == "title")">Title</option>
        <option value="publicationdate"   selected="@(currentSort == "publicationdate")">Publication Date</option>
        <option value="rating"            selected="@(currentSort == "rating")">Rating</option>
        <option value="uploaddate"        selected="@(currentSort == "uploaddate")">Upload Date</option>

      </select>
    </div>

     <div class="col-md-2">
      <label class="form-label">Direction</label>
      <select name="sortDescending" class="form-select">
        <option value="false" selected="@(!currentSortDescending)">Ascending</option>
        <option value="true"  selected="@( currentSortDescending)">Descending</option>
      </select>
    </div>



    <div class="col-md-3">
      <label class="form-label">Author</label>
      <input type="text"
             name="author"
             value="@currentAuthor"
             class="form-control" />
    </div>

    <div class="col-md-2">
      <label class="form-label">Rating</label>
       <select name="rating" class="form-select">
      <option value="">Any</option>
          @for (int i = 1; i <= 5; i++)
          {
            if (currentRating == i)
            {
              <option value="@i" selected>
                @i ★ & up
              </option>
            }
            else
            {
              <option value="@i">
                @i ★ & up
              </option>
            }
          }
    </select>

    </div>

    <div class="col-md-3">
      <label class="form-label">Date Published</label>
      <div class="d-flex">
        <input type="date"
               name="publishedFrom"
               value="@currentFromDate"
               class="form-control me-1" />
        <input type="date"
               name="publishedTo"
               value="@currentToDate"
               class="form-control" />
      </div>
    </div>
  </div>

  <fieldset class="mt-3">
    <legend class="form-label">Genres</legend>
    <div class="row">
      @foreach (var genre in allGenres)
      {
        <div class="col-sm-3">
          <div class="form-check">
            <input class="form-check-input"
                   type="checkbox"
                   name="genreFilter"
                   value="@genre.BookGenreId"
                   id="g_@genre.BookGenreId"
                   @(currentGenres.Contains(genre.BookGenreId) ? "checked" : "") />
            <label class="form-check-label" for="g_@genre">
              @genre.GenreName
            </label>
          </div>
        </div>
      }
    </div>
  </fieldset>
    <div class="col-md-2">
    <div class="form-check mt-4">
      <input 
        class="form-check-input" 
        type="checkbox" 
        id="isFeatured" 
        name="isFeatured" 
        value="true"
        @(currentIsFeatured == true ? "checked" : "") />
      <label class="form-check-label" for="isFeatured">
        Featured only
      </label>
    </div>
  </div>

    <fieldset class="mt-3">
    <legend class="form-label">Language</legend>
    <div class="row">
      @foreach (var language in allLanguages)
      {
        <div class="col-sm-3">
          <div class="form-check">
           <input class="form-check-input"
           type="radio"
           name="languageFilter"
           value="@language.LanguageId"
           id="lang_@language.LanguageId"
           @(currentLanguage == language.LanguageId ? "checked" : "") />




            <label class="form-check-label" for="lang_@language.LanguageId">
              @language.LanguageName
            </label>
          </div>
        </div>
      }
    </div>
  </fieldset>

  <div class="d-flex justify-content-end mt-3">
    <a asp-controller="Book"
       asp-action="SearchResults"
       asp-all-route-data="@(new Dictionary<string,string>())"
       class="btn btn-outline-secondary me-2">
      Clear All
    </a>

    <button type="submit" class="btn btn-primary">
      Apply Filters
    </button>
  </div>

</form>
            <div class="search-filters">
                <div class="filter-group">
                    <button class="sort-btn">Sort By <i class="fas fa-caret-down"></i></button>
                    <button class="filter-btn">Filter <i class="fas fa-caret-down"></i></button>
                </div>
            </div>
        </div>

        <div class="search-results-grid">
            @if(Model == null || !Model.Any())
            {
                <p class="no-results">No books match your search criteria.</p>
            }
            else
            {
                @foreach(var book in Model) {
                    <div class="book-card">
                        <a href="/Book/BookDetails/@book.BookId">
                            <img src="@book.CoverImage" alt="@book.Title" />
                        </a>
                        <div class="book-info">
                            <h3>@book.Title</h3>
                            <p class="author">@book.Author, @(book.UploadDate?.Year ?? 0)</p>
                            <div class="star-rating">
                                <div class="stars">
                                    @{
                                        float rating = book.AverageRating ?? 0;
                                        int fullStars = (int)Math.Floor(rating);
                                        bool hasHalfStar = (rating - fullStars) >= 0.25 && (rating - fullStars) < 0.75;
                                        bool hasFullStar = (rating - fullStars) >= 0.75;
                                        int totalFullStars = fullStars + (hasFullStar ? 1 : 0);
                                        
                                        for (int i = 0; i < 5; i++)
                                        {
                                            if (i < totalFullStars)
                                            {
                                                <svg viewBox="0 0 24 24"><path d="M12 .587l3.668 7.568 8.332 1.151-6.064 5.828 1.48 8.212L12 18.896l-7.416 3.948 1.48-8.212L.001 9.306l8.332-1.151L12 .587z" /></svg>
                                            }
                                            else if (i == totalFullStars && hasHalfStar)
                                            {
                                                <svg class="half-star" viewBox="0 0 24 24">
                                                    <defs>
                                                        <linearGradient id="half@(book.BookId)_@(i)" x1="0%" y1="0%" x2="100%" y1="0%">
                                                            <stop offset="50%" stop-color="#FFD700" />
                                                            <stop offset="50%" stop-color="#ddd" />
                                                        </linearGradient>
                                                    </defs>
                                                    <path fill="url(#half@(book.BookId)_@(i))" d="M12 .587l3.668 7.568 8.332 1.151-6.064 5.828 1.48 8.212L12 18.896l-7.416 3.948 1.48-8.212L.001 9.306l8.332-1.151L12 .587z" />
                                                </svg>
                                            }
                                            else
                                            {
                                                <svg class="empty-star" viewBox="0 0 24 24"><path d="M12 .587l3.668 7.568 8.332 1.151-6.064 5.828 1.48 8.212L12 18.896l-7.416 3.948 1.48-8.212L.001 9.306l8.332-1.151L12 .587z" /></svg>
                                            }
                                        }
                                    }
                                </div>
                                <span class="rating-text">@book.AverageRating/5</span>
                              

                            </div>
                              <span class="rating-text">Upload date: @book.UploadDate</span>
                                 <hr/> 
                                 <span class="rating-text">Publication date: @book.PublicationDate</span>

                        </div>
                    </div>
                }
            }
        </div>

        <div class="pagination-container">
            <nav aria-label="Search results pages">
                <ul class="pagination">
                    <li class="page-nav @(Model.HasPreviousPage ? "" : "disabled")">
                        <a class="page-link"
                           asp-all-route-data="@(new Dictionary<string,string>(routeValues) {
                                ["page"] = (Model.PageIndex - 1).ToString()
                           })">
                            <i class="fas fa-chevron-left"></i>
                        </a>
                    </li>

                    @for (int i = 1; i <= Model.TotalPages; i++)
                    {
                        <li class="page-item @(i == Model.PageIndex ? "active" : "")">
                            <a class="page-link"
                               asp-all-route-data="@(new Dictionary<string,string>(routeValues) {
                                    ["page"] = i.ToString()
                               })">
                                @i
                            </a>
                        </li>
                    }

                    <li class="page-nav @(Model.HasNextPage ? "" : "disabled")">
                        <a class="page-link"
                           asp-all-route-data="@(new Dictionary<string,string>(routeValues) {
                                ["page"] = (Model.PageIndex + 1).ToString()
                           })">
                            <i class="fas fa-chevron-right"></i>
                        </a>
                    </li>
                </ul>
            </nav>
        </div>
    </div>
</div>