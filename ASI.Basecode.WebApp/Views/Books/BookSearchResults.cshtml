@using ASI.Basecode.Services.ServiceModels
@model PaginatedList<BookViewModel>
@{
    ViewData["Title"] = "Search Results";
    var categoryTitle = (string?)ViewData["CategoryTitle"] ?? "";
    var allGenres = (List<BookGenreViewModel>)ViewData["AllGenres"];
    var allLanguages = (List<LanguageViewModel>)ViewData["AllLanguages"];
    var currentSearch = (string?)ViewData["CurrentSearch"];
    var currentIsFeatured = (bool?)ViewData["CurrentIsFeatured"];
    var currentAuthor = (string?)ViewData["CurrentAuthor"];
    var currentRating = (int?)ViewData["CurrentRating"];
    var currentLanguage = (string?)ViewData["CurrentLanguage"];
    var currentFromDate = (string?)ViewData["CurrentFromDate"];
    var currentToDate = (string?)ViewData["CurrentToDate"];
    var currentGenres = ViewData["CurrentGenres"] as string[] ?? Array.Empty<string>();
    var currentSort = (string?)ViewData["CurrentSort"];
    var currentSortDescending = (bool)(ViewData["CurrentSortDescending"] ?? false);
    var currentCategory = (string?)ViewContext.HttpContext.Request.Query["category"] ?? string.Empty;
	var currentPageSize = (int)(ViewData["CurrentPageSize"] ?? 10);
    
    var routeValues = new Dictionary<string,string>();
    var descriptionParts = new List<string>();

    if (!string.IsNullOrWhiteSpace(currentCategory)) {
        routeValues["category"] = currentCategory;
        // descriptionParts.Add($"Category: {currentCategory}");
    }
    if (!string.IsNullOrWhiteSpace(currentSearch)) {
        routeValues["searchTerm"] = currentSearch;
        descriptionParts.Add($"Search: \"{currentSearch}\"");
    }
    if (!string.IsNullOrWhiteSpace(currentLanguage)) {
        routeValues["languageFilter"] = currentLanguage;
       var languageName = allLanguages
        .FirstOrDefault(l => l.LanguageId == currentLanguage)?.LanguageName ?? currentLanguage;
    
        descriptionParts.Add($"Language: {languageName}");

    }
    if (!string.IsNullOrWhiteSpace(currentAuthor)) {
        routeValues["author"] = currentAuthor;
        descriptionParts.Add($"Author: {currentAuthor}");
    }
    if (currentRating.HasValue) {
        routeValues["rating"] = currentRating.Value.ToString();
        descriptionParts.Add($"Rating: {currentRating.Value}★ & up");
    }
    if (currentIsFeatured == true) {
      routeValues["isFeatured"] = "true";
      descriptionParts.Add("Featured");
    }

    if (!string.IsNullOrWhiteSpace(currentFromDate)) {
        routeValues["publishedFrom"] = currentFromDate;
        descriptionParts.Add($"Published from: {DateTime.Parse(currentFromDate).ToString("dd MMM yyyy")} ");
    }
    if (!string.IsNullOrWhiteSpace(currentToDate)) {
        routeValues["publishedTo"] = currentToDate;
		descriptionParts.Add($"Published to: {DateTime.Parse(currentToDate).ToString("dd MMM yyyy")} ");
    }
    if (currentGenres.Any()) {
        routeValues["genreFilter"] = string.Join(",", currentGenres);
        var selectedNames = allGenres
            .Where(g => currentGenres.Contains(g.BookGenreId))
            .Select(g => g.GenreName);
        descriptionParts.Add($"Genre: {string.Join(", ", selectedNames)}");
    }
    if (!string.IsNullOrEmpty(currentSort) && currentSort != "title") {
        routeValues["sortOrder"] = currentSort;
    }
    if (currentSortDescending) {
        routeValues["sortDescending"] = "true";
    }
	routeValues["pageSize"] = currentPageSize.ToString();

    var descriptionText = descriptionParts.Any()
        ? string.Join(" | ", descriptionParts)
        : "Manage books";

    ViewData["CurrentPage"] = Model.PageIndex;
    ViewData["TotalPages"] = Model.TotalPages;
    ViewData["RouteValues"] = routeValues;
}

@section styles {
    <link rel="stylesheet" href="~/css/searchresults.css" asp-append-version="true" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" />
    <link rel="stylesheet" href="~/css/pagination.css" asp-append-version="true" />
}

<div class="search-results-container">   
    <!-- Left Side - Scrollable Book Results -->
    <div class="search-results-left">
        <div class="sticky-header-wrapper">
            @*<form asp-controller="Book" asp-action="SearchResults" method="get" class="search-bar-form mb-4" style="padding: 0 20px; width:100%">*@
                <div style="display: flex; flex-direction: row; gap: 15px; width: 100%; align-items: stretch;">
                    <div style="flex: 1;">
                        <div class="input-group h-100">
                            <span class="input-group-text"><i class="fas fa-search"></i></span>
                            <input type="text"
                                   name="searchTerm"
                                   value="@ViewData["CurrentSearch"]"
                                   placeholder="Title, subtitle..."
                                   class="form-control"
                                   id = "mainSearchTerm"
                                    />
                        </div>
                    </div>                   
                    <div>
                        <button id="toggleFilters" type="button" class="btn filter-toggle-btn">
                            <i class="fas fa-sliders-h"></i> Filters & Sort
                        </button>
                    </div>
                <div>
                    <button type="button"
                            class="btn clear-toggle-btn"
                            onclick="location.href='@Url.Action("SearchResults", "Book")'">
                        <i class="fas fa-times"></i> Clear All
                    </button>
                </div>
                </div>
            @*</form>*@
            <div class="search-header">
                <div class="search-header-content">
                    <h2>@(string.IsNullOrEmpty(categoryTitle) ? "Search Results" : $"Results for: {categoryTitle}")</h2>
                    <p>Displaying @Model.StartIndex - @Model.EndIndex out of @Model.TotalCount results</p>
                    @if(descriptionParts.Any())
                    {
                        <div class="active-filters">
                            <div class="filter-tags">
                                @foreach(var part in descriptionParts)
                                {
                                    <span class="filter-tag">@part</span>
                                }
                            </div>
                        </div>
                    }
                </div>               
            </div>
        </div>

        <div class="search-results-grid">
            @if(Model == null || !Model.Any())
            {
                <div class="no-results">
                    <i class="fas fa-search fa-3x mb-3" style="color: #ddd;"></i>
                    <p>No books match your search criteria.</p>
                    <p>Try adjusting your filters or search terms.</p>
                </div>
            }
            else
            {
                @foreach(var book in Model) {
                    <div class="book-card">
                        <a href="/Book/BookDetails/@book.BookId">
                            <img src="@book.CoverImage" alt="@book.Title" />
                        </a>
                        <div class="book-info">
                            <h3>@book.Title</h3>
                            <p class="author">@book.Author</p>
                            
                            <div class="star-rating">
                                <div class="stars">
                                    @{
                                        float rating = book.AverageRating ?? 0;
                                        int fullStars = (int)Math.Floor(rating);
                                        bool hasHalfStar = (rating - fullStars) >= 0.25 && (rating - fullStars) < 0.75;
                                        bool hasFullStar = (rating - fullStars) >= 0.75;
                                        int totalFullStars = fullStars + (hasFullStar ? 1 : 0);
                                        
                                        for (int i = 0; i < 5; i++)
                                        {
                                            if (i < totalFullStars)
                                            {
                                                <svg viewBox="0 0 24 24"><path d="M12 .587l3.668 7.568 8.332 1.151-6.064 5.828 1.48 8.212L12 18.896l-7.416 3.948 1.48-8.212L.001 9.306l8.332-1.151L12 .587z" /></svg>
                                            }
                                            else if (i == totalFullStars && hasHalfStar)
                                            {
                                                <svg class="half-star" viewBox="0 0 24 24">
                                                    <defs>
                                                        <linearGradient id="half@(book.BookId)_@(i)" x1="0%" y1="0%" x2="100%" y1="0%">
                                                            <stop offset="50%" stop-color="#FFD700" />
                                                            <stop offset="50%" stop-color="#ddd" />
                                                        </linearGradient>
                                                    </defs>
                                                    <path fill="url(#half@(book.BookId)_@(i))" d="M12 .587l3.668 7.568 8.332 1.151-6.064 5.828 1.48 8.212L12 18.896l-7.416 3.948 1.48-8.212L.001 9.306l8.332-1.151L12 .587z" />
                                                </svg>
                                            }
                                            else
                                            {
                                                <svg class="empty-star" viewBox="0 0 24 24"><path d="M12 .587l3.668 7.568 8.332 1.151-6.064 5.828 1.48 8.212L12 18.896l-7.416 3.948 1.48-8.212L.001 9.306l8.332-1.151L12 .587z" /></svg>
                                            }
                                        }
                                    }
                                </div>
                                <span class="rating-value">@((book.AverageRating ?? 0).ToString("0.0"))  (@book.ReviewCount reviews)</span>

                            </div>
                            
                            <div class="book-meta">
                                <div class="meta-item">
                                    <i class="fas fa-calendar-alt meta-icon"></i>
									<span class="meta-text">Published: @(book.PublicationDate?.ToString("dd MMMM yyyy") ?? "N/A")</span>
                                </div>
                                <div class="meta-item">
                                    <i class="fas fa-upload meta-icon"></i>
									<span class="meta-text">Added: @(book.UploadDate?.ToString("dd MMMM yyyy") ?? "N/A")</span>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            }
        </div>
        <partial name="_PaginationPartial" view-data="ViewData" />        
    </div>
</div>

<div class="filter-backdrop"></div>
<div id="filterPanel" class="filter-panel">
    <div class="filter-panel-header">
        <h3 class="filter-panel-title">Sort & Filter</h3>
        <button class="close-filter-btn" id="closeFilterPanel">
            <i class="fas fa-times"></i>
        </button>
    </div>
    <form asp-controller="Book" asp-action="SearchResults" method="get" id="filterForm">
        <input type="hidden" name="searchTerm" value="@currentSearch" id = "hiddenSearchTerm"/>
        <div class="filter-container">
            
            <!-- Search and Sort Section -->
            <div class="filter-section">
                <h4 class="filter-section-title">
                    <i class="fas fa-search"></i> Search & Sort
                </h4>
                <div class="filter-section-content">
                    <div class="row g-3 mb-3">                       
                        <div class="col-md-12">
                            <label class="form-label">Author</label>
                            <div class="input-group">
                                <span class="input-group-text"><i class="fas fa-user-edit"></i></span>
                                <input type="text"
                                       name="author"
                                       value="@currentAuthor"
                                       placeholder="Author name"
                                       class="form-control" />
                            </div>
                        </div>
                    </div>                    
                
                    <div class="row g-3 mb-3">
                        <div class="col-md-6">
                            <label class="form-label">Sort by</label>
                            <select name="sortOrder" class="form-select">
                                <option value="title" selected="@(currentSort == "title")">Title</option>
                                <option value="publicationdate" selected="@(currentSort == "publicationdate")">Publication Date</option>
                                <option value="rating" selected="@(currentSort == "rating")">Rating</option>
                                <option value="uploaddate" selected="@(currentSort == "uploaddate")">Upload Date</option>
								<option value="reviewcount" selected="@(currentSort == "reviewcount")">Review Count</option>

								</select>
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">Direction</label>
                            <select name="sortDescending" class="form-select">
                                <option value="false" selected="@(!currentSortDescending)">Ascending</option>
                                <option value="true" selected="@(currentSortDescending)">Descending</option>
                            </select>
                        </div>                       
                    </div>

                    <div class="row g-3">
                        <div class="col-md-6">
                            <label class="form-label">Rating</label>
                            <select name="rating" class="form-select">
                                <option value="">Any</option>
                                @for (int i = 1; i <= 5; i++)
                                {
                                    if (currentRating == i)
                                    {
                                        <option value="@i" selected>@i ★ & up</option>
                                    }
                                    else
                                    {
                                        <option value="@i">@i ★ & up</option>
                                    }
                                }
                            </select>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Date Range Section -->
            <div class="filter-section">
                <h4 class="filter-section-title">
                    <i class="fas fa-calendar-alt"></i> Publication Date
                </h4>
                <div class="filter-section-content">
                    <div class="row g-3">
                        <div class="col-md-6">
                            <label class="form-label">From</label>
                            <div class="input-group">
                                <span class="input-group-text"><i class="fas fa-calendar-alt"></i></span>
                                <input type="date"
                                    name="publishedFrom"
                                    value="@currentFromDate"
									   asp-format="{0:yyyy-MM-dd}"
                                    class="form-control" />
                            </div>
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">To</label>
                            <div class="input-group">
                                <span class="input-group-text"><i class="fas fa-calendar-alt"></i></span>
                                <input type="date"
                                    name="publishedTo"
									   asp-format="{0:yyyy-MM-dd}"
                                    value="@currentToDate"
                                    class="form-control" />
                            </div>
                        </div>
                    </div>

                </div>
            </div>
            
            <!-- Genres Section -->
            <div class="filter-section">
                <h4 class="filter-section-title">
                    <i class="fas fa-book-open"></i> Genres
                </h4>
                <div class="filter-section-content">
                    <div class="chip-container">
                        @foreach (var genre in allGenres)
                        {
                            <div>
                                <input class="chip-checkbox"
                                    type="checkbox"
                                    name="genreFilter"
                                    value="@genre.BookGenreId"
                                    id="g_@genre.BookGenreId"
                                    @(currentGenres.Contains(genre.BookGenreId) ? "checked" : "") />
                                <label class="chip-label" for="g_@genre.BookGenreId">
                                    @genre.GenreName
                                </label>
                            </div>
                        }
                    </div>
                </div>
            </div>          

            <!-- Languages Section -->
            <div class="filter-section">
                <h4 class="filter-section-title">
                    <i class="fas fa-language"></i> Language
                </h4>
                <div class="filter-section-content">
                    <div class="row">
                        <div class="col-md-12">
                            <select name="languageFilter" class="form-select language-dropdown">
                                <option value="">All Languages</option>
                                @foreach (var language in allLanguages)
                                {
                                    <option value="@language.LanguageId" selected="@(currentLanguage == language.LanguageId)">
                                        @language.LanguageName
                                    </option>
                                }
                            </select>
                        </div>
                    </div>
                </div>
            </div>
			<div class="filter-section">
				<label class="form-label">Items per page</label>
				<select name="pageSize" class="form-select" id="filterPageSize">
					<option value="10" selected="@(currentPageSize == 10 ? "selected" : null)">10</option>
					<option value="20" selected="@(currentPageSize == 20 ? "selected" : null)">20</option>
					<option value="50" selected="@(currentPageSize == 50 ? "selected" : null)">50</option>
					<option value="100" selected="@(currentPageSize == 100 ? "selected" : null)">100</option>
				</select>
			</div>
            <div class="filter-actions">
                <button type="button" class="btn btn-outline-secondary">
                    <i class="fas fa-times"></i> Clear All
                </button>
                <button type="submit" class="btn btn-primary" id="applyFiltersButton">
                    <i class="fas fa-check"></i> Apply Filters
                </button>
            </div>
        </div>
    </form>
</div>

@section scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const toggleFiltersButton = document.getElementById('toggleFilters');
            const closeFilterButton = document.getElementById('closeFilterPanel');
            const filterPanel = document.getElementById('filterPanel');
            const filterBackdrop = document.querySelector('.filter-backdrop');
            const mainSearchTermInput = document.getElementById('mainSearchTerm');
            const hiddenSearchTermInput = document.getElementById('hiddenSearchTerm');

            // Initialize filter panel (hidden by default)
            if (filterPanel) {
                filterPanel.classList.remove('active');
            }

            if (filterBackdrop) {
                filterBackdrop.classList.remove('active');
            }

            if (mainSearchTermInput && hiddenSearchTermInput) {
                mainSearchTermInput.addEventListener('keyup', function () {
                    hiddenSearchTermInput.value = this.value;
                });
            }

            // Toggle filter panel
            if (toggleFiltersButton) {
                toggleFiltersButton.addEventListener('click', function(e) {
                    e.preventDefault();

                    console.log('Toggle filters clicked');

                    if (filterPanel) {
                        filterPanel.classList.toggle('active');
                    }

                    if (filterBackdrop) {
                        filterBackdrop.classList.toggle('active');
                    }

                    toggleFiltersButton.classList.toggle('active');

                    if (toggleFiltersButton.classList.contains('active')) {
                        toggleFiltersButton.innerHTML = '<i class="fas fa-times"></i> Close';
                    } else {
                        toggleFiltersButton.innerHTML = '<i class="fas fa-sliders-h"></i> Filters & Sort';
                    }

                    // Reset scroll position when opening
                    if (filterPanel && filterPanel.classList.contains('active')) {
                        setTimeout(() => {
                            filterPanel.scrollTop = 0;
                        }, 100);
                    }
                });
            }

            // Close filter panel with the X button
            if (closeFilterButton) {
                closeFilterButton.addEventListener('click', function(e) {
                    e.preventDefault();

                    if (filterPanel) {
                        filterPanel.classList.remove('active');
                    }

                    if (filterBackdrop) {
                        filterBackdrop.classList.remove('active');
                    }

                    if (toggleFiltersButton) {
                        toggleFiltersButton.classList.remove('active');
                        toggleFiltersButton.innerHTML = '<i class="fas fa-sliders-h"></i> Filters & Sort';
                    }
                });
            }

            // Close filter panel when clicking on backdrop
            if (filterBackdrop) {
                filterBackdrop.addEventListener('click', function() {
                    if (filterPanel) {
                        filterPanel.classList.remove('active');
                    }

                    filterBackdrop.classList.remove('active');

                    if (toggleFiltersButton) {
                        toggleFiltersButton.classList.remove('active');
                        toggleFiltersButton.innerHTML = '<i class="fas fa-sliders-h"></i> Filters & Sort';
                    }
                });
            }

            // Add animation to filter sections
            const filterSections = document.querySelectorAll('.filter-section');
            filterSections.forEach((section, index) => {
                section.style.animationDelay = (index * 0.1) + 's';
            });

            // Enhance the chip selection experience
            const chipLabels = document.querySelectorAll('.chip-label, .radio-chip-label');
            chipLabels.forEach(label => {
                label.addEventListener('click', function() {
                    // Create a ripple effect
                    const ripple = document.createElement('span');
                    ripple.classList.add('ripple');
                    this.appendChild(ripple);

                    // Remove it after animation completes
                    setTimeout(() => {
                        ripple.remove();
                    }, 500);
                });
            });

            const radioLabels = document.querySelectorAll('.radio-chip-label');

            radioLabels.forEach(label => {
                // Add deselectable class
                label.classList.add('deselectable');

                // Create clear button
                const clearBtn = document.createElement('span');
                clearBtn.className = 'radio-chip-clear';
                clearBtn.innerHTML = '×';
                label.appendChild(clearBtn);

                // Add click handler for the clear button
                clearBtn.addEventListener('click', function(e) {
                    e.preventDefault();
                    e.stopPropagation();

                    // Get the associated radio button
                    const radioId = label.getAttribute('for');
                    const radioBtn = document.getElementById(radioId);

                    // Uncheck the radio button
                    if (radioBtn) {
                        radioBtn.checked = false;
                    }
                });
            });

            // Handle Clear All button in the filter panel
            const clearFiltersButton = document.querySelector('.filter-actions .btn-outline-secondary');

            if (clearFiltersButton) {
                clearFiltersButton.addEventListener('click', function(e) {
                    e.preventDefault();

                    // Clear all form inputs in the filter panel
                    const filterForm = document.getElementById('filterForm');

                    // Clear text inputs
                    filterForm.querySelectorAll('input[type="text"], input[type="date"]').forEach(input => {
                        input.value = '';
                    });

                    // Reset dropdowns to default options
                    filterForm.querySelectorAll('select').forEach(select => {
                        select.selectedIndex = 0;
                    });

                    // Uncheck all checkboxes
                    filterForm.querySelectorAll('input[type="checkbox"]').forEach(checkbox => {
                        checkbox.checked = false;
                    });

                    // Keep the search term from main search if it exists
                    const mainSearchTerm = document.getElementById('mainSearchTerm');

                    if (mainSearchTerm && mainSearchTerm.value) {
                        hiddenSearchTermInput.value = mainSearchTerm.value;
                    }

                    // Show feedback to user
                    const clearConfirmation = document.createElement('div');
                    clearConfirmation.className = 'clear-confirmation';
                    clearConfirmation.textContent = 'Filters cleared';
                    clearConfirmation.style.position = 'absolute';
                    clearConfirmation.style.top = '90px';
                    clearConfirmation.style.right = '30px';
                    clearConfirmation.style.padding = '8px 16px';
                    clearConfirmation.style.backgroundColor = 'rgba(210, 196, 158, 0.6)';
                    clearConfirmation.style.color = 'black';
                    clearConfirmation.style.borderRadius = '4px';
                    clearConfirmation.style.opacity = '0';
                    clearConfirmation.style.transition = 'opacity 0.3s ease';
                     clearConfirmation.style.fontSize = '12px';

                    filterPanel.appendChild(clearConfirmation);

                    // Show and then hide the confirmation
                    setTimeout(() => {
                        clearConfirmation.style.opacity = '1';

                        setTimeout(() => {
                            clearConfirmation.style.opacity = '0';
                            setTimeout(() => {
                                clearConfirmation.remove();
                            }, 300);
                        }, 1500);
                    }, 10);
                });
            }

            document.querySelectorAll('input[type="date"]').forEach(input => {
                // Find the closest calendar icon in its parent input-group
                const parentGroup = input.closest('.input-group');
                if (parentGroup) {
                    const calendarIcon = parentGroup.querySelector('.input-group-text');
                    if (calendarIcon) {
                        calendarIcon.addEventListener('click', (e) => {
                            e.preventDefault();
                            e.stopPropagation();
                            input.showPicker();
                        });
                    }
                }

                // Also allow the input field itself to trigger the datepicker
                input.addEventListener('click', (e) => {
                    e.stopPropagation();
                    input.showPicker();
                });
            });

            const form = document.getElementById('mainSearchTerm');
            const applyButton = document.getElementById('applyFiltersButton');

            form.addEventListener('keypress', function (event) {
                // Check if the pressed key is Enter
                if (event.key === 'Enter') {
                    // Prevent the default form submission behavior
                    event.preventDefault();
                    // Programmatically click the "Apply Filters" button
                    applyButton.click();
                }
            });
        });
    </script>
}