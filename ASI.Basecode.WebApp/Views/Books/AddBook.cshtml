@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@

@model ASI.Basecode.Services.ServiceModels.BookViewModel
@{
    ViewData["Title"] = "Add New Book";
    Layout = "_AdminSidebarLayout";

    var addBookConfirmationModel = new ConfirmationModalModel
            {
                Id = "addBookConfirmationModal",
                Title = "Add Book Confirmation",
                Message = "Are you sure you want to add this book?",
                CancelButtonText = "Cancel",
                ConfirmButtonText = "Add Book",
                ConfirmButtonId = "confirmAddBookAction",
                ConfirmButtonClass = "book-master-submit-button px-4"
            };
}

@section styles {
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css" />
    <link rel="stylesheet" href="~/css/admin/books/bookmaster.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/admin/common.css" asp-append-version="true" />
}

<div class="admin-common-container">
    <div class="admin-common-content-wrapper">
        <div class="header-section">
            <h1>Add New Book</h1>
            <p>Enter details of the new book here.</p>
        </div>

        <div asp-validation-summary="ModelOnly" class="validation-summary-errors"></div>

        <form asp-action="AddBook" asp-controller="Book" method="post" enctype="multipart/form-data" id="addBookForm">
            <input type="hidden" id="coverImageUrl" name="CoverImageUrl" value="@Model?.CoverImageUrl">
            <input type="hidden" id="bookFileUrl" name="BookFileUrl" value="@Model?.BookFileUrl">

            <div class="content-master-grid">
                <div class="image-upload-section">
                    <h3 class="book-master-form-section-title">Cover Image Upload</h3>
                    <div class="image-preview-container">
                        <img id="coverImagePreview" src="" alt="Cover Image Preview" style="display:none;">
                        <span id="coverImagePlaceholder" class="placeholder-text">No Image</span>
                    </div>
                    <input type="text" class="book-master-file-input-text" readonly id="coverFileNameDisplay" value="@Model?.CoverImageUrl">
                    <button type="button" class="master-browse-button" onclick="document.getElementById('coverImageFile').click();">BROWSE</button>
                    <input type="file" id="coverImageFile" accept="image/*" name="CoverImageFile" style="display: none;">

                    <p id="coverImageUploadStatus" class="master-upload-status">
                        <span class="file-size-info required-label">Max file size: 10MB</span>
                        <span class="supported-formats-info">Supported formats: JPG, PNG, JPEG</span>
                    </p>
                </div>
                <div>
                    <div class="book-master-form-grid">
                        <div class="book-master-form-group">
                            <label for="title" class="required-label">Title</label>
                            <input type="text" id="title" name="Title" class="book-master-form-input" value="@Model?.Title" required>
                            <span asp-validation-for="Title" class="text-danger"></span>
                        </div>

                        <div class="book-master-form-group">
                            <label for="authorContainer" class="required-label">Author</label>
                            <div class="custom-multi-select" id="authorContainer">
                                <div class="custom-select-btn">
                                    <span>Select Author</span>
                                    <i class="fas fa-chevron-down"></i>
                                </div>
                                <div class="custom-dropdown" id="authorDropdown">
                                </div>
                            </div>
                            <input type="hidden" id="author" name="Author" value="@(Model?.Author ?? "")">
                            <span asp-validation-for="Author" class="text-danger"></span>
                        </div>

                        <div class="book-master-form-group">
                            <label for="subtitle">Subtitle</label>
                            <input type="text" id="subtitle" name="Subtitle" class="book-master-form-input" value="@Model?.Subtitle">
                            <span asp-validation-for="Subtitle" class="text-danger"></span>
                        </div>

                        <div class="book-master-form-group">
                            <label for="publisher">Publisher</label>
                            <input type="text" id="publisher" name="Publisher" class="book-master-form-input" value="@Model?.Publisher">
                            <span asp-validation-for="Publisher" class="text-danger"></span>
                        </div>

                        <div class="book-master-form-group">
                            <label for="publicationDate" class="required-label">Publication Date</label>
                            <div class="book-master-date-input-wrapper">
                                <input type="date" id="publicationDate" name="PublicationDate" class="book-master-form-input" value="@(Model?.PublicationDate?.ToString("yyyy-MM-dd"))" />
                            </div>
                            <span asp-validation-for="PublicationDate" class="text-danger"></span>
                        </div>
                        <div class="book-master-form-group">
                            <label for="publicationLocation">Publication Location</label>
                            <input type="text" id="publicationLocation" name="PublicationLocation" class="book-master-form-input" value="@Model?.PublicationLocation">
                            <span asp-validation-for="PublicationLocation" class="text-danger"></span>
                        </div>

                        <div class="book-master-form-group">
                            <label for="languageContainer" class="required-label">Language</label>
                            <div class="custom-multi-select" id="languageContainer">
                                <div class="custom-select-btn">
                                    <span>Select Language</span>
                                    <i class="fas fa-chevron-down"></i>
                                </div>
                                <div class="custom-dropdown" id="languageDropdown">
                                </div>
                            </div>
                            <input type="hidden" id="language" name="Language" value="@(Model?.Language ?? "")">
                            <span asp-validation-for="Language" class="text-danger"></span>
                        </div>

                        <div class="book-master-form-group">
                            <label for="numberOfPages">Number of Pages</label>
                            <input type="number" id="numberOfPages" name="NumberOfPages" class="book-master-form-input" value="@Model?.NumberOfPages">
                            <span asp-validation-for="NumberOfPages" class="text-danger"></span>
                        </div>


                    </div>

                    <div class="book-master-form-group full-width-description">
                        <label for="description">Description</label>
                        <textarea id="description" name="Description" class="book-master-form-textarea">@Model?.Description</textarea>
                        <span asp-validation-for="Description" class="text-danger"></span>
                    </div>

                    <div class="book-master-form-grid">
                        <div class="book-master-form-group">
                            <label for="seriesName">Series Name</label>
                            <input type="text" id="seriesName" name="SeriesName" class="book-master-form-input" value="@Model?.SeriesName">
                            <span asp-validation-for="SeriesName" class="text-danger"></span>
                        </div>
                        <div class="book-master-form-group">
                            <label for="seriesOrder">Series Order</label>
                            <input type="number" id="seriesOrder" name="SeriesOrder" class="book-master-form-input" value="@Model?.SeriesOrder">
                            <span asp-validation-for="SeriesOrder" class="text-danger"></span>
                        </div>
                    </div>

                    <div class="book-master-form-group full-width-description">
                        <label for="seriesDescription">Series Description</label>
                        <textarea id="seriesDescription" name="SeriesDescription" class="book-master-form-textarea">@Model?.SeriesDescription</textarea>
                        <span asp-validation-for="SeriesDescription" class="text-danger"></span>
                    </div>

                    <div class="book-master-form-group">
                        <label class="toggle-question-label">Is this a featured book?</label>
                        <div class="featured-toggle-container">
                            <label class="switch">
                                <input type="checkbox" id="isFeatured" name="IsFeatured" value="true">
                                <span class="slider round"></span>
                            </label>
                            <span class="toggle-label" id="featuredStatus">No</span>
                        </div>
                        <span asp-validation-for="IsFeatured" class="text-danger"></span>
                    </div>
                </div>
            </div>



            <h3 class="book-master-form-section-title">Categorization</h3>
            <div class="book-master-form-grid">
                <div class="book-master-form-group">
                    <label for="genre" class="required-label">Genre</label>
                    <div class="custom-multi-select" id="genreContainer">
                        <div class="custom-select-btn">
                            <span>Select Genre</span>
                            <i class="fas fa-chevron-down"></i>
                        </div>
                        <div class="custom-dropdown" id="genreDropdown"></div>
                    </div>
                    <div id="selectedGenres" class="selected-tags"></div>
                    <input type="hidden" id="concatenatedGenre" name="GenreList" value="@Model?.GenreList" />
                    <span asp-validation-for="GenreList" class="text-danger"></span>
                </div>
                <div class="book-master-form-group">
                    <label for="isbn10">ISBN10</label>
                    <input type="text" id="isbn10" name="ISBN10" class="book-master-form-input" value="@Model?.ISBN10">
                    <span asp-validation-for="ISBN10" class="text-danger"></span>
                </div>
                <div class="book-master-form-group">
                    <label for="isbn13">ISBN13</label>
                    <input type="text" id="isbn13" name="ISBN13" class="book-master-form-input" value="@Model?.ISBN13">
                    <span asp-validation-for="ISBN13" class="text-danger"></span>
                </div>
                <div class="book-master-form-group">
                    <label for="edition">Edition</label>
                    <input type="text" id="edition" name="Edition" class="book-master-form-input" value="@Model?.Edition">
                    <span asp-validation-for="Edition" class="text-danger"></span>
                </div>
            </div>

            <h3 class="book-master-form-section-title">Book File Upload (e.g., PDF)</h3>
            <div class="book-master-form-group book-master-form-grid-span-2">
                <label for="bookFile" class="required-label">Select Book File</label>
                <div class="book-master-file-upload-wrapper">
                    <input type="text" class="book-master-file-input-text" readonly id="bookFileNameDisplay" value="@Model?.BookFileUrl">
                    <input type="file" id="bookFile" accept=".pdf,.epub" name="BookFile" style="display: none;">
                    <button type="button" class="book-master-browse-button" onclick="document.getElementById('bookFile').click();">BROWSE</button>
                </div>
                <p id="bookFileUploadStatus" class="book-master-upload-status">
                    <span class="file-size-info">Max file size: 1GB</span>
                    <span class="supported-formats-info">Supported formats: PDF, EPUB</span>
                </p>
                <input type="hidden" id="bookFileUrl" name="BookFileUrl">
            </div>


            <div class="button-container">
                <button type="button" class="cancel-button" onclick="location.href='/Book/ListBook'">CANCEL</button>
                <button type="submit" class="book-master-submit-button" id="addBookButton">ADD BOOK</button>
            </div>
        </form>


    </div>
</div>

<partial name="_ConfirmationModal" model="addBookConfirmationModel" />

@section scripts {
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
    <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css" />
    <script type="module">
        import { initializeFeaturedToggle } from "/js/common/_slider.js";
        import { deleteFileFromFirebase, uploadFileToFirebase } from "/js/common/_firebase.js";
        import { updateImagePreview } from "/js/common/_updateImagePreview.js";
        import { initializeSingleSelectAuthor, initializeSingleSelectLanguage, initializeMultiSelect } from "/js/common/_selectInitializer.js";

        document.addEventListener('DOMContentLoaded', async () => {

            const MAX_IMAGE_FILE_SIZE_BYTES = 10 * 1024 * 1024;
            const MAX_BOOK_FILE_SIZE_BYTES = 100 * 1024 * 1024;

            // Get all elements
            const coverImageFile = document.getElementById('coverImageFile');
            const coverImagePreview = document.getElementById('coverImagePreview');
            const coverImagePlaceholder = document.getElementById('coverImagePlaceholder');
            const coverFileNameDisplay = document.getElementById('coverFileNameDisplay');
            const coverImageUploadStatus = document.getElementById('coverImageUploadStatus');

            const bookFile = document.getElementById('bookFile');
            const bookFileNameDisplay = document.getElementById('bookFileNameDisplay');
            const bookFileUploadStatus = document.getElementById('bookFileUploadStatus');

            const publicationDateInput = document.getElementById('publicationDate');

            // Initialize file input change handlers with null checks
            if (coverImageFile) {
                coverImageFile.addEventListener('change', function () {
                    const fileName = this.files[0] ? this.files[0].name : '';
                    if (coverFileNameDisplay) coverFileNameDisplay.value = fileName;
                    if (coverImageUploadStatus) {
                        coverImageUploadStatus.querySelector('.file-size-info').textContent = 'Max file size: 1GB';
                        coverImageUploadStatus.querySelector('.supported-formats-info').textContent = 'Supported formats: JPG, PNG, JPEG';
                        coverImageUploadStatus.classList.remove('error-message');
                    }
                    updateImagePreview(this.files[0], coverImagePreview, coverImagePlaceholder, coverFileNameDisplay);
                });
            }

            if (bookFile) {
                bookFile.addEventListener('change', function () {
                    const fileName = this.files[0] ? this.files[0].name : '';
                    if (bookFileNameDisplay) bookFileNameDisplay.value = fileName;
                    if (bookFileUploadStatus) {
                        bookFileUploadStatus.querySelector('.file-size-info').textContent = 'Max file size: 10MB';
                        bookFileUploadStatus.querySelector('.supported-formats-info').textContent = 'Supported formats: PDF, EPUB.';
                        bookFileUploadStatus.classList.remove('error-message');
                    }
                });
            }


            // Date picker
            if (publicationDateInput) {
                const today = new Date();
                const year = today.getFullYear();
                const month = (today.getMonth() + 1).toString().padStart(2, '0');
                const day = today.getDate().toString().padStart(2, '0');

                publicationDateInput.max = `${year}-${month}-${day}`;

                publicationDateInput.addEventListener('click', () => {
                    publicationDateInput.showPicker();
                });
            }

            // Initial Preview Setup
            const coverImageUrl = '@Model?.CoverImageUrl';
            if (coverImageUrl && coverImagePreview && coverImagePlaceholder && coverFileNameDisplay) {
                coverImagePreview.src = coverImageUrl;
                coverImagePreview.style.display = 'block';
                coverImagePlaceholder.style.display = 'none';
                coverFileNameDisplay.value = coverImageUrl.substring(coverImageUrl.lastIndexOf('/') + 1);
            }

            const bookFileUrl = '@Model?.BookFileUrl';
            if (bookFileUrl && bookFileNameDisplay) {
                bookFileNameDisplay.value = bookFileUrl.substring(bookFileUrl.lastIndexOf('/') + 1);
            }

            await initializeSingleSelectAuthor();
            await initializeSingleSelectLanguage();
            await initializeMultiSelect({
                containerId: 'genreContainer',
                dropdownId: 'genreDropdown',
                hiddenInputId: 'concatenatedGenre',
                selectedContainerId: 'selectedGenres',
                fetchUrl: '/Book/GetGenre',
                placeholderText: 'Select Genre',
                fallbackItems: [
                    'Fiction,Fiction',
                    'Science Fiction,ScienceFiction',
                    'Fantasy,Fantasy',
                    'Thriller,Thriller',
                    'Mystery,Mystery',
                    'Romance,Romance',
                    'Horror,Horror',
                    'Biography,Biography',
                    'History,History',
                    'Cookbook,Cookbook',
                    'Poetry,Poetry'
                ],
                itemType: 'genre'
            });

            // Form submission
            const confirmationModalElement = document.getElementById('@addBookConfirmationModel.Id');
            const confirmButton = document.getElementById('@addBookConfirmationModel.ConfirmButtonId');
            const addBookConfirmationModal = confirmationModalElement ? new bootstrap.Modal(confirmationModalElement) : null;

            const form = document.getElementById('addBookForm');
            if (form) {
                form.addEventListener('submit', async (event) => {
                    event.preventDefault();

                    const submitButton = form.querySelector('.book-master-submit-button');
                    const titleInput = document.getElementById('title');
                    const authorInput = document.getElementById('author');
                    const publicationDateInput = document.getElementById('publicationDate');
                    const languageInput = document.getElementById('language');
                    const genreInput = document.getElementById('concatenatedGenre');
                    const coverImageFileInput = document.getElementById('coverImageFile');
                    const bookFileInput = document.getElementById('bookFile');
                    const coverImageUrlInput = document.getElementById('coverImageUrl');
                    const bookFileUrlInput = document.getElementById('bookFileUrl');

                    const seriesNameInput = document.getElementById('seriesName');
                    const seriesOrderInput = document.getElementById('seriesOrder');
                    const seriesDescriptionInput = document.getElementById('seriesDescription');

                    let isValid = true;
                    const missingFields = [];

                    // Validation checks
                    if (!titleInput.value.trim()) {
                        missingFields.push('Title');
                        isValid = false;
                    } 

                    if (!authorInput.value.trim()) {
                        missingFields.push('Author');
                        isValid = false;
                    } 

                    const pubDateValue = publicationDateInput.value;
                    if (!pubDateValue || pubDateValue === "undefined" || pubDateValue === "NaN-NaN-NaN") {
                        missingFields.push('Publication Date');
                        isValid = false;
                    } else {
                        const today = new Date();
                        today.setHours(0, 0, 0, 0);

                        const pubDate = new Date(pubDateValue);
                        pubDate.setHours(0, 0, 0, 0);

                        if (pubDate > today) {
                            missingFields.push('Publication Date (cannot be in the future)');
                            isValid = false;
                        }
                    }


                    if (!languageInput.value.trim()) {
                        missingFields.push('Language');
                        isValid = false;
                    } 

                    if (!genreInput.value) {
                        missingFields.push('Genre');
                        isValid = false;
                    } 

                    const coverImageFile = coverImageFileInput ? coverImageFileInput.files[0] : null;
                    const bookFile = bookFileInput ? bookFileInput.files[0] : null;

                    if (!coverImageFile && !coverImageUrlInput.value) {
                        missingFields.push('Cover Image');
                        if (coverImageUploadStatus) {
                            coverImageUploadStatus.querySelector('.file-size-info').textContent = 'Cover image is required.';
                            coverImageUploadStatus.classList.add('error-message');
                        }
                        isValid = false;
                    } else if (coverImageUploadStatus) {
                        coverImageUploadStatus.querySelector('.file-size-info').textContent = 'Max file size: 1GB';
                        coverImageUploadStatus.classList.remove('error-message');
                    }

                    if (!bookFile && !bookFileUrlInput.value) {
                        missingFields.push('Book File');
                        if (bookFileUploadStatus) {
                            bookFileUploadStatus.querySelector('.file-size-info').textContent = 'Book file is required.';
                            bookFileUploadStatus.classList.add('error-message');
                        }
                        isValid = false;
                    } else if (bookFileUploadStatus) {
                        bookFileUploadStatus.querySelector('.file-size-info').textContent = 'Max file size: 1GB';
                        bookFileUploadStatus.classList.remove('error-message');
                    }

                   

                    const seriesDescriptionPresent = seriesDescriptionInput.value.trim() !== '';
                    const seriesOrderPresent = seriesOrderInput.value !== '' && !isNaN(seriesOrderInput.value);
                    const seriesNamePresent = seriesNameInput.value.trim() !== '';

                    if (seriesDescriptionPresent) {
                        if (!seriesNamePresent) {
                            missingFields.push('Series Name (required when Series Description is present)');
                            isValid = false;
                        } 

                        if (!seriesOrderPresent) {
                            missingFields.push('Series Order (required when Series Description is present)');
                            isValid = false;
                        } 
                    } 

                    if (seriesOrderPresent && !seriesNamePresent) {
                        if (!missingFields.includes('Series Name (required when Series Order is present)')) {
                            missingFields.push('Series Name (required when Series Order is present)');
                        }
                        isValid = false;
                    } 

                    if (!isValid) {
                        toastr.warning(`Please fill in all required fields. Missing: ${missingFields.join(', ')}.`);
                        return;
                    }

                    if (addBookConfirmationModal) {
                        addBookConfirmationModal.show();
                    } else {
                        await submitForm();
                    }
                });
            }

            if (confirmButton) {
                confirmButton.addEventListener('click', async () => {
                    if (addBookConfirmationModal) {
                        addBookConfirmationModal.hide();
                    }
                    await submitForm();
                });
            }

            async function submitForm() {
                const form = document.getElementById('addBookForm');
                if (!form) return;

                const submitButton = form.querySelector('.book-master-submit-button');
                const coverImageFileInput = document.getElementById('coverImageFile');
                const bookFileInput = document.getElementById('bookFile');
                const coverImageUrlInput = document.getElementById('coverImageUrl');
                const bookFileUrlInput = document.getElementById('bookFileUrl');
                const coverImageUploadStatus = document.getElementById('coverImageUploadStatus');
                const bookFileUploadStatus = document.getElementById('bookFileUploadStatus');

                const originalCoverImageUrl = coverImageUrlInput ? coverImageUrlInput.value : null;
                const originalBookFileUrl = bookFileUrlInput ? bookFileUrlInput.value : null;

                submitButton.disabled = true;
                submitButton.textContent = 'Processing...';

                let uploadedCoverUrl = null;
                let uploadedBookUrl = null;

                try {
                    // Cover Image Upload
                    const coverImageFile = coverImageFileInput ? coverImageFileInput.files[0] : null;
                    if (coverImageFile) {
                        if (coverImageUploadStatus) {
                            const statusElement = coverImageUploadStatus.querySelector('.file-size-info');
                            if (statusElement) {
                                statusElement.textContent = 'Uploading cover image...';
                            }
                        }
                        uploadedCoverUrl = await uploadFileToFirebase(coverImageFile, 'book_covers/', coverImageUploadStatus ? coverImageUploadStatus.querySelector('.file-size-info') : null);
                        if (uploadedCoverUrl && coverImageUrlInput) {
                            coverImageUrlInput.value = uploadedCoverUrl;
                        } else {
                            throw new Error('Cover image upload failed.');
                        }
                    }

                    //  Book File Upload
                    const bookFile = bookFileInput ? bookFileInput.files[0] : null;
                    if (bookFile) {
                        if (bookFileUploadStatus) {
                            const statusElement = bookFileUploadStatus.querySelector('.file-size-info');
                            if (statusElement) {
                                statusElement.textContent = 'Uploading book file...';
                            }
                        }
                        uploadedBookUrl = await uploadFileToFirebase(bookFile, 'book_files/', bookFileUploadStatus ? bookFileUploadStatus.querySelector('.file-size-info') : null);
                        if (uploadedBookUrl && bookFileUrlInput) {
                            bookFileUrlInput.value = uploadedBookUrl;
                        } else {
                            throw new Error('Book file upload failed.');
                        }
                    }

                    const formData = new FormData(form);
                    const response = await fetch("/Book/AddBook", {
                        method: "POST",
                        body: formData
                    });

                    if (response.ok) {
                        toastr.success('Book added successfully!');
                        form.reset();
                        if (coverImagePreview) {
                            coverImagePreview.src = '';
                            coverImagePreview.style.display = 'none';
                        }
                        if (coverImagePlaceholder) {
                            coverImagePlaceholder.style.display = 'block';
                        }
                        if (coverFileNameDisplay) {
                            coverFileNameDisplay.value = '';
                        }
                        setTimeout(() => {
                            window.location.href = '/Book/ListBook';
                        }, 1500);
                    } else {
                        const errorData = await response.json();
                        const errorMessage = JSON.stringify(errorData.errors || errorData.message || "An unknown error occurred on the server.");
                        toastr.error(`${errorMessage}`);

                        if (uploadedCoverUrl && uploadedCoverUrl !== originalCoverImageUrl) {
                            await deleteFileFromFirebase(uploadedCoverUrl);
                        }
                        if (uploadedBookUrl && uploadedBookUrl !== originalBookFileUrl) {
                            await deleteFileFromFirebase(uploadedBookUrl);
                        }
                    }
                } catch (error) {
                    console.error('Submission error:', error);
                    toastr.error(`An unexpected error occurred during file upload or form submission: ${error.message}. Please try again.`, 'Error');

                    if (uploadedCoverUrl && uploadedCoverUrl !== originalCoverImageUrl) {
                        await deleteFileFromFirebase(uploadedCoverUrl);
                    }
                    if (uploadedBookUrl && uploadedBookUrl !== originalBookFileUrl) {
                        await deleteFileFromFirebase(uploadedBookUrl);
                    }
                } finally {
                    submitButton.disabled = false;
                    submitButton.textContent = 'ADD BOOK';
                }
            }

        });

    </script>
}