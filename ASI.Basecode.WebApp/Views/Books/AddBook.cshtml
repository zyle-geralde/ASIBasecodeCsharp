@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@

@{
}

<h1>Add New Book</h1>

<form id="addBookForm">
    <div>
        <label for="title">Title:</label>
        <input type="text" id="title" name="Title" required>
    </div>
    <div>
        <label for="subtitle">Subtitle:</label>
        <input type="text" id="subtitle" name="Subtitle">
    </div>
    <div>
        <label for="uploadDate">Upload Date:</label>
        <input type="date" id="uploadDate" name="UploadDate">
    </div>
    <div>
        <label for="publicationDate">Publication Date:</label>
        <input type="date" id="publicationDate" name="PublicationDate">
    </div>
    <div>
        <label for="publisher">Publisher (comma-separated):</label>
        <input type="text" id="publisher" name="Publisher">
    </div>
    <div>
        <label for="publicationLocation">Publication Location (comma-separated):</label>
        <input type="text" id="publicationLocation" name="PublicationLocation">
    </div>
    <div>
        <label for="description">Description:</label>
        <textarea id="description" name="Description"></textarea>
    </div>
    <div>
        <label for="numberOfPages">Number of Pages:</label>
        <input type="number" id="numberOfPages" name="NumberOfPages">
    </div>
    <div>
        <label for="language">Language:</label>
        <input type="text" id="language" name="Language">
    </div>
    <div>
        <label for="seriesName">Series Name:</label>
        <input type="text" id="seriesName" name="SeriesName">
    </div>
    <div>
        <label for="seriesDescription">Series Description:</label>
        <textarea id="seriesDescription" name="SeriesDescription"></textarea>
    </div>
    <div>
        <label for="author">Author (comma-separated):</label>
        <input type="text" id="author" name="Author">
    </div>


    <h3>Cover Image Upload</h3>
    <div>
        <label for="coverImageFile">Select Cover Image:</label>
        <input type="file" id="coverImageFile" accept="image/*" required> <p id="coverUploadStatus" style="color: gray;"></p>
        <input type="hidden" id="coverImageUrl" name="CoverImageUrl"> </div>

    <h3>Book File Upload (e.g., PDF)</h3>
    <div>
        <label for="bookFile">Select Book File:</label>
        <input type="file" id="bookFile" accept=".pdf,.epub" required> <p id="bookFileUploadStatus" style="color: gray;"></p>
        <input type="hidden" id="bookFileUrl" name="BookFileUrl"> </div>

    <button type="submit">Add Book</button>
</form>

<script type="module">
    // Your Firebase configuration
    const firebaseConfig = {
        apiKey: "AIzaSyA4CTMSbgGQN_yLn9lEZlswbZ_2A2Xhl0k",
        authDomain: "basabuzz-ca8fe.firebaseapp.com",
        projectId: "basabuzz-ca8fe",
        storageBucket: "basabuzz-ca8fe.firebasestorage.app",
        messagingSenderId: "206533484485",
        appId: "1:206533484485:web:2c71a06a17d5244efe75ac"
    };

    // Initialize Firebase
    import { initializeApp } from "https://www.gstatic.com/firebasejs/11.9.1/firebase-app.js";
    import { getStorage, ref, uploadBytesResumable, getDownloadURL } from "https://www.gstatic.com/firebasejs/11.9.1/firebase-storage.js";

    const app = initializeApp(firebaseConfig);
    const storage = getStorage(app);

    //Firebase Upload Function
    //This function returns the download URL or null on failure/no file
    async function uploadFileToFirebase(file, path, statusElement) {
        if (!file) {
            statusElement.textContent = 'No file selected.';
            return null; //Indicates no file was provided
        }

        //Generate New File Name
        const timestamp = new Date().getTime(); 
        const randomString = Math.random().toString(36).substring(2, 8);
        const uniqueFileName = `${timestamp}-${randomString}-${file.name}`;

        const storageRef = ref(storage, path +uniqueFileName);
        const uploadTask = uploadBytesResumable(storageRef, file);

        return new Promise((resolve, reject) => {
            uploadTask.on('state_changed',
                (snapshot) => {
                    const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;
                    statusElement.textContent = `Upload is ${progress.toFixed(2)}% done`;
                },
                (error) => {
                    statusElement.textContent = `Upload failed: ${error.message}`;
                    console.error("Upload error:", error);
                    reject(error); //Reject the promise on upload error
                },
                async () => {
                    try {
                        const downloadURL = await getDownloadURL(uploadTask.snapshot.ref);
                        statusElement.textContent = 'Upload successful!';
                        resolve(downloadURL); //Resolve with the download URL
                    } catch (error) {
                        statusElement.textContent = `Failed to get download URL: ${error.message}`;
                        console.error("Get Download URL error:", error);
                        reject(error); //Reject the promise if getting URL fails
                    }
                }
            );
        });
    }

    //Form Submission Logic 
    document.getElementById('addBookForm').addEventListener('submit', async (event) => {
        event.preventDefault(); //Prevent default form submission initially

        const form = event.target;
        const coverImageFile = document.getElementById('coverImageFile').files[0];
        const bookFile = document.getElementById('bookFile').files[0];

        const coverUploadStatus = document.getElementById('coverUploadStatus');
        const bookFileUploadStatus = document.getElementById('bookFileUploadStatus');
        const coverImageUrlInput = document.getElementById('coverImageUrl');
        const bookFileUrlInput = document.getElementById('bookFileUrl');

        // Clear previous status messages
        coverUploadStatus.textContent = '';
        bookFileUploadStatus.textContent = '';
        coverImageUrlInput.value = '';
        bookFileUrlInput.value = '';

        //Validate if files are selected
        if (!coverImageFile) {
            alert('Please select a cover image file.');
            return;
        }
        if (!bookFile) {
            alert('Please select a book file.');
            return;
        }

        //Upload files to Firebase
        try {
            // Display initial upload status
            coverUploadStatus.textContent = 'Uploading cover image...';
            bookFileUploadStatus.textContent = 'Uploading book file...';

            const [coverUrl, bookUrl] = await Promise.all([
                uploadFileToFirebase(coverImageFile, 'book_covers/', coverUploadStatus),
                uploadFileToFirebase(bookFile, 'book_files/', bookFileUploadStatus)
            ]);

            //If any upload returned null or failed, the Promise.all would have rejected.
            if (!coverUrl) {
                alert('Cover image upload failed or was cancelled.');
                return;
            }
            if (!bookUrl) {
                alert('Book file upload failed or was cancelled.');
                return;
            }

            coverImageUrlInput.value = coverUrl; //Set hidden field with obtained URL
            bookFileUrlInput.value = bookUrl;   //Set hidden field with obtained URL

        } catch (uploadError) {
            alert('File upload to Firebase failed.');
            console.error('Firebase upload error during form submission:', uploadError);
            return;
        }

        // Proceed with form data submission to backend
        const formData = new FormData(form);

        // Convert FormData to a plain JavaScript object
        const bookData = {};
        for (const [key, value] of formData.entries()) {
            if (key === 'NumberOfPages' || key === 'Likes' || key === 'AverageRating') {
                //Use the unary plus operator (+) to convert to number.
                bookData[key] = +value || 0;
            } else {
                bookData[key] = value;
            }
        }

        //Double-check URLs are populated
        if (!bookData.CoverImageUrl || !bookData.BookFileUrl) {
            alert('Internal error: File URLs not set after Firebase upload. Please try again.');
            return;
        }

        // Handling of Api
        try {
            const response = await fetch('/api/Book/add', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    // Add Authorization header if your backend API requires it. Needed if Admin Log In and Sign up will be implemented
                },
                body: JSON.stringify(bookData)
            });

            if (response.ok) {
                const result = await response.json();
                alert(result.Message || "Book added successfully!"); 
                form.reset(); // Clear the form fields
                // Reset upload status messages and hidden URLs
                coverUploadStatus.textContent = '';
                bookFileUploadStatus.textContent = '';
                coverImageUrlInput.value = '';
                bookFileUrlInput.value = '';
            } else {
                const errorData = await response.json();
                // Check for 'errors' property for validation messages from ASP.NET Core
                alert(`Error: ${JSON.stringify(errorData.errors || errorData.Message || "An unknown error occurred on the server.")}`);
                console.error('Backend error details:', errorData);
            }
        } catch (backendError) {
            console.error('Network or unexpected error during backend submission:', backendError);
            alert('An unexpected error occurred while saving book data. Please try again.');
        }
    });
</script>
