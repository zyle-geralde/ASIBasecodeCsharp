@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@

@model ASI.Basecode.Services.ServiceModels.BookViewModel
@{
    ViewData["Title"] = "Add New Book";
    Layout = "_AdminSidebarLayout";
}

@section styles {
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <link rel="stylesheet" href="~/css/admin/books/addbook.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/admin/common.css" asp-append-version="true" />
}

        <div class="admin-common-container">
            <div class="admin-common-content-wrapper">
             <div class="header-section">
                <h1>Add New Book</h1>
                <p>Enter details of the new book here.</p>
             </div>

            <!-- Display validation summary errors -->
            <div asp-validation-summary="ModelOnly" class="validation-summary-errors"></div>

            <form asp-action="AddBook" asp-controller="Book" method="post" enctype="multipart/form-data" id="addBookForm">
                <div class="add-book-form-grid">
                    <div class="add-book-form-group">
                        <label for="title">Title</label>
                        <input type="text" id="title" name="Title" class="add-book-form-input" value="@Model?.Title" required>
                        <span asp-validation-for="Title" class="text-danger"></span>
                    </div>
                    <div class="add-book-form-group">
                        <label for="subtitle">Subtitle</label>
                        <input type="text" id="subtitle" name="Subtitle" class="add-book-form-input" value="@Model?.Subtitle">
                        <span asp-validation-for="Subtitle" class="text-danger"></span>
                    </div>
                    <div class="add-book-form-group">
                        <label for="publicationDate">Publication Date</label>
                        <div class="add-book-date-input-wrapper">
                            <input type="date" id="publicationDate" name="PublicationDate" class="add-book-form-input" value="Model?.PublicationDate" />
                        </div>
                        <span asp-validation-for="PublicationDate" class="text-danger"></span>
                    </div>
                    <div class="add-book-form-group">
                        <label for="publisher">Publisher</label>
                        <input type="text" id="publisher" name="Publisher" class="add-book-form-input" value="@Model?.Publisher">
                        <span asp-validation-for="Publisher" class="text-danger"></span>
                    </div>
                    <div class="add-book-form-group">
                        <label for="publicationLocation">Publication Location</label>
                        <input type="text" id="publicationLocation" name="PublicationLocation" class="add-book-form-input" value="@Model?.PublicationLocation">
                        <span asp-validation-for="PublicationLocation" class="text-danger"></span>
                    </div>
                    <div class="add-book-form-group">
                        <label for="description">Description</label>
                        <textarea id="description" name="Description" class="add-book-form-textarea">@Model?.Description</textarea>
                        <span asp-validation-for="Description" class="text-danger"></span>
                    </div>
                    <div class="add-book-form-group">
                        <label for="numberOfPages">Number of Pages</label>
                        <input type="number" id="numberOfPages" name="NumberOfPages" class="add-book-form-input" value="@Model?.NumberOfPages">
                        <span asp-validation-for="NumberOfPages" class="text-danger"></span>
                    </div>
                    <div class="add-book-form-group">
                        <label for="language">Language</label>
                        <select id="language" name="Language" class="add-book-form-select">
                            <option value="">Select Language</option>
                            <option value="English">English</option>
                            <option value="Tagalog">Tagalog</option>
                            <option value="Bisaya">Bisaya</option>
                        </select>
                    </div>
                    <div class="add-book-form-group">
                        <label for="seriesName">Series Name</label>
                        <input type="text" id="seriesName" name="SeriesName" class="add-book-form-input" value="@Model?.SeriesName">
                        <span asp-validation-for="SeriesName" class="text-danger"></span>
                    </div>
                    <div class="add-book-form-group">
                        <label for="seriesOrder">Series Order</label>
                           <input type="number" id="seriesOrder" name="SeriesOrder" class="add-book-form-input" value="@Model?.SeriesOrder">
                           <span asp-validation-for="SeriesOrder" class="text-danger"></span>
                    </div>
                    <div class="add-book-form-group">
                        <label for="seriesDescription">Series Description</label>
                        <textarea id="seriesDescription" name="SeriesDescription" class="add-book-form-textarea">@Model?.SeriesDescription</textarea>
                        <span asp-validation-for="SeriesDescription" class="text-danger"></span>
                    </div>
                    <div class="add-book-form-group add-book-form-grid-span-2">
                        <label for="author">Author (comma-separated)</label>
                        <input type="text" id="author" name="Author" class="add-book-form-input" value="@Model?.Author">
                        <span asp-validation-for="Author" class="text-danger"></span>
                    </div>
                </div>

                <h3 class="add-book-form-section-title">Categorization</h3>
                <div class="add-book-form-grid">
                    <div class="add-book-form-group">
                        <label for="genre">Genre</label>
                        <select id="genre" name="Genre" class="add-book-form-select" multiple>
                            <option value="Fiction">Fiction</option>
                            <option value="Fantasy">Fantasy</option>
                            <option value="Science Fiction">Science Fiction</option>
                            <option value="Thriller">Thriller</option>
                            <option value="Mystery">Mystery</option>
                            <option value="Biography">Biography</option>
                            <option value="History">History</option>
                        </select>
                    </div>
                    <div class="add-book-form-group">
                        <label for="subgenre">Subgenre (comma-separated)</label>
                        <input type="text" id="subgenre" name="Subgenre" class="add-book-form-input" placeholder="e.g., Contemporary, Philosophical Fiction">
                    </div>
                    <div class="add-book-form-group">
                        <label for="audience" >Audience</label>
                        <select id="audience" name="Audience" class="add-book-form-select">
                            <option value="">Select Audience</option>
                            <option value="Adult">Adult</option>
                            <option value="Young Adult">Young Adult</option>
                            <option value="Children">Children</option>
                        </select>
                    </div>
                    <div class="add-book-form-group">
                        <label for="isbn10">ISBN10</label>
                        <input type="text" id="isbnten" name="ISBN10" class="add-book-form-input" value="@Model?.ISBN10">
                        <span asp-validation-for="ISBN10" class="text-danger"></span>
                    </div>
                    <div class="add-book-form-group">
                        <label for="isbn13">ISBN13</label>
                        <input type="text" id="isbnthitheen" name="ISBN13" class="add-book-form-input" value="@Model?.ISBN13">
                        <span asp-validation-for="ISBN13" class="text-danger"></span>
                    </div class="add-book-form-group">
                    <div>
                        <label for="edition">Edition</label>
                        <input type="text" id="edition" name="Edition" class="add-book-form-input" value="@Model?.Edition">
                        <span asp-validation-for="Edition" class="text-danger"></span>
                    </div>
                </div>

            <h3 class="add-book-form-section-title">Cover Image Upload</h3>
            <div class="add-book-form-group add-book-form-grid-span-2">
                <label for="coverImageFile">Select Cover Image</label>
                <div class="add-book-file-upload-wrapper">
                    <input type="text" class="add-book-file-input-text" readonly id="coverFileNameDisplay" value="@Model?.CoverImageUrl">
                    <input type="file" id="coverImageFile" accept="image/*" name="CoverImageFile" style="display: none;" required>
                    <button type="button" class="add-book-browse-button" onclick="document.getElementById('coverImageFile').click();">BROWSE</button>
                </div>
                @* <p id="coverUploadStatus" class="add-book-upload-status">Max file size: 1GB &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Supported formats: JPG, PNG, JPEG</p> *@
                <p id="coverUploadStatus" class="add-book-upload-status">
    <span class="file-size-info">Max file size: 1GB</span>
    <span class="supported-formats-info">Supported formats: JPG, PNG, JPEG</span>
</p>
                <input type="hidden" id="coverImageUrl" name="CoverImageUrl">
            </div>

            <h3 class="add-book-form-section-title">Book File Upload (e.g., PDF)</h3>
            <div class="add-book-form-group add-book-form-grid-span-2">
                <label for="bookFile">Select Book File</label>
                <div class="add-book-file-upload-wrapper">
                    <input type="text" class="add-book-file-input-text" readonly id="bookFileNameDisplay" value="@Model?.BookFileUrl">
                    <input type="file" id="bookFile" accept=".pdf,.epub" name="BookFile" style="display: none;" required>
                    <button type="button" class="add-book-browse-button" onclick="document.getElementById('bookFile').click();">BROWSE</button>
                </div>
                @* <p id="bookFileUploadStatus" class="add-book-upload-status">Max file size: 1GB &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Supported formats: PDF, EPUB.</p> *@
                <p id="bookFileUploadStatus" class="add-book-upload-status">
    <span class="file-size-info">Max file size: 1GB</span>
    <span class="supported-formats-info">Supported formats: PDF, EPUB.</span>
</p>
                <input type="hidden" id="bookFileUrl" name="BookFileUrl">
            </div>

            <div class="button-container">
                <button type="button" class="cancel-button" onclick="location.href='/Book/ListBook';">CANCEL</button>
                <button type="submit" class="add-book-submit-button">ADD BOOK</button>
            </div>
            </form>
            </div>
        </div>

        <div class="modal fade confirmation-modal" id="addBookConfirmationModal" tabindex="-1" aria-labelledby="addBookConfirmationModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header border-0">
                <h5 class="modal-title" id="addBookConfirmationModalLabel">Add Book Confirmation</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body text-center">
                <p class="mb-4">Are you sure you want to add this book?</p>
                <div class="d-flex justify-content-center gap-2">
                    <button type="button" class="btn btn-secondary px-4" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-danger px-4" id="confirmAddBookAction">Add Book</button>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="modal fade success-modal" id="addBookSuccessModal" tabindex="-1" aria-labelledby="addBookSuccessModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-body text-center py-4">
                <div class="success-icon mb-3">
                    <i class="fas fa-check"></i>
                </div>
                <h5 class="modal-title mb-2">Added!</h5>
                <p class="mb-4">Book added successfully!</p>
                <button type="button" class="btn btn-secondary px-4" data-bs-dismiss="modal" onclick="window.location.href='/Book/ListBook';">OK</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="addBookErrorModal" tabindex="-1" aria-labelledby="addBookErrorModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addBookErrorModalLabel">Error</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p id="addBookErrorMessage"></p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

@section scripts {
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
    <script type="module">
        // date picker
        const publicationDateInput = document.getElementById('publicationDate');
        if (publicationDateInput) {
            publicationDateInput.addEventListener('click', () => {
                // Programmatically open the date picker
                publicationDateInput.showPicker(); 
            });
        } else {
            console.warn("Element with ID 'publicationDate' not found for date picker functionality.");
        }

        // Display selected file names
        document.getElementById('coverImageFile').addEventListener('change', function () {
            const fileName = this.files[0] ? this.files[0].name : '';
            document.getElementById('coverFileNameDisplay').value = fileName;
            // Clear any previous error/status messages for this file
            // document.getElementById('coverUploadStatus').textContent = 'Max file size: 1GB &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Supported formats: JPG, PNG, JPEG';
            const coverUploadStatus = document.getElementById('coverUploadStatus');
            coverUploadStatus.querySelector('.file-size-info').textContent = 'Max file size: 1GB';
            coverUploadStatus.querySelector('.supported-formats-info').textContent = 'Supported formats: JPG, PNG, JPEG';
            coverUploadStatus.classList.remove('error-message');
        });

        document.getElementById('bookFile').addEventListener('change', function () {
            const fileName = this.files[0] ? this.files[0].name : '';
            document.getElementById('bookFileNameDisplay').value = fileName;
            // Clear any previous error/status messages for this file
            // document.getElementById('bookFileUploadStatus').textContent = 'Max file size: 1GB &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Supported formats: PDF, EPUB.';
            const bookFileUploadStatus = document.getElementById('bookFileUploadStatus');
            bookFileUploadStatus.querySelector('.file-size-info').textContent = 'Max file size: 1GB';
            bookFileUploadStatus.querySelector('.supported-formats-info').textContent = 'Supported formats: PDF, EPUB.';
            bookFileUploadStatus.classList.remove('error-message');
        });

        // Your Firebase configuration (consider storing this in a more secure way, e.g., environment variables, server-side configuration)
        const firebaseConfig = {
            apiKey: "AIzaSyA4CTMSbgGQN_yLn9lEZlswbZ_2A2Xhl0k",
            authDomain: "basabuzz-ca8fe.firebaseapp.com",
            projectId: "basabuzz-ca8fe",
            storageBucket: "basabuzz-ca8fe.firebasestorage.app",
            messagingSenderId: "206533484485",
            appId: "1:206533484485:web:2c71a06a17d5244efe75ac"
        };

        // Initialize Firebase
        import { initializeApp } from "https://www.gstatic.com/firebasejs/11.9.1/firebase-app.js";
        import { getStorage, ref, uploadBytesResumable, getDownloadURL, deleteObject } from "https://www.gstatic.com/firebasejs/11.9.1/firebase-storage.js";

        const app = initializeApp(firebaseConfig);
        const storage = getStorage(app);

        async function deleteFileFromFirebase(fileUrl) {
            if (!fileUrl) {
                console.warn("Attempted to delete null or empty file URL.");
                return;
            }
            try {

                const fileRef = ref(storage, fileUrl);
                await deleteObject(fileRef);
                console.log(`Successfully deleted file: ${fileUrl}`);
            } catch (error) {
                alert(`Failed to delete file ${fileUrl}: ${error.message}`);
                console.error(`Failed to delete file ${fileUrl}:`, error);
            }
        }

        // Firebase Upload Function
        // This function returns the download URL or null on failure/no file
        async function uploadFileToFirebase(file, path, statusElement) {
            if (!file) {
                statusElement.textContent = 'No file selected.';
                return null; // Indicates no file was provided
            }

            // Generate New File Name
            const timestamp = new Date().getTime();
            const randomString = Math.random().toString(36).substring(2, 8);
            const uniqueFileName = `${path}${timestamp}-${randomString}-${file.name}`; // Unique Path

            const storageRef = ref(storage, uniqueFileName); // Use full unique path
            const uploadTask = uploadBytesResumable(storageRef, file);

            return new Promise((resolve, reject) => {
                uploadTask.on('state_changed',
                    (snapshot) => {
                        const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;
                        statusElement.textContent = `Upload is ${progress.toFixed(2)}% done`;
                    },
                    (error) => {
                        statusElement.textContent = `Upload failed: ${error.message}`;
                        console.error("Upload error:", error);
                        reject(error); // Reject the promise on upload error
                    },
                    async () => {
                        try {
                            const downloadURL = await getDownloadURL(uploadTask.snapshot.ref);
                            statusElement.textContent = 'Upload successful!';
                            resolve(downloadURL); // Resolve with the download URL
                        } catch (error) {
                            statusElement.textContent = `Failed to get download URL: ${error.message}`;
                            console.error("Get Download URL error:", error);
                            reject(error); // Reject the promise if getting URL fails
                        }
                    }
                );
            });
        }


        const addBookConfirmationModal = new bootstrap.Modal(document.getElementById('addBookConfirmationModal'));
        const addBookSuccessModal = new bootstrap.Modal(document.getElementById('addBookSuccessModal'));
        const addBookErrorModal = new bootstrap.Modal(document.getElementById('addBookErrorModal'));
        const addBookErrorMessage = document.getElementById('addBookErrorMessage');


        document.getElementById('addBookForm').addEventListener('submit', async (event) => {
            // Prevent the default HTML form submission initially.
            
            event.preventDefault();

            const form = event.target;
            const submitButton = form.querySelector('.add-book-submit-button');
            const coverImageFile = document.getElementById('coverImageFile').files[0];
            const bookFile = document.getElementById('bookFile').files[0];

            const coverUploadStatus = document.getElementById('coverUploadStatus');
            const bookFileUploadStatus = document.getElementById('bookFileUploadStatus');
            const coverImageUrlInput = document.getElementById('coverImageUrl');
            const bookFileUrlInput = document.getElementById('bookFileUrl');

            // added
            // --- Client-side validation for file inputs ---
            let isValid = true;
            if (!coverImageFile && !coverImageUrlInput.value) {
                 coverUploadStatus.querySelector('.file-size-info').textContent = 'Cover image is required.';
                coverUploadStatus.classList.add('error-message');
                isValid = false;
            } else {
                coverUploadStatus.querySelector('.file-size-info').textContent = 'Max file size: 1GB'; // Reset to default
        coverUploadStatus.classList.remove('error-message');
            }

            if (!bookFile && !bookFileUrlInput.value) {
                bookFileUploadStatus.querySelector('.file-size-info').textContent = 'Book file is required.';
        bookFileUploadStatus.classList.add('error-message');
                isValid = false;
            } else {
                bookFileUploadStatus.querySelector('.file-size-info').textContent = 'Max file size: 1GB'; // Reset to default
        bookFileUploadStatus.classList.remove('error-message'); 
            }

            if (!isValid) {
                // If client-side validation fails, show error modal and prevent submission
                addBookErrorMessage.textContent = 'Please select both a cover image and a book file.';
                addBookErrorModal.show();
                return; // Stop here if validation fails
            }

            // Show confirmation modal
            addBookConfirmationModal.show();

            // Store the current form event for later use after confirmation
            // This is a common pattern for delayed form submission with modals.
            document.getElementById('addBookForm')._currentSubmitEvent = event;
            // added end




            // //Save initial state for rollback if backend fails
            // const originalCoverImageUrl = coverImageUrlInput.value;
            // const originalBookFileUrl = bookFileUrlInput.value;

            // // Clear previous status messages
            // if (!coverImageFile) { 
            //     coverUploadStatus.textContent = 'Max file size: 1GB ...';
            // }
            // if (!bookFile) {
            //     bookFileUploadStatus.textContent = 'Max file size: 1GB ...';
            // }

            // // Disable submit button to prevent double submission
            // submitButton.disabled = true;
            // submitButton.textContent = 'Processing...';

            // let uploadedCoverUrl = null;
            // let uploadedBookUrl = null;

            // try {
            //     // Handle Cover Image Upload
            //     if (coverImageFile) {
            //         coverUploadStatus.textContent = 'Uploading cover image...';
            //         uploadedCoverUrl = await uploadFileToFirebase(coverImageFile, 'book_covers/', coverUploadStatus);
            //         if (uploadedCoverUrl) {
            //             coverImageUrlInput.value = uploadedCoverUrl;
            //         } else {
            //             throw new Error('Cover image upload failed.');
            //         }
            //     } else if (coverImageUrlInput.value === "") { //Ensure a cover image is present if required
            //         alert('Please select a cover image file.');
            //         submitButton.disabled = false;
            //         submitButton.textContent = 'ADD BOOK';
            //         return;
            //     }

            //     // Handle Book File Upload
            //     if (bookFile) {
            //         bookFileUploadStatus.textContent = 'Uploading book file...';
            //         uploadedBookUrl = await uploadFileToFirebase(bookFile, 'book_files/', bookFileUploadStatus);
            //         if (uploadedBookUrl) {
            //             bookFileUrlInput.value = uploadedBookUrl;
            //         } else {
            //             throw new Error('Book file upload failed.');
            //         }
            //     } else if (bookFileUrlInput.value === "") { //Ensure a book file is present if required
            //         alert('Please select a book file.');
            //         submitButton.disabled = false;
            //         submitButton.textContent = 'ADD BOOK';
            //         return;
            //     }

            //     // If uploads are successful, submit form
            
            //     form.submit();

            // } catch (error) {
            //     console.error('Submission error:', error);
            //     alert(`An error occurred during file upload: ${error.message}. Please try again.`);

            //     // delete Uploaded files if server error occurs
            //     if (uploadedCoverUrl && uploadedCoverUrl !== originalCoverImageUrl) {
            //         await deleteFileFromFirebase(uploadedCoverUrl);
            //     }
            //     if (uploadedBookUrl && uploadedBookUrl !== originalBookFileUrl) {
            //         await deleteFileFromFirebase(uploadedBookUrl);
            //     }

            //     submitButton.disabled = false;
            //     submitButton.textContent = 'ADD BOOK';
            // }
        });


        document.getElementById('confirmAddBookAction').addEventListener('click', async () => {
            addBookConfirmationModal.hide(); // Hide the confirmation modal

            const form = document.getElementById('addBookForm');
            const submitButton = form.querySelector('.add-book-submit-button');
            const coverImageFile = document.getElementById('coverImageFile').files[0];
            const bookFile = document.getElementById('bookFile').files[0];

            const coverUploadStatus = document.getElementById('coverUploadStatus');
            const bookFileUploadStatus = document.getElementById('bookFileUploadStatus');
            const coverImageUrlInput = document.getElementById('coverImageUrl');
            const bookFileUrlInput = document.getElementById('bookFileUrl');

            // Save initial state for rollback if backend fails
            const originalCoverImageUrl = coverImageUrlInput.value;
            const originalBookFileUrl = bookFileUrlInput.value;

            // Clear previous status messages (reset to default)
            // coverUploadStatus.textContent = 'Max file size: 1GB &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Supported formats: JPG, PNG, JPEG';
            // bookFileUploadStatus.textContent = 'Max file size: 1GB &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Supported formats: PDF, EPUB.';
            coverUploadStatus.querySelector('.file-size-info').textContent = 'Max file size: 1GB';
            coverUploadStatus.querySelector('.supported-formats-info').textContent = 'Supported formats: JPG, PNG, JPEG';
            coverUploadStatus.classList.remove('error-message');

            bookFileUploadStatus.querySelector('.file-size-info').textContent = 'Max file size: 1GB';
            bookFileUploadStatus.querySelector('.supported-formats-info').textContent = 'Supported formats: PDF, EPUB.';
            bookFileUploadStatus.classList.remove('error-message');


            // Disable submit button and change text
            submitButton.disabled = true;
            submitButton.textContent = 'Processing...';

            let uploadedCoverUrl = null;
            let uploadedBookUrl = null;

            try {
                // Handle Cover Image Upload
                if (coverImageFile) {
                    coverUploadStatus.querySelector('.file-size-info').textContent = 'Uploading cover image...'; 
                    uploadedCoverUrl = await uploadFileToFirebase(coverImageFile, 'book_covers/', coverUploadStatus.querySelector('.file-size-info'));
                    if (uploadedCoverUrl) {
                        coverImageUrlInput.value = uploadedCoverUrl;
                    } else {
                        throw new Error('Cover image upload failed.');
                    }
                }

                // Handle Book File Upload
                if (bookFile) {
                    bookFileUploadStatus.querySelector('.file-size-info').textContent = 'Uploading book file...';
                    uploadedBookUrl = await uploadFileToFirebase(bookFile, 'book_files/', bookFileUploadStatus.querySelector('.file-size-info')); 
                    if (uploadedBookUrl) {
                        bookFileUrlInput.value = uploadedBookUrl;
                    } else {
                        throw new Error('Book file upload failed.');
                    }
                }


                const formData = new FormData(form); 

                const response = await fetch(form.action, {
                    method: form.method,
                    body: formData
                });

                if (response.ok) {
                    addBookSuccessModal.show(); //success modal
                } else {
                    const errorData = await response.json(); // parse JSON error from server
                    addBookErrorMessage.textContent = `Server error: ${errorData.message || response.statusText}`;
                    addBookErrorModal.show(); 

                    if (uploadedCoverUrl && uploadedCoverUrl !== originalCoverImageUrl) {
                        await deleteFileFromFirebase(uploadedCoverUrl);
                    }
                    if (uploadedBookUrl && uploadedBookUrl !== originalBookFileUrl) {
                        await deleteFileFromFirebase(uploadedBookUrl);
                    }
                }

            } catch (error) {
                console.error('Submission error:', error);
                addBookErrorMessage.textContent = `An unexpected error occurred during file upload or form submission: ${error.message}. Please try again.`;
                addBookErrorModal.show(); 

                // Rollback: delete uploaded files from Firebase
                if (uploadedCoverUrl && uploadedCoverUrl !== originalCoverImageUrl) {
                    await deleteFileFromFirebase(uploadedCoverUrl);
                }
                if (uploadedBookUrl && uploadedBookUrl !== originalBookFileUrl) {
                    await deleteFileFromFirebase(uploadedBookUrl);
                }

            } finally {
                submitButton.disabled = false;
                submitButton.textContent = 'ADD BOOK';
            }
        });
    </script>
}

