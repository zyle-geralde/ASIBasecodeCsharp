@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@

@model ASI.Basecode.Services.ServiceModels.BookViewModel
@{
    ViewData["Title"] = "Add New Book";
    Layout = "_AdminSidebarLayout";
}

@section styles {
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <link rel="stylesheet" href="~/css/admin/books/bookmaster.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/admin/common.css" asp-append-version="true" />
}

        <div class="admin-common-container">
            <div class="admin-common-content-wrapper">
             <div class="header-section">
                <h1>Add New Book</h1>
                <p>Enter details of the new book here.</p>
             </div>

            <!-- Display validation summary errors -->
            <div asp-validation-summary="ModelOnly" class="validation-summary-errors"></div>

            <form asp-action="AddBook" asp-controller="Book" method="post" enctype="multipart/form-data" id="addBookForm">
                <div class="book-master-form-grid">
                    <div class="book-master-form-group">
                        <label for="title" class="required-label">Title</label>
                        <input type="text" id="title" name="Title" class="book-master-form-input" value="@Model?.Title" required>
                        <span asp-validation-for="Title" class="text-danger"></span>
                    </div>
                    <div class="book-master-form-group">
                        <label for="subtitle">Subtitle</label>
                        <input type="text" id="subtitle" name="Subtitle" class="book-master-form-input" value="@Model?.Subtitle">
                        <span asp-validation-for="Subtitle" class="text-danger"></span>
                    </div>
                    <div class="book-master-form-group">
                        <label for="publicationDate" class="required-label">Publication Date</label>
                        <div class="book-master-date-input-wrapper">
                            <input type="date" id="publicationDate" name="PublicationDate" class="book-master-form-input" value="@(Model?.PublicationDate?.ToString("yyyy-MM-dd"))" />
                        </div>
                        <span asp-validation-for="PublicationDate" class="text-danger"></span>
                    </div>
                    <div class="book-master-form-group">
                        <label for="publisher">Publisher</label>
                        <input type="text" id="publisher" name="Publisher" class="book-master-form-input" value="@Model?.Publisher">
                        <span asp-validation-for="Publisher" class="text-danger"></span>
                    </div>
                    <div class="book-master-form-group">
                        <label for="publicationLocation">Publication Location</label>
                        <input type="text" id="publicationLocation" name="PublicationLocation" class="book-master-form-input" value="@Model?.PublicationLocation">
                        <span asp-validation-for="PublicationLocation" class="text-danger"></span>
                    </div>
                    <div class="book-master-form-group">
                        <label for="description">Description</label>
                        <textarea id="description" name="Description" class="book-master-form-textarea">@Model?.Description</textarea>
                        <span asp-validation-for="Description" class="text-danger"></span>
                    </div>
                    <div class="book-master-form-group">
                        <label for="numberOfPages">Number of Pages</label>
                        <input type="number" id="numberOfPages" name="NumberOfPages" class="book-master-form-input" value="@Model?.NumberOfPages">
                        <span asp-validation-for="NumberOfPages" class="text-danger"></span>
                    </div>
                   @*  <div class="book-master-form-group">
                        <label for="language">Language</label>
                        <select id="language" name="Language" class="book-master-form-select">
                            <option value="">Select Language</option>
                            <option value="English">English</option>
                            <option value="Tagalog">Tagalog</option>
                            <option value="Bisaya">Bisaya</option>
                        </select>
                    </div> *@
                    <div class="book-master-form-group">
                    <label for="language" class="required-label">Language</label>
                    <div class="custom-multi-select" id="languageContainer">
                        <div class="custom-select-btn">
                            <span>Select Language</span>
                            <i class="fas fa-chevron-down"></i>
                        </div>
                        <div class="custom-dropdown" id="languageDropdown">
                            
                        </div>
                    </div>
                    <div id="selectedLanguages" class="selected-tags"></div>
                    <input type="hidden" id="concatenatedLanguage" name="Language" value="@Model?.Language"/>
                </div>
                    <div class="book-master-form-group">
                        <label for="seriesName">Series Name</label>
                        <input type="text" id="seriesName" name="SeriesName" class="book-master-form-input" value="@Model?.SeriesName">
                        <span asp-validation-for="SeriesName" class="text-danger"></span>
                    </div>
                    <div class="book-master-form-group">
                        <label for="seriesOrder">Series Order</label>
                           <input type="number" id="seriesOrder" name="SeriesOrder" class="book-master-form-input" value="@Model?.SeriesOrder">
                           <span asp-validation-for="SeriesOrder" class="text-danger"></span>
                    </div>
                    <div class="book-master-form-group">
                        <label for="seriesDescription">Series Description</label>
                        <textarea id="seriesDescription" name="SeriesDescription" class="book-master-form-textarea">@Model?.SeriesDescription</textarea>
                        <span asp-validation-for="SeriesDescription" class="text-danger"></span>
                    </div>
                    @*<div class="book-master-form-group book-master-form-grid-span-2">
                        <label for="author" class="required-label">Author (comma-separated)</label>
                        <input type="text" id="author" name="Author" class="book-master-form-input" value="@Model?.Author">
                        <span asp-validation-for="Author" class="text-danger"></span>
                    </div>*@

                    <div class="book-master-form-group">
                        <label for="author">Author</label>
                        <select id="author" name="Author" class="book-master-form-select">

                        </select>
                    </div>
                </div>

                <h3 class="book-master-form-section-title">Categorization</h3>
                <div class="book-master-form-grid">
                    <div class="book-master-form-group">
                    <label for="genre" class="required-label">Genre</label>
                    <div class="custom-multi-select" id="genreContainer">
                        <div class="custom-select-btn">
                            <span>Select Genre</span>
                            <i class="fas fa-chevron-down"></i>
                        </div>
                        <div class="custom-dropdown" id="genreDropdown">
                          
                        </div>
                    </div>
                    <div id="selectedGenres" class="selected-tags"></div>
                    <input type="hidden" id="concatenatedGenre" name="GenreList" value="@Model?.GenreList" />
                </div>
                    @* <div class="book-master-form-group">
                        <label for="subgenre">Subgenre (comma-separated)</label>
                        <input type="text" id="subgenre" name="Subgenre" class="book-master-form-input" placeholder="e.g., Contemporary, Philosophical Fiction">
                    </div>
                    <div class="book-master-form-group">
                        <label for="audience" >Audience</label>
                        <select id="audience" name="Audience" class="book-master-form-select">
                            <option value="">Select Audience</option>
                            <option value="Adult">Adult</option>
                            <option value="Young Adult">Young Adult</option>
                            <option value="Children">Children</option>
                        </select>
                    </div> *@
                    <div class="book-master-form-group">
                        <label for="isbn10">ISBN10</label>
                        <input type="text" id="isbnten" name="ISBN10" class="book-master-form-input" value="@Model?.ISBN10">
                        <span asp-validation-for="ISBN10" class="text-danger"></span>
                    </div>
                    <div class="book-master-form-group">
                        <label for="isbn13">ISBN13</label>
                        <input type="text" id="isbnthitheen" name="ISBN13" class="book-master-form-input" value="@Model?.ISBN13">
                        <span asp-validation-for="ISBN13" class="text-danger"></span>
                    </div class="book-master-form-group">
                    <div>
                        <label for="edition">Edition</label>
                        <input type="text" id="edition" name="Edition" class="book-master-form-input" value="@Model?.Edition">
                        <span asp-validation-for="Edition" class="text-danger"></span>
                    </div>
                </div>

            <h3 class="book-master-form-section-title">Cover Image Upload</h3>
            <div class="book-master-form-group book-master-form-grid-span-2">
                <label for="coverImageFile" class="required-label">Select Cover Image</label>
                <div class="book-master-file-upload-wrapper">
                    <input type="text" class="book-master-file-input-text" readonly id="coverFileNameDisplay" value="@Model?.CoverImageUrl">
                    <input type="file" id="coverImageFile" accept="image/*" name="CoverImageFile" style="display: none;">
                    <button type="button" class="book-master-browse-button" onclick="document.getElementById('coverImageFile').click();">BROWSE</button>
                </div>
             
                <p id="coverUploadStatus" class="book-master-upload-status">
                    <span class="file-size-info">Max file size: 1GB</span>
                    <span class="supported-formats-info">Supported formats: JPG, PNG, JPEG</span>
                </p>
                <input type="hidden" id="coverImageUrl" name="CoverImageUrl">
            </div>

            <h3 class="book-master-form-section-title">Book File Upload (e.g., PDF)</h3>
            <div class="book-master-form-group book-master-form-grid-span-2">
                <label for="bookFile" class="required-label">Select Book File</label>
                <div class="book-master-file-upload-wrapper">
                    <input type="text" class="book-master-file-input-text" readonly id="bookFileNameDisplay" value="@Model?.BookFileUrl">
                    <input type="file" id="bookFile" accept=".pdf,.epub" name="BookFile" style="display: none;">
                    <button type="button" class="book-master-browse-button" onclick="document.getElementById('bookFile').click();">BROWSE</button>
                </div>
              
                <p id="bookFileUploadStatus" class="book-master-upload-status">
                    <span class="file-size-info">Max file size: 1GB</span>
                    <span class="supported-formats-info">Supported formats: PDF, EPUB.</span>
                </p>
                <input type="hidden" id="bookFileUrl" name="BookFileUrl">
            </div>

            <div class="button-container">
                <button type="button" class="cancel-button" onclick="location.href='/Book/ListBook';">CANCEL</button>
                <button type="submit" class="book-master-submit-button">ADD BOOK</button>
            </div>
            </form>
            </div>
        </div>

        <div class="modal fade confirmation-modal" id="addBookConfirmationModal" tabindex="-1" aria-labelledby="addBookConfirmationModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header border-0">
                <h5 class="modal-title" id="addBookConfirmationModalLabel">Add Book Confirmation</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body text-center">
                <p class="mb-4">Are you sure you want to add this book?</p>
                <div class="d-flex justify-content-center gap-2">
                    <button type="button" class="btn btn-secondary px-4" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-danger px-4" id="confirmAddBookAction">Add Book</button>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="modal fade status-modal" id="statusModal" tabindex="-1" aria-labelledby="statusModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-body text-center py-4">
                <div class="status-icon mb-3">
                    <i class="fas fa-check"></i>
                </div>
                <h5 class="modal-title mb-2" id="statusModalLabel">Success!</h5>
                <p class="mb-4" id="statusModalMessage">Book added successfully!</p>
                <button type="button" class="btn btn-secondary px-4" data-bs-dismiss="modal" id="statusModalClose">OK</button>
            </div>
        </div>
    </div>
</div>

@section scripts {
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
    <script type="module">
        // const genreSelect = document.getElementById('genre');
        // const concatenatedGenreInput = document.getElementById('concatenatedGenre');

        //Setting Up Genres
        //  try {
        //     const response = await fetch('/Book/GetGenre', {
        //         method: 'GET'
        //     });

        //     if (response.ok) {
        //         const result = await response.json();
        //         const genre_list = result.message


        //         // Add a default "Select Genre" option 
        //         const default_option = document.createElement('option');
        //         default_option.value = ""
        //         default_option.textContent = "Select Genre"
        //         genreSelect.appendChild(default_option)

        //         //Add elements of the genre_list to the select tag
        //         genre_list.forEach(genre_name_id => {
        //             const parts = genre_name_id.split(',');
        //             console.log("Hello")
        //             console.log(genre_name_id)

        //             const option = document.createElement('option');
        //             option.value = parts[1].trim();
        //             option.textContent = parts[0].trim();

        //             genreSelect.appendChild(option);
        //         })
        //     } else {
        //         alert("Server error")
        //     }
        // } catch (backendError) {
        //     alert("Unexpected Error Occured")
        // }

        const authorSelect = document.getElementById('author');

        //Setting Up Author
         try {
            const response = await fetch('/Book/GetAuthor', {
                method: 'GET'
            });

            if (response.ok) {
                const result = await response.json();
                const author_list = result.message


                //Add a default "Select Author" option 
                const default_option = document.createElement('option');
                default_option.value = ""
                default_option.textContent = "Select Author"
                authorSelect.appendChild(default_option)

                //Add elements of the author_list to the select tag
                author_list.forEach(author_name_id => {
                    const parts = author_name_id.split(',');
                    console.log("Hello")
                    console.log(author_name_id)

                    const option = document.createElement('option');
                    option.value = parts[1].trim();
                    option.textContent = parts[0].trim();

                    authorSelect.appendChild(option);
                })
            } else {
                alert("Server error")
            }
        } catch (backendError) {
            alert("Unexpected Error Occured")
        }



        async function initializeMultiSelect({
            containerId,
            dropdownId,
            hiddenInputId,
            selectedContainerId,
            fetchUrl,
            placeholderText = 'Select Items',
            fallbackItems = null 
        }) {
            const selectButton = document.querySelector(`#${containerId} .custom-select-btn`);
            const dropdown = document.getElementById(dropdownId);
            const selectedContainer = document.getElementById(selectedContainerId);
            const hiddenInput = document.getElementById(hiddenInputId);

            // update placeholder text
            selectButton.querySelector('span').textContent = placeholderText;

            // dropdown visibility
            selectButton.addEventListener('click', () => {
                dropdown.classList.toggle('show');
            });

            // click outside, then close
            document.addEventListener('click', (event) => {
                if (!selectButton.contains(event.target) && !dropdown.contains(event.target)) {
                    dropdown.classList.remove('show');
                }
            });

            // Function to add a selected tag
            function addSelectedTag(itemText, itemValue) { 
                const tag = document.createElement('div');
                tag.className = 'selected-tag'; 
                tag.innerHTML = `
                    ${itemText}
                    <span class="remove-tag" data-value="${itemValue}">×</span>
                `;
                selectedContainer.appendChild(tag); 

                tag.querySelector('.remove-tag').addEventListener('click', () => {
                    tag.remove();
                    const checkbox = dropdown.querySelector(`input[value="${itemValue}"]`);
                    if (checkbox) checkbox.checked = false;
                    updateHiddenInput(); 
                });
            }

            // Update hidden input with selected values for this specific multi-select
            function updateHiddenInput() {
                const selectedCheckboxes = Array.from(dropdown.querySelectorAll('input[type="checkbox"]:checked'));
                const selectedValues = selectedCheckboxes.map(checkbox => checkbox.value);
                hiddenInput.value = selectedValues.join(',');
            }

            // checkbox changes for  multi-select
            dropdown.addEventListener('change', (event) => {
                if (event.target.type === 'checkbox') {
                    selectedContainer.innerHTML = ''; 
                    const selectedCheckboxes = Array.from(dropdown.querySelectorAll('input[type="checkbox"]:checked'));
                    selectedCheckboxes.forEach(checkbox => {
                        const label = dropdown.querySelector(`label[for="${checkbox.id}"]`).textContent;
                        addSelectedTag(label, checkbox.value);
                    });
                    updateHiddenInput();
                }
            });

            // Fetch and populate items
            try {
                const response = await fetch(fetchUrl, { method: 'GET' });
                let itemsToPopulate = [];

                if (response.ok) {
                    const result = await response.json();
                    itemsToPopulate = result.message;
                } else if (fallbackItems) {
                    console.warn(`Failed to fetch from ${fetchUrl}, using fallback items.`);
                    itemsToPopulate = fallbackItems;
                } else {
                    showStatusModal(`Server error fetching data from ${fetchUrl} and no fallback provided.`, 'Error');
                    return;
                }

                itemsToPopulate.forEach(item => {
                    const parts = item.split(',');
                    const itemName = parts[0].trim();
                    const itemValue = parts[1].trim();
                    console.log(itemName)
                    console.log(itemValue)
                    const optionDiv = document.createElement('div');
                    optionDiv.className = 'dropdown-item'; 
                    optionDiv.innerHTML = `
                        <input type="checkbox" value="${itemValue}" id="${dropdownId}-${itemValue}">
                        <label for="${dropdownId}-${itemValue}">${itemName}</label>
                    `;
                    dropdown.appendChild(optionDiv);
                });

                // Restore previously selected items from hidden input (after populating dropdown)
                if (hiddenInput.value) {
                    const selectedValues = hiddenInput.value.split(',');
                    Array.from(dropdown.querySelectorAll('input[type="checkbox"]')).forEach(checkbox => {
                        if (selectedValues.includes(checkbox.value)) {
                            checkbox.checked = true;
                            addSelectedTag(
                                dropdown.querySelector(`label[for="${checkbox.id}"]`).textContent,
                                checkbox.value
                            );
                        }
                    });
                }

            } catch (error) {
                if (fallbackItems) {
                    console.warn(`Error fetching from ${fetchUrl}: ${error.message}, using fallback items.`);
                    // If an error occurs during fetch, and fallback is available, populate with fallback
                    fallbackItems.forEach(item => {
                        const parts = item.split(',');
                        const itemName = parts[0].trim();
                        const itemValue = parts[1].trim();
                        const optionDiv = document.createElement('div');
                        optionDiv.className = 'dropdown-item';
                        optionDiv.innerHTML = `
                            <input type="checkbox" value="${itemValue}" id="${dropdownId}-${itemValue}">
                            <label for="${dropdownId}-${itemValue}">${itemName}</label>
                        `;
                        dropdown.appendChild(optionDiv);
                    });
                     // Restore previously selected items from hidden input for fallback
                    if (hiddenInput.value) {
                        const selectedValues = hiddenInput.value.split(',');
                        Array.from(dropdown.querySelectorAll('input[type="checkbox"]')).forEach(checkbox => {
                            if (selectedValues.includes(checkbox.value)) {
                                checkbox.checked = true;
                                addSelectedTag(
                                    dropdown.querySelector(`label[for="${checkbox.id}"]`).textContent,
                                    checkbox.value
                                );
                            }
                        });
                    }
                } else {
                    showStatusModal(`Unexpected error occurred while initializing dropdown for ${containerId}: ${error.message}`, 'Error');
                }
            }
        }

        initializeMultiSelect({
            containerId: 'genreContainer',
            dropdownId: 'genreDropdown',
            hiddenInputId: 'concatenatedGenre',
            selectedContainerId: 'selectedGenres',
            fetchUrl: '/Book/GetGenre',
            placeholderText: 'Select Genre',
            fallbackItems: [ // fallback
                'Fiction,Fiction', 
                'Science Fiction,ScienceFiction',
                'Fantasy,Fantasy',
                'Thriller,Thriller',
                'Mystery,Mystery',
                'Romance,Romance',
                'Horror,Horror',
                'Biography,Biography',
                'History,History',
                'Cookbook,Cookbook',
                'Poetry,Poetry'
            ]
        });

        initializeMultiSelect({
            containerId: 'languageContainer',
            dropdownId: 'languageDropdown',
            hiddenInputId: 'concatenatedLanguage',
            selectedContainerId: 'selectedLanguages',
            fetchUrl: '/Book/GetLanguage',
            placeholderText: 'Select Language',
            fallbackItems: [ 
                'English,English', 
                'Tagalog,Tagalog',
                'Bisaya,Bisaya',
                'Spanish,Spanish',
                'French,French',
                'German,German',
                'Japanese,Japanese'
            ]
        });

        // date picker
        const publicationDateInput = document.getElementById('publicationDate');
        if (publicationDateInput) {
            publicationDateInput.addEventListener('click', () => {
                // Programmatically open the date picker
                publicationDateInput.showPicker(); 
            });
        } else {
            console.warn("Element with ID 'publicationDate' not found for date picker functionality.");
        }

        // Display selected file names
        document.getElementById('coverImageFile').addEventListener('change', function () {
            const fileName = this.files[0] ? this.files[0].name : '';
            document.getElementById('coverFileNameDisplay').value = fileName;
             const coverUploadStatus = document.getElementById('coverUploadStatus');
            coverUploadStatus.querySelector('.file-size-info').textContent = 'Max file size: 1GB';
            coverUploadStatus.querySelector('.supported-formats-info').textContent = 'Supported formats: JPG, PNG, JPEG';
            coverUploadStatus.classList.remove('error-message');
        });

        document.getElementById('bookFile').addEventListener('change', function () {
            const fileName = this.files[0] ? this.files[0].name : '';
            document.getElementById('bookFileNameDisplay').value = fileName;
            const bookFileUploadStatus = document.getElementById('bookFileUploadStatus');
            bookFileUploadStatus.querySelector('.file-size-info').textContent = 'Max file size: 1GB';
            bookFileUploadStatus.querySelector('.supported-formats-info').textContent = 'Supported formats: PDF, EPUB.';
            bookFileUploadStatus.classList.remove('error-message');
        });

        // Your Firebase configuration (consider storing this in a more secure way, e.g., environment variables, server-side configuration)
        const firebaseConfig = {
            apiKey: "AIzaSyA4CTMSbgGQN_yLn9lEZlswbZ_2A2Xhl0k",
            authDomain: "basabuzz-ca8fe.firebaseapp.com",
            projectId: "basabuzz-ca8fe",
            storageBucket: "basabuzz-ca8fe.firebasestorage.app",
            messagingSenderId: "206533484485",
            appId: "1:206533484485:web:2c71a06a17d5244efe75ac"
        };

        // Initialize Firebase
        import { initializeApp } from "https://www.gstatic.com/firebasejs/11.9.1/firebase-app.js";
        import { getStorage, ref, uploadBytesResumable, getDownloadURL, deleteObject } from "https://www.gstatic.com/firebasejs/11.9.1/firebase-storage.js";

        const app = initializeApp(firebaseConfig);
        const storage = getStorage(app);

        async function deleteFileFromFirebase(fileUrl) {
            if (!fileUrl) {
                console.warn("Attempted to delete null or empty file URL.");
                return;
            }
            try {

                const fileRef = ref(storage, fileUrl);
                await deleteObject(fileRef);
                console.log(`Successfully deleted file: ${fileUrl}`);
            } catch (error) {
                alert(`Failed to delete file ${fileUrl}: ${error.message}`);
                console.error(`Failed to delete file ${fileUrl}:`, error);
            }
        }

        // Firebase Upload Function
        // This function returns the download URL or null on failure/no file
        async function uploadFileToFirebase(file, path, statusElement) {
            if (!file) {
                statusElement.textContent = 'No file selected.';
                return null; // Indicates no file was provided
            }

            // Generate New File Name
            const timestamp = new Date().getTime();
            const randomString = Math.random().toString(36).substring(2, 8);
            const uniqueFileName = `${path}${timestamp}-${randomString}-${file.name}`; // Unique Path

            const storageRef = ref(storage, uniqueFileName); // Use full unique path
            const uploadTask = uploadBytesResumable(storageRef, file);

            return new Promise((resolve, reject) => {
                uploadTask.on('state_changed',
                    (snapshot) => {
                        const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;
                        statusElement.textContent = `Upload is ${progress.toFixed(2)}% done`;
                    },
                    (error) => {
                        statusElement.textContent = `Upload failed: ${error.message}`;
                        console.error("Upload error:", error);
                        showStatusModal(`File upload failed: ${error.message}`, 'Error');
                        reject(error); // Reject the promise on upload error
                    },
                    async () => {
                        try {
                            const downloadURL = await getDownloadURL(uploadTask.snapshot.ref);
                            statusElement.textContent = 'Upload successful!';
                            resolve(downloadURL); // Resolve with the download URL
                        } catch (error) {
                            statusElement.textContent = `Failed to get download URL: ${error.message}`;
                            console.error("Get Download URL error:", error);
                            showStatusModal(`Failed to get download URL: ${error.message}`, 'Error');
                            reject(error); // Reject the promise if getting URL fails
                        }
                    }
                );
            });
        }

         // Dynamic status modal
        function showStatusModal(message, type = 'Success') {
            const confirmationModalElement = document.getElementById('addBookConfirmationModal');
            const confirmationModal = bootstrap.Modal.getInstance(confirmationModalElement);
            if (confirmationModal) {
                confirmationModal.hide();
            }

            const statusModalTitle = document.getElementById('statusModalLabel');
            const statusModalMessage = document.getElementById('statusModalMessage');
            const statusModalClose = document.getElementById('statusModalClose');

            if (statusModalTitle) {
                statusModalTitle.textContent = type;
            }
            if (statusModalMessage) {
                statusModalMessage.textContent = message;
            }

            const statusIcon = document.querySelector('#statusModal .status-icon i');
            if (statusIcon) {
                statusIcon.classList.remove('fa-check', 'fa-times', 'fa-exclamation-triangle');
                if (type === 'Success') {
                    statusIcon.classList.add('fa-check');
                    statusIcon.style.color = '#28a745';
                } else if (type === 'Error') {
                    statusIcon.classList.add('fa-times');
                    statusIcon.style.color = '#dc3545';
                } else if (type === 'Warning') {
                    statusIcon.classList.add('fa-exclamation-triangle');
                    statusIcon.style.color = '#ffc107';
                } else {
                    statusIcon.classList.add('fa-check');
                    statusIcon.style.color = '#28a745';
                }
            }

            // Redirect on close for success
            if (type === 'Success') {
                statusModalClose.onclick = () => window.location.href = '/Book/ListBook';
            } else {
                statusModalClose.onclick = null;
            }

            setTimeout(() => {
                const statusModalElement = document.getElementById('statusModal');
                const statusModal = new bootstrap.Modal(statusModalElement);
                statusModal.show();
            }, 100);
        }

        const addBookConfirmationModal = new bootstrap.Modal(document.getElementById('addBookConfirmationModal'));

        document.getElementById('addBookForm').addEventListener('submit', async (event) => {
            event.preventDefault();
            
            const form = event.target;
            // const submitButton = form.querySelector('.book-master-submit-button');
            const titleInput = document.getElementById('title');
            const authorInput = document.getElementById('author');
            const publicationDateInput = document.getElementById('publicationDate');
            const languageInput = document.getElementById('concatenatedLanguage');
            const genreInput = document.getElementById('concatenatedGenre');
            const coverImageFile = document.getElementById('coverImageFile').files[0];
            const bookFile = document.getElementById('bookFile').files[0];
            const coverUploadStatus = document.getElementById('coverUploadStatus');
            const bookFileUploadStatus = document.getElementById('bookFileUploadStatus');
            const coverImageUrlInput = document.getElementById('coverImageUrl');
            const bookFileUrlInput = document.getElementById('bookFileUrl');

            
            let isValid = true;
            const missingFields = [];

            if (!titleInput.value.trim()) {
                missingFields.push('Title');
                titleInput.classList.add('is-invalid');
                isValid = false;
            } else {
                titleInput.classList.remove('is-invalid');
            }

            if (!authorInput.value.trim()) {
                missingFields.push('Author');
                authorInput.classList.add('is-invalid');
                isValid = false;
            } else {
                authorInput.classList.remove('is-invalid');
            }

            if (!publicationDateInput.value) {
                missingFields.push('Publication Date');
                publicationDateInput.classList.add('is-invalid');
                isValid = false;
            } else {
                publicationDateInput.classList.remove('is-invalid');
            }

            const today = new Date();
            today.setHours(0,0,0,0); 
            const pubDate = new Date(publicationDateInput.value);

            if (pubDate > today) {
                missingFields.push('Publication Date (cannot be in the future)');
                publicationDateInput.classList.add('is-invalid');
                isValid = false;
            } else {
                publicationDateInput.classList.remove('is-invalid');
            }

            if (!languageInput.value) {
                missingFields.push('Language');
                document.getElementById('languageContainer').querySelector('.custom-select-btn').classList.add('is-invalid-select');
                isValid = false;
            } else {
                document.getElementById('languageContainer').querySelector('.custom-select-btn').classList.remove('is-invalid-select');
            }

            if (!genreInput.value) {
                missingFields.push('Genre');
                document.getElementById('genreContainer').querySelector('.custom-select-btn').classList.add('is-invalid-select');
                isValid = false;
            } else {
                document.getElementById('genreContainer').querySelector('.custom-select-btn').classList.remove('is-invalid-select');
            }

            if (!coverImageFile && !coverImageUrlInput.value) {
                missingFields.push('Cover Image');
                coverUploadStatus.querySelector('.file-size-info').textContent = 'Cover image is required.';
                coverUploadStatus.classList.add('error-message');
                isValid = false;
            } else {
                coverUploadStatus.querySelector('.file-size-info').textContent = 'Max file size: 1GB'; 
                coverUploadStatus.classList.remove('error-message');
            }

            if (!bookFile && !bookFileUrlInput.value) {
                missingFields.push('Book File');
                bookFileUploadStatus.querySelector('.file-size-info').textContent = 'Book file is required.';
                bookFileUploadStatus.classList.add('error-message');
                isValid = false;
            } else {
                bookFileUploadStatus.querySelector('.file-size-info').textContent = 'Max file size: 1GB'; 
                bookFileUploadStatus.classList.remove('error-message'); 
            }

            if (!isValid) {
                showStatusModal(`Please fill in all required fields. Missing: ${missingFields.join(', ')}.`, 'Warning');
                return;
            }

            // Show confirmation modal
            addBookConfirmationModal.show();
            document.getElementById('addBookForm')._currentSubmitEvent = event;
            // form._currentSubmitEvent = event;

            // Store the current form event for later use after confirmation
            // document.getElementById('addBookForm')._currentSubmitEvent = event;
        });


        document.getElementById('confirmAddBookAction').addEventListener('click', async () => {
            addBookConfirmationModal.hide(); // Hide the confirmation modal

            const form = document.getElementById('addBookForm');

            const submitButton = form.querySelector('.book-master-submit-button');

            console.log(form)
            @* const submitButton = form.querySelector('.add-book-submit-button'); *@

            const coverImageFile = document.getElementById('coverImageFile').files[0];
            const bookFile = document.getElementById('bookFile').files[0];

            const coverUploadStatus = document.getElementById('coverUploadStatus');
            const bookFileUploadStatus = document.getElementById('bookFileUploadStatus');
            const coverImageUrlInput = document.getElementById('coverImageUrl');
            const bookFileUrlInput = document.getElementById('bookFileUrl');

            // Save initial state for rollback if backend fails
            const originalCoverImageUrl = coverImageUrlInput.value;
            const originalBookFileUrl = bookFileUrlInput.value;

            // Clear previous status messages (reset to default)
            // coverUploadStatus.textContent = 'Max file size: 1GB &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Supported formats: JPG, PNG, JPEG';
            // bookFileUploadStatus.textContent = 'Max file size: 1GB &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Supported formats: PDF, EPUB.';
            coverUploadStatus.querySelector('.file-size-info').textContent = 'Max file size: 1GB';
            coverUploadStatus.querySelector('.supported-formats-info').textContent = 'Supported formats: JPG, PNG, JPEG';
            coverUploadStatus.classList.remove('error-message');

            bookFileUploadStatus.querySelector('.file-size-info').textContent = 'Max file size: 1GB';
            bookFileUploadStatus.querySelector('.supported-formats-info').textContent = 'Supported formats: PDF, EPUB.';
            bookFileUploadStatus.classList.remove('error-message');


            // Disable submit button and change text
            submitButton.disabled = true;
            submitButton.textContent = 'Processing...';

            let uploadedCoverUrl = null;
            let uploadedBookUrl = null;

            try {
                // Handle Cover Image Upload
                if (coverImageFile) {
                    coverUploadStatus.querySelector('.file-size-info').textContent = 'Uploading cover image...'; 
                    uploadedCoverUrl = await uploadFileToFirebase(coverImageFile, 'book_covers/', coverUploadStatus.querySelector('.file-size-info'));
                    if (uploadedCoverUrl) {
                        coverImageUrlInput.value = uploadedCoverUrl;
                    } else {
                        throw new Error('Cover image upload failed.');
                    }
                }

                // Handle Book File Upload
                if (bookFile) {
                    bookFileUploadStatus.querySelector('.file-size-info').textContent = 'Uploading book file...';
                    uploadedBookUrl = await uploadFileToFirebase(bookFile, 'book_files/', bookFileUploadStatus.querySelector('.file-size-info')); 
                    if (uploadedBookUrl) {
                        bookFileUrlInput.value = uploadedBookUrl;
                    } else {
                        throw new Error('Book file upload failed.');
                    }
                }
            

                const formData = new FormData(form); 
                //console.log(formData)

                const response = await fetch(form.action, {
                    method: form.method,
                    body: formData
                });

                if (response.ok) {
                     showStatusModal('Book added successfully!', 'Success');
                } else {
                    const errorData = await response.json(); 
                    showStatusModal(`Server error: ${errorData.message || response.statusText}`, 'Error');

                    if (uploadedCoverUrl && uploadedCoverUrl !== originalCoverImageUrl) {
                        await deleteFileFromFirebase(uploadedCoverUrl);
                    }
                    if (uploadedBookUrl && uploadedBookUrl !== originalBookFileUrl) {
                        await deleteFileFromFirebase(uploadedBookUrl);
                    }
                }

            } catch (error) {
                console.error('Submission error:', error);
                showStatusModal(`An unexpected error occurred during file upload or form submission: ${error.message}. Please try again.`, 'Error');

                // Rollback: delete uploaded files from Firebase
                if (uploadedCoverUrl && uploadedCoverUrl !== originalCoverImageUrl) {
                    await deleteFileFromFirebase(uploadedCoverUrl);
                }
                if (uploadedBookUrl && uploadedBookUrl !== originalBookFileUrl) {
                    await deleteFileFromFirebase(uploadedBookUrl);
                }

            } finally {
                submitButton.disabled = false;
                submitButton.textContent = 'ADD BOOK';
            }
        });
    </script>
}

