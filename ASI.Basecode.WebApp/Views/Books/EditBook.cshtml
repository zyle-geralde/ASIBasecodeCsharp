@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@model ASI.Basecode.Services.ServiceModels.BookViewModel;

@{
    ViewData["Title"] = "Edit Book";
    Layout = "_AdminSidebarLayout";

    var editBookConfirmationModel = new ConfirmationModalModel
            {
                Id = "editBookConfirmationModal",
                Title = "Edit Book Confirmation",
                Message = "Are you sure you want to save changes to this book?",
                CancelButtonText = "Cancel",
                ConfirmButtonText = "Save Changes",
                ConfirmButtonId = "confirmEditAction",
                ConfirmButtonClass = "btn-primary px-4"
            };

    var discardChangesConfirmationModel = new ConfirmationModalModel
            {
                Id = "discardChangesConfirmationModal",
                Title = "Discard Changes?",
                Message = "You have unsaved changes. Are you sure you want to discard them?",
                CancelButtonText = "Keep Editing",
                ConfirmButtonText = "Discard",
                ConfirmButtonId = "confirmDiscardAction",
                ConfirmButtonClass = "btn-danger px-4"
            };
}

@section styles {
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css" />
    <link rel="stylesheet" href="~/css/admin/books/bookmaster.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/admin/common.css" asp-append-version="true" />
}


<div class="admin-common-container">
    <div class="admin-common-content-wrapper">
        <div class="header-section">
            <h1>Edit Book</h1>
            <p>Enter details of the book here.</p>
        </div>

        <div asp-validation-summary="ModelOnly" class="validation-summary-errors"></div>

        <form asp-action="EditBook" asp-controller="Book" method="post" enctype="multipart/form-data" id="editBookForm">
            <input type="hidden" asp-for="BookId" />
            <input type="hidden" id="coverImageUrl" name="CoverImageUrl" value="@Model?.CoverImageUrl">
            <input type="hidden" id="bookFileUrl" name="BookFileUrl" value="@Model?.BookFileUrl">
            <input type="hidden" id="hiddenAuthor" value="@Model.Author">
            <input type="hidden" id="hiddenLanguage" value="@Model.Language">


            <div class="content-master-grid">
                <div class="image-upload-section">
                    <h3 class="book-master-form-section-title">Cover Image Upload</h3>
                    <div class="image-preview-container">
                        <img id="coverImagePreview" src="@Model?.CoverImageUrl" alt="Cover Image Preview" style="@(string.IsNullOrEmpty(Model?.CoverImageUrl) ? "display:none;" : "display:block;")">
                        <span id="coverImagePlaceholder" class="placeholder-text" style="@(string.IsNullOrEmpty(Model?.CoverImageUrl) ? "display:block;" : "display:none;")">No Image</span>
                    </div>
                    <input type="text" class="book-master-file-input-text" readonly id="coverFileNameDisplay" value="@(string.IsNullOrEmpty(Model?.CoverImageUrl) ? "" : Model.CoverImageUrl.Substring(Model.CoverImageUrl.LastIndexOf('/') + 1))">
                    <button type="button" class="master-browse-button" onclick="document.getElementById('coverImageFile').click();">BROWSE</button>
                    <input type="file" id="coverImageFile" accept="image/*" name="CoverImageFile" style="display: none;">

                    <p id="coverImageUploadStatus" class="master-upload-status">
                        <span class="file-size-info">Max file size: 10MB</span>
                        <span class="supported-formats-info">Supported formats: JPG, PNG, JPEG</span>
                    </p>
                </div>
                <div>
                    <div class="book-master-form-grid">
                        <div class="book-master-form-group">
                            <label for="title" class="required-label">Title</label>
                            <input type="text" id="title" name="Title" class="book-master-form-input" value="@Model?.Title" required>
                            <span asp-validation-for="Title" class="text-danger"></span>
                        </div>
                        <div class="book-master-form-group">
                            <label for="authorContainer" class="required-label">Author</label>
                            <div class="custom-multi-select" id="authorContainer">
                                <div class="custom-select-btn">
                                    <span>Select Author</span>
                                    <i class="fas fa-chevron-down"></i>
                                </div>
                                <div class="custom-dropdown" id="authorDropdown">
                                </div>
                            </div>
                            <input type="hidden" id="author" name="Author" value="@Model.Author">
                            <span asp-validation-for="Author" class="text-danger"></span>
                        </div>
                        <div class="book-master-form-group">
                            <label for="subtitle">Subtitle</label>
                            <input type="text" id="subtitle" name="Subtitle" class="book-master-form-input" value="@Model?.Subtitle">
                            <span asp-validation-for="Subtitle" class="text-danger"></span>
                        </div>

                        <div class="book-master-form-group">
                            <label for="publisher">Publisher</label>
                            <input type="text" id="publisher" name="Publisher" class="book-master-form-input" value="@Model?.Publisher">
                            <span asp-validation-for="Publisher" class="text-danger"></span>
                        </div>

                        <div class="book-master-form-group">
                            <label for="publicationDate" class="required-label">Publication Date</label>
                            <div class="book-master-date-input-wrapper">
                                <input type="date" id="publicationDate" name="PublicationDate" class="book-master-form-input" value="@(Model?.PublicationDate?.ToString("yyyy-MM-dd"))" />
                            </div>
                            <span asp-validation-for="PublicationDate" class="text-danger"></span>
                        </div>
                        <div class="book-master-form-group">
                            <label for="publicationLocation">Publication Location</label>
                            <input type="text" id="publicationLocation" name="PublicationLocation" class="book-master-form-input" value="@Model?.PublicationLocation">
                            <span asp-validation-for="PublicationLocation" class="text-danger"></span>
                        </div>
                        <div class="book-master-form-group">
                            <label for="languageContainer" class="required-label">Language</label>
                            <div class="custom-multi-select" id="languageContainer">
                                <div class="custom-select-btn">
                                    <span>Select Language</span>
                                    <i class="fas fa-chevron-down"></i>
                                </div>
                                <div class="custom-dropdown" id="languageDropdown">
                                </div>
                            </div>
                            <input type="hidden" id="language" name="Language" value="@Model.Language">
                            <span asp-validation-for="Language" class="text-danger"></span>
                        </div>
                        <div class="book-master-form-group">
                            <label for="numberOfPages">Number of Pages</label>
                            <input type="number" id="numberOfPages" name="NumberOfPages" class="book-master-form-input" value="@Model?.NumberOfPages">
                            <span asp-validation-for="NumberOfPages" class="text-danger"></span>
                        </div>
                    </div>

                    <div class="book-master-form-group full-width-description">
                        <label for="description">Description</label>
                        <textarea id="description" name="Description" class="book-master-form-textarea">@Model?.Description</textarea>
                        <span asp-validation-for="Description" class="text-danger"></span>
                    </div>

                    <div class="book-master-form-grid">
                        <div class="book-master-form-group">
                            <label for="seriesName">Series Name</label>
                            <input type="text" id="seriesName" name="SeriesName" class="book-master-form-input" value="@Model?.SeriesName">
                            <span asp-validation-for="SeriesName" class="text-danger"></span>
                        </div>
                        <div class="book-master-form-group">
                            <label for="seriesOrder">Series Order</label>
                            <input type="number" id="seriesOrder" name="SeriesOrder" class="book-master-form-input" value="@Model?.SeriesOrder">
                            <span asp-validation-for="SeriesOrder" class="text-danger"></span>
                        </div>
                    </div>

                    <div class="book-master-form-group full-width-description">
                        <label for="seriesDescription">Series Description</label>
                        <textarea id="seriesDescription" name="SeriesDescription" class="book-master-form-textarea">@Model?.SeriesDescription</textarea>
                        <span asp-validation-for="SeriesDescription" class="text-danger"></span>
                    </div>

                    <div class="book-master-form-group">
                        <label class="toggle-question-label">Is this a featured book?</label>
                        <div class="featured-toggle-container">
                            <label class="switch">
                                <input type="checkbox" id="isFeatured" name="IsFeatured" value="true" @(Model?.IsFeatured == true ? "checked" : "")>
                                <span class="slider round"></span>
                            </label>
                            <span class="toggle-label" id="featuredStatus">@(Model?.IsFeatured == true ? "Yes" : "No")</span>
                        </div>
                        <span asp-validation-for="IsFeatured" class="text-danger"></span>
                    </div>
                </div>
            </div>

            <h3 class="book-master-form-section-title">Categorization</h3>
            <div class="book-master-form-grid">
                <div class="book-master-form-group">
                    <label for="genreContainer" class="required-label">Genre</label>
                    <div class="custom-multi-select" id="genreContainer">
                        <div class="custom-select-btn">
                            <span>Select Genre</span>
                            <i class="fas fa-chevron-down"></i>
                        </div>
                        <div class="custom-dropdown" id="genreDropdown"></div>
                    </div>
                    <div id="selectedGenres" class="selected-tags"></div>
                    <input type="hidden" id="concatenatedGenre" name="GenreList" value="@Model?.GenreList" />
                    <span asp-validation-for="GenreList" class="text-danger"></span>
                </div>
                <div class="book-master-form-group">
                    <label for="isbn10">ISBN10</label>
                    <input type="text" id="isbn10" name="ISBN10" class="book-master-form-input" value="@Model?.ISBN10">
                    <span asp-validation-for="ISBN10" class="text-danger"></span>
                </div>
                <div class="book-master-form-group">
                    <label for="isbn13">ISBN13</label>
                    <input type="text" id="isbn13" name="ISBN13" class="book-master-form-input" value="@Model?.ISBN13">
                    <span asp-validation-for="ISBN13" class="text-danger"></span>
                </div>
                <div class="book-master-form-group">
                    <label for="edition">Edition</label>
                    <input type="text" id="edition" name="Edition" class="book-master-form-input" value="@Model?.Edition">
                    <span asp-validation-for="Edition" class="text-danger"></span>
                </div>
            </div>

            <h3 class="book-master-form-section-title">Book File Upload (e.g., PDF)</h3>
            <div class="book-master-form-group book-master-form-grid-span-2">
                <label class="required-label">Current Book File:</label>
                @if (!string.IsNullOrEmpty(Model?.BookFileUrl) && !Model.BookFileUrl.Contains("placeholder.pdf"))
                {
                    <a href="@Model.BookFileUrl" target="_blank" class="book-master-view-file-link">View Current Book File</a>
                }
                <label for="bookFile" class="required-label">Select New Book File</label>
                <div class="book-master-file-upload-wrapper">
                    <input type="text" class="book-master-file-input-text" readonly id="bookFileNameDisplay" value="@(string.IsNullOrEmpty(Model?.BookFileUrl) ? "" : Model.BookFileUrl.Substring(Model.BookFileUrl.LastIndexOf('/') + 1))">
                    <input type="file" id="bookFile" accept=".pdf,.epub" name="BookFile" style="display: none;">
                    <button type="button" class="book-master-browse-button" onclick="document.getElementById('bookFile').click();">BROWSE</button>
                </div>
                <p id="bookFileUploadStatus" class="book-master-upload-status">
                    <span class="file-size-info">Max file size: 100MB</span>
                    <span class="supported-formats-info">Supported formats: PDF, EPUB</span>
                </p>
            </div>

            <div class="button-container">
                @* <button type="button" class="cancel-button" onclick="location.href='/Book/ListBook'">CANCEL</button> *@
                <button type="button" class="cancel-button" id="cancelButton">CANCEL</button>
                <button type="submit" class="book-master-submit-button" id="editBookButton">SAVE CHANGES</button>
            </div>
        </form>
    </div>
</div>

<partial name="_ConfirmationModal" model="editBookConfirmationModel" />
<partial name="_ConfirmationModal" model="discardChangesConfirmationModel" />


@section scripts {
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="//cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js"></script>

    <script type="module">
        import { initializeFeaturedToggle } from "/js/common/_slider.js";
        import { deleteFileFromFirebase, uploadFileToFirebase, updateImagePreview } from "/js/common/_firebase.js";
        import { initializeSingleSelectAuthor, initializeSingleSelectLanguage, initializeMultiSelect } from "/js/common/_selectInitializer.js";

        // Track initial form state
        let initialFormState = {};

        // capture the initial state of the form fields
        function captureInitialFormState() {
            const form = document.getElementById('editBookForm');
            if (!form) return;

            initialFormState = {
                title: form.querySelector('#title').value,
                author: form.querySelector('#author').value,
                subtitle: form.querySelector('#subtitle').value,
                publisher: form.querySelector('#publisher').value,
                publicationDate: form.querySelector('#publicationDate').value,
                publicationLocation: form.querySelector('#publicationLocation').value,
                language: form.querySelector('#language').value,
                numberOfPages: form.querySelector('#numberOfPages').value,
                description: form.querySelector('#description').value,
                seriesName: form.querySelector('#seriesName').value,
                seriesOrder: form.querySelector('#seriesOrder').value,
                seriesDescription: form.querySelector('#seriesDescription').value,
                isFeatured: form.querySelector('#isFeatured').checked,
                genreList: form.querySelector('#concatenatedGenre').value,
                isbn10: form.querySelector('#isbn10').value,
                isbn13: form.querySelector('#isbn13').value,
                edition: form.querySelector('#edition').value,
                coverImageUrl: form.querySelector('#coverImageUrl').value, // initial URL of the cover image
                bookFileUrl: form.querySelector('#bookFileUrl').value      // initial URL of the book file
            };
        }

       
        function checkForChanges() {
            const form = document.getElementById('editBookForm');
            if (!form) return false;

            const currentCoverFileSelected = document.getElementById('coverImageFile').files.length > 0;
            const currentBookFileSelected = document.getElementById('bookFile').files.length > 0;

            const currentCoverImageUrl = form.querySelector('#coverImageUrl').value;
            const currentBookFileUrl = form.querySelector('#bookFileUrl').value;

            // Compare all non-file input values with their initial states
            if (
                form.querySelector('#title').value !== initialFormState.title ||
                form.querySelector('#author').value !== initialFormState.author ||
                form.querySelector('#subtitle').value !== initialFormState.subtitle ||
                form.querySelector('#publisher').value !== initialFormState.publisher ||
                form.querySelector('#publicationDate').value !== initialFormState.publicationDate ||
                form.querySelector('#publicationLocation').value !== initialFormState.publicationLocation ||
                form.querySelector('#language').value !== initialFormState.language ||
                form.querySelector('#numberOfPages').value !== initialFormState.numberOfPages ||
                form.querySelector('#description').value !== initialFormState.description ||
                form.querySelector('#seriesName').value !== initialFormState.seriesName ||
                form.querySelector('#seriesOrder').value !== initialFormState.seriesOrder ||
                form.querySelector('#seriesDescription').value !== initialFormState.seriesDescription ||
                form.querySelector('#isFeatured').checked !== initialFormState.isFeatured ||
                form.querySelector('#concatenatedGenre').value !== initialFormState.genreList ||
                form.querySelector('#isbn10').value !== initialFormState.isbn10 ||
                form.querySelector('#isbn13').value !== initialFormState.isbn13 ||
                form.querySelector('#edition').value !== initialFormState.edition
            ) {
                return true; // Changes detected in text/select fields
            }

            if (currentCoverFileSelected || currentBookFileSelected) {
                return true; // New files are selected
            }

            if (currentCoverImageUrl !== initialFormState.coverImageUrl ||
                currentBookFileUrl !== initialFormState.bookFileUrl) {
                return true; 
            }

            return false; 
        }

        document.addEventListener('DOMContentLoaded', async () => {
            const MAX_IMAGE_FILE_SIZE_BYTES = 10 * 1024 * 1024;
            const MAX_BOOK_FILE_SIZE_BYTES = 100 * 1024 * 1024;

            // Get all elements
            const coverImageFile = document.getElementById('coverImageFile');
            const coverImagePreview = document.getElementById('coverImagePreview');
            const coverImagePlaceholder = document.getElementById('coverImagePlaceholder');
            const coverFileNameDisplay = document.getElementById('coverFileNameDisplay');
            const coverImageUploadStatus = document.getElementById('coverImageUploadStatus');

            const bookFile = document.getElementById('bookFile');
            const bookFileNameDisplay = document.getElementById('bookFileNameDisplay');
            const bookFileUploadStatus = document.getElementById('bookFileUploadStatus');

            const publicationDateInput = document.getElementById('publicationDate');

            // file inputs
            if (coverImageFile) {
                coverImageFile.addEventListener('change', function () {
                    const fileName = this.files[0] ? this.files[0].name : '';
                    if (coverFileNameDisplay) coverFileNameDisplay.value = fileName;
                    if (coverImageUploadStatus) {
                        coverImageUploadStatus.querySelector('.file-size-info').textContent = `Max file size: ${MAX_IMAGE_FILE_SIZE_BYTES / (1024 * 1024)}MB`;
                        coverImageUploadStatus.querySelector('.supported-formats-info').textContent = 'Supported formats: JPG, PNG, JPEG';
                        coverImageUploadStatus.classList.remove('error-message');
                    }
                    updateImagePreview(this.files[0], coverImagePreview, coverImagePlaceholder, coverFileNameDisplay);
                });
            }

            if (bookFile) {
                bookFile.addEventListener('change', function () {
                    const fileName = this.files[0] ? this.files[0].name : '';
                    if (bookFileNameDisplay) bookFileNameDisplay.value = fileName;
                    if (bookFileUploadStatus) {
                        bookFileUploadStatus.querySelector('.file-size-info').textContent = `Max file size: ${MAX_BOOK_FILE_SIZE_BYTES / (1024 * 1024)}MB`;
                        bookFileUploadStatus.querySelector('.supported-formats-info').textContent = 'Supported formats: PDF, EPUB.';
                        bookFileUploadStatus.classList.remove('error-message');
                    }
                });
            }

            // date picker
            if (publicationDateInput) {
                publicationDateInput.addEventListener('click', () => {
                    publicationDateInput.showPicker();
                });
            }

            //  Pre-fill File Display and Image Preview with existing data 
            // Cover Image
            const coverImageUrl = '@Model?.CoverImageUrl';
            if (coverImageUrl && coverImagePreview && coverImagePlaceholder && coverFileNameDisplay) {
                if (!coverImageUrl.includes("placeholder.jpg")) { // Avoid showing placeholder as actual image
                    coverImagePreview.src = coverImageUrl;
                    coverImagePreview.style.display = 'block';
                    coverImagePlaceholder.style.display = 'none';
                    coverFileNameDisplay.value = coverImageUrl.substring(coverImageUrl.lastIndexOf('/') + 1);
                }
            }

            // Book File
            const bookFileUrl = '@Model?.BookFileUrl';
            if (bookFileUrl && bookFileNameDisplay && !bookFileUrl.includes("placeholder.pdf")) { 
                bookFileNameDisplay.value = bookFileUrl.substring(bookFileUrl.lastIndexOf('/') + 1);
            }

            // Initialize all the modular functions 
            initializeFeaturedToggle();
            await initializeSingleSelectAuthor(); // Await because it fetches data
            await initializeSingleSelectLanguage(); // Await
            await initializeMultiSelect({ // Await
                containerId: 'genreContainer',
                dropdownId: 'genreDropdown',
                hiddenInputId: 'concatenatedGenre',
                selectedContainerId: 'selectedGenres',
                fetchUrl: '/Book/GetGenre',
                placeholderText: 'Select Genre',
                fallbackItems: [
                    'Fiction,Fiction', 'Science Fiction,ScienceFiction', 'Fantasy,Fantasy',
                    'Thriller,Thriller', 'Mystery,Mystery', 'Romance,Romance', 'Horror,Horror',
                    'Biography,Biography', 'History,History', 'Cookbook,Cookbook', 'Poetry,Poetry'
                ],
                itemType: 'genre'
            });

            captureInitialFormState();

            const editBookConfirmationModalElement = document.getElementById('@editBookConfirmationModel.Id');
            const confirmSaveButton = document.getElementById('@editBookConfirmationModel.ConfirmButtonId');
            const editBookConfirmationModal = editBookConfirmationModalElement ? new bootstrap.Modal(editBookConfirmationModalElement) : null;

            const discardChangesConfirmationModalElement = document.getElementById('discardChangesConfirmationModal');
            const confirmDiscardButton = document.getElementById('confirmDiscardAction');
            const discardChangesConfirmationModal = discardChangesConfirmationModalElement ? new bootstrap.Modal(discardChangesConfirmationModalElement) : null;


            const form = document.getElementById('editBookForm');

            // Cancel Button (with Discard Confirmation) ---
            document.getElementById('cancelButton').addEventListener('click', () => {
                if (checkForChanges()) {
                    // Show discard confirmation modal if changes exist
                    if (discardChangesConfirmationModal) {
                        discardChangesConfirmationModal.show();
                    }
                } else {
                    window.location.href = '/Book/ListBook';
                }
            });

            // Confirm Discard Action 
            if (confirmDiscardButton) {
                confirmDiscardButton.addEventListener('click', () => {
                    window.location.href = '/Book/ListBook';
                });
            }

            // Form Submission(with Save Confirmation) 
            if (form) {
                form.addEventListener('submit', async (event) => {
                    event.preventDefault(); // Prevent default form submission

                    //  client-side validation first
                    const titleInput = document.getElementById('title');
                    const authorInput = document.getElementById('author');
                    const publicationDateInput = document.getElementById('publicationDate');
                    const languageInput = document.getElementById('language');
                    const genreInput = document.getElementById('concatenatedGenre');
                    const coverImageFileInput = document.getElementById('coverImageFile');
                    const bookFileInput = document.getElementById('bookFile');
                    const coverImageUrlInput = document.getElementById('coverImageUrl');
                    const bookFileUrlInput = document.getElementById('bookFileUrl');
                    const coverImageUploadStatus = document.getElementById('coverImageUploadStatus');
                    const bookFileUploadStatus = document.getElementById('bookFileUploadStatus');

                    let isValid = true;
                    const missingFields = [];

                    // Validation checks 
                    if (!titleInput.value.trim()) { missingFields.push('Title'); titleInput.classList.add('is-invalid'); isValid = false; } else { titleInput.classList.remove('is-invalid'); }
                    if (!authorInput.value.trim()) { missingFields.push('Author'); document.getElementById('authorContainer').querySelector('.custom-select-btn').classList.add('is-invalid-select'); isValid = false; } else { document.getElementById('authorContainer').querySelector('.custom-select-btn').classList.remove('is-invalid-select'); }
                    if (!publicationDateInput.value) { missingFields.push('Publication Date'); publicationDateInput.classList.add('is-invalid'); isValid = false; } else { publicationDateInput.classList.remove('is-invalid'); }

                    const today = new Date();
                    today.setHours(0, 0, 0, 0);
                    const pubDate = new Date(publicationDateInput.value);

                    if (pubDate > today) { missingFields.push('Publication Date (cannot be in the future)'); publicationDateInput.classList.add('is-invalid'); isValid = false; } else { publicationDateInput.classList.remove('is-invalid'); }
                    if (!languageInput.value.trim()) { missingFields.push('Language'); document.getElementById('languageContainer').querySelector('.custom-select-btn').classList.add('is-invalid-select'); isValid = false; } else { document.getElementById('languageContainer').querySelector('.custom-select-btn').classList.remove('is-invalid-select'); }
                    if (!genreInput.value) { missingFields.push('Genre'); document.getElementById('genreContainer').querySelector('.custom-select-btn').classList.add('is-invalid-select'); isValid = false; } else { document.getElementById('genreContainer').querySelector('.custom-select-btn').classList.remove('is-invalid-select'); }

                    const coverImageFileChanged = coverImageFileInput.files.length > 0;
                    if (!coverImageFileChanged && !coverImageUrlInput.value) {
                        missingFields.push('Cover Image');
                        if (coverImageUploadStatus) {
                            coverImageUploadStatus.querySelector('.file-size-info').textContent = 'Cover image is required.';
                            coverImageUploadStatus.classList.add('error-message');
                        }
                        isValid = false;
                    } else if (coverImageFileChanged && coverImageFileInput.files[0].size > MAX_IMAGE_FILE_SIZE_BYTES) {
                        toastr.error('Cover image file size exceeds the 10MB limit.');
                        isValid = false;
                    } else if (coverImageUploadStatus) {
                        coverImageUploadStatus.querySelector('.file-size-info').textContent = `Max file size: ${MAX_IMAGE_FILE_SIZE_BYTES / (1024 * 1024)}MB`;
                        coverImageUploadStatus.classList.remove('error-message');
                    }

                    const bookFileChanged = bookFileInput.files.length > 0;
                    if (!bookFileChanged && !bookFileUrlInput.value) {
                        missingFields.push('Book File');
                        if (bookFileUploadStatus) {
                            bookFileUploadStatus.querySelector('.file-size-info').textContent = 'Book file is required.';
                            bookFileUploadStatus.classList.add('error-message');
                        }
                        isValid = false;
                    } else if (bookFileChanged && bookFileInput.files[0].size > MAX_BOOK_FILE_SIZE_BYTES) {
                        toastr.error('Book file size exceeds the 100MB limit.');
                        isValid = false;
                    }
                    else if (bookFileUploadStatus) {
                        bookFileUploadStatus.querySelector('.file-size-info').textContent = `Max file size: ${MAX_BOOK_FILE_SIZE_BYTES / (1024 * 1024)}MB`;
                        bookFileUploadStatus.classList.remove('error-message');
                    }

                    if (!isValid) {
                        if (window.toastr) window.toastr.warning(`Please fill in all required fields. Missing: ${missingFields.join(', ')}.`);
                        return; // Stop here if client-side validation fails
                    }

                    // If client-side validation passed, show confirmation modal
                    if (editBookConfirmationModal) {
                        editBookConfirmationModal.show();
                    } else {
                        // Fallback if modal isn't initialized (shouldn't happen with bootstrap.Modal checks)
                        await submitFormContents();
                    }
                });
            }

            // --- Confirm Save Action Event Listener ---
            if (confirmSaveButton) {
                confirmSaveButton.addEventListener('click', async () => {
                    if (editBookConfirmationModal) {
                        editBookConfirmationModal.hide(); // Hide the confirmation modal
                    }
                    await submitFormContents(); // Call the actual submission function
                });
            }

            // --- Main Form Submission Logic (extracted into a function) ---
            async function submitFormContents() {
                const form = document.getElementById('editBookForm');
                const submitButton = form.querySelector('.book-master-submit-button');
                const coverImageFileInput = document.getElementById('coverImageFile');
                const bookFileInput = document.getElementById('bookFile');
                const coverImageUrlInput = document.getElementById('coverImageUrl');
                const bookFileUrlInput = document.getElementById('bookFileUrl');
                const coverImageUploadStatus = document.getElementById('coverImageUploadStatus');
                const bookFileUploadStatus = document.getElementById('bookFileUploadStatus');

                // Get original URLs from initialFormState, not current input values
                const originalCoverImageUrl = initialFormState.coverImageUrl;
                const originalBookFileUrl = initialFormState.bookFileUrl;

                submitButton.disabled = true;
                submitButton.textContent = 'Processing...';

                let uploadedCoverUrl = null;
                let uploadedBookUrl = null;

                try {
                    // --- Cover Image Upload Logic ---
                    const coverImageFile = coverImageFileInput ? coverImageFileInput.files[0] : null;
                    if (coverImageFile) {
                        // Delete old image from Firebase if it's not a placeholder
                        if (originalCoverImageUrl && !originalCoverImageUrl.includes("placeholder.jpg")) {
                            await deleteFileFromFirebase(originalCoverImageUrl);
                        }

                        if (coverImageUploadStatus) {
                            const statusElement = coverImageUploadStatus.querySelector('.file-size-info');
                            if (statusElement) { statusElement.textContent = 'Uploading cover image...'; }
                        }
                        // Upload new image
                        uploadedCoverUrl = await uploadFileToFirebase(coverImageFile, 'book_covers/', coverImageUploadStatus ? coverImageUploadStatus.querySelector('.file-size-info') : null);
                        if (!uploadedCoverUrl) {
                            // If upload fails/cancelled, re-enable button and return
                            toastr.error("Cover image upload failed or was cancelled.");
                            submitButton.disabled = false;
                            submitButton.textContent = 'SAVE CHANGES';
                            return;
                        }
                        // Update hidden input with new URL
                        if (uploadedCoverUrl && coverImageUrlInput) { coverImageUrlInput.value = uploadedCoverUrl; }
                    }

                    // --- Book File Upload Logic ---
                    const bookFile = bookFileInput ? bookFileInput.files[0] : null;
                    if (bookFile) {
                        // Delete old file from Firebase if it's not a placeholder
                        if (originalBookFileUrl && !originalBookFileUrl.includes("placeholder.pdf")) {
                            await deleteFileFromFirebase(originalBookFileUrl);
                        }

                        if (bookFileUploadStatus) {
                            const statusElement = bookFileUploadStatus.querySelector('.file-size-info');
                            if (statusElement) { statusElement.textContent = 'Uploading book file...'; }
                        }
                        // Upload new file
                        uploadedBookUrl = await uploadFileToFirebase(bookFile, 'book_files/', bookFileUploadStatus ? bookFileUploadStatus.querySelector('.file-size-info') : null);
                        if (!uploadedBookUrl) {
                            // If upload fails/cancelled, re-enable button and return
                            toastr.error("Book file upload failed or was cancelled.");
                            submitButton.disabled = false;
                            submitButton.textContent = 'SAVE CHANGES';
                            return;
                        }
                        // Update hidden input with new URL
                        if (uploadedBookUrl && bookFileUrlInput) { bookFileUrlInput.value = uploadedBookUrl; }
                    }

                    // --- Prepare FormData and Submit to Backend ---
                    const formData = new FormData(form);

                    // Ensure number fields are sent as "0" if empty (as per your original logic)
                    const numberFields = ['NumberOfPages', 'Likes', 'AverageRating', 'SeriesOrder']; // Assuming Likes/AverageRating are part of the model if needed
                    for (const fieldName of numberFields) {
                        const fieldValue = formData.get(fieldName);
                        if (fieldValue === "" || fieldValue === null) {
                            formData.set(fieldName, "0");
                        }
                    }

                    const response = await fetch(form.action, {
                        method: form.method,
                        body: formData
                    });

                    if (response.ok) {
                        if (window.toastr) window.toastr.success('Book updated successfully!');
                        // Re-capture initial state after successful save
                        captureInitialFormState();
                        setTimeout(() => {
                            window.location.href = '/Book/ListBook';
                        }, 1500);
                    } else {
                        const errorData = await response.json();
                        const errorMessage = JSON.stringify(errorData.errors || errorData.message || "An unknown error occurred on the server.");
                        if (window.toastr) window.toastr.error(`Server error: ${errorMessage}`);

                        // If new cover different from original, delete the new one
                        if (uploadedCoverUrl && uploadedCoverUrl !== originalCoverImageUrl) {
                            await deleteFileFromFirebase(uploadedCoverUrl);
                            coverImageUrlInput.value = originalCoverImageUrl; // original url
                        }
                        // If new book file different from original, delete the new one
                        if (uploadedBookUrl && uploadedBookUrl !== originalBookFileUrl) {
                            await deleteFileFromFirebase(uploadedBookUrl);
                            bookFileUrlInput.value = originalBookFileUrl; 
                        }
                    }
                } catch (error) {
                    console.error('Submission error:', error);
                    if (window.toastr) window.toastr.error(`An unexpected error occurred during file upload or form submission: ${error.message}. Please try again.`, 'Error');

                    if (uploadedCoverUrl && uploadedCoverUrl !== originalCoverImageUrl) {
                        await deleteFileFromFirebase(uploadedCoverUrl);
                        coverImageUrlInput.value = originalCoverImageUrl;
                    }
                    if (uploadedBookUrl && uploadedBookUrl !== originalBookFileUrl) {
                        await deleteFileFromFirebase(uploadedBookUrl);
                        bookFileUrlInput.value = originalBookFileUrl;
                    }
                } finally {
                    submitButton.disabled = false;
                    submitButton.textContent = 'SAVE CHANGES';
                }
            }
        });
    </script>
}