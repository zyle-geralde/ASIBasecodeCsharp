@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@model ASI.Basecode.Services.ServiceModels.BookViewModel;

@{
    ViewData["Title"] = "EditBook";
    Layout = "_AdminSidebarLayout";
}

@section styles {
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" />
    <link rel="stylesheet" href="~/css/admin/books/addbook.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/admin/common.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/admin/books/editbook.css" asp-append-version="true" />
}


<div class="edit-book-container">
    <div class="admin-common-content-wrapper">
        <div class="header-section">
            <h1>Edit Book</h1>
            <p>Enter details of the book here.</p>
        </div>

        <form id="editBookForm" asp-action="EditBook">
            <input type="hidden" asp-for="BookId" />
            <input type="hidden" id="coverImageUrl" name="CoverImageUrl" asp-for="CoverImageUrl">
            <input type="hidden" id="bookFileUrl" name="BookFileUrl" asp-for="BookFileUrl">
            <input type = "hidden" id="hiddenAuthor" value="@Model.Author">

            <div class="edit-book-image-and-fields-section">
                <div class="edit-book-cover-and-browse">
                    <img src="@Model.CoverImageUrl" id="existingCoverImage" class="edit-book-existing-cover-image" alt="Book Cover" />
                    <input type="file" id="coverImageFile" accept="image/*" class="edit-book-file-input-hidden" aria-label="Upload Cover Image">
                    <label for="coverImageFile" class="edit-book-browse-button">BROWSE</label>
                    @* <input type="text" id="coverFileNameDisplay" class="edit-book-file-name-display" readonly placeholder="No file chosen"> *@
                    <p id="coverUploadStatus" class="edit-book-upload-status"></p>
                </div>

                <div class="edit-book-main-input-grid">
                    <div class="edit-book-form-group">
                        <label for="title">Title</label>
                        <input type="text" id="title" name="Title" required asp-for="Title" class="edit-book-input">
                    </div>
                    @*<div class="edit-book-form-group">
                        <label for="author">Author</label>
                        <input type="text" id="author" name="Author" asp-for="Author" class="edit-book-input">
                    </div>*@

                    <div class="book-master-form-group">
                        <label for="author">Author</label>
                        <select id="author" name="Author" class="book-master-form-select">

                        </select>
                    </div>
                    <div class="edit-book-form-group">
                        <label for="isbn10">ISBN</label>
                        <input type="text" id="isbn10" name="ISBN10" asp-for="ISBN10" class="edit-book-input">
                    </div>

                    <div class="edit-book-form-group">
                        <label for="languageContainer" class="required-label">Language</label>
                        <div class="custom-multi-select" id="languageContainer">
                            <div class="custom-select-btn">
                                <span>Select Language</span>
                                <i class="fas fa-chevron-down"></i>
                            </div>
                            <div class="custom-dropdown" id="languageDropdown">
                            </div>
                        </div>
                        <div id="selectedLanguages" class="selected-tags"></div>
                        <input type="hidden" id="concatenatedLanguage" name="Language" value="@Model?.Language" />
                    </div>

                    <div class="edit-book-form-group">
                        <label for="genreContainer" class="required-label">Genre</label>
                        <div class="custom-multi-select" id="genreContainer">
                            <div class="custom-select-btn">
                                <span>Select Genre</span>
                                <i class="fas fa-chevron-down"></i>
                            </div>
                            <div class="custom-dropdown" id="genreDropdown">
                            </div>
                        </div>
                        <div id="selectedGenres" class="selected-tags"></div>
                        <input type="hidden" id="concatenatedGenre" name="GenreList" value="@Model?.GenreList" />
                    </div>


                    <div class="edit-book-form-group">
                        <label for="isbn13">ISBN13:</label>
                        <input type="text" id="isbnthitheen" name="ISBN13" asp-for="ISBN13" class="edit-book-input">
                    </div>
                    <div class="edit-book-form-group">
                        <label for="subtitle">Subtitle:</label>
                        <input type="text" id="subtitle" name="Subtitle" asp-for="Subtitle" class="edit-book-input">
                    </div>
                    <div class="edit-book-form-group">
                        <label for="edition">Edition:</label>
                        <input type="text" id="edition" name="Edition" asp-for="Edition" class="edit-book-input">
                    </div>
                    <div class="edit-book-form-group">
                        <label for="seriesName">Series Name:</label>
                        <input type="text" id="seriesName" name="SeriesName" asp-for="SeriesName" class="edit-book-input">
                    </div>
                    <div class="edit-book-form-group">
                        <label for="seriesOrder">Series Order:</label>
                        <input type="number" id="seriesOrder" name="SeriesOrder" asp-for="SeriesOrder" class="edit-book-input">
                    </div>
                    <div class="edit-book-form-group edit-book-full-width">
                        <label for="seriesDescription">Series Description:</label>
                        <textarea id="seriesDescription" name="SeriesDescription" asp-for="SeriesDescription" class="edit-book-textarea"></textarea>
                    </div>

                    <div class="book-master-form-group">
                        <label for="IsFeatured">Featured Book</label>
                        <input type="checkbox" id="isFeatured" name="IsFeatured" value="true" @(Model?.IsFeatured == true?"checked":"")>
                        <span asp-validation-for="IsFeatured" class="text-danger"></span>
                    </div>
                </div>
            </div>

            <h3 class="edit-book-section-heading">Details</h3>
            <div class="edit-book-details-grid">
                <div class="edit-book-form-group edit-book-date-group">
                    <label for="publicationDate">Published Date</label>
                    <input type="date" id="publicationDate" name="PublicationDate" asp-for="PublicationDate" class="edit-book-input edit-book-date-input">

                </div>
                <div class="edit-book-form-group">
                    <label for="numberOfPages">Pages</label>
                    <input type="number" id="numberOfPages" name="NumberOfPages" asp-for="NumberOfPages" class="edit-book-input">
                </div>
                @* <div class="edit-book-form-group">
                    <label for="secondaryLanguage">Language</label>
                    <select id="secondaryLanguage" name="SecondaryLanguage" class="edit-book-select">
                        <option value="">Select language</option>
                        <option value="English">English</option>
                        <option value="Filipino">Filipino</option>
                        <option value="Spanish">Spanish</option>
                    </select>
                </div> *@
                <div class="edit-book-form-group">
                    <label for="publisher">Published by</label>
                    <input type="text" id="publisher" name="Publisher" asp-for="Publisher" class="edit-book-input">
                </div>


                <div class="edit-book-form-group">
                    <label for="publicationLocation">Publication Location:</label>
                    <input type="text" id="publicationLocation" name="PublicationLocation" asp-for="PublicationLocation" class="edit-book-input">
                </div>
            </div>

            <div class="edit-book-form-group edit-book-full-width edit-book-summary-group">
                <label for="description">Summary</label>
                <textarea id="description" name="Description" asp-for="Description" class="edit-book-textarea"></textarea>
            </div>


            <div class="edit-book-book-file-upload-section">
                <h3 class="edit-book-section-heading">Book File Upload (e.g., PDF)</h3>
                <a href="@Model.BookFileUrl" target="_blank" id="existingBookFile" class="edit-book-existing-file-link">Open Book</a>
                <div class="edit-book-form-group edit-book-full-width">
                    <label for="bookFile">Select Book File:</label>
                    <input type="file" id="bookFile" accept=".pdf,.epub" class="edit-book-file-input">
                    @* <input type="text" id="bookFileNameDisplay" class="edit-book-file-name-display" readonly placeholder="No file chosen"> *@
                    <p id="bookFileUploadStatus" class="edit-book-upload-status" style="color: gray;"></p>
                </div>
            </div>

            <div class="edit-book-button-group">
                <button type="button" class="edit-book-cancel-button" onclick="location.href='/Book/ListBook';">CANCEL</button>

                <button type="button" class="edit-book-save-changes-button" data-bs-toggle="modal" data-bs-target="#confirmationModal">SAVE CHANGES</button>
            </div>
        </form>
    </div>
</div>

<div class="modal fade confirmation-modal" id="confirmationModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header border-0">
                <h5 class="modal-title" id="deleteModalLabel">Edit Confirmation</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body text-center">
                <p class="mb-4">Are you sure you want to edit this item?</p>
                <div class="d-flex justify-content-center gap-2">
                    <button type="button" class="btn btn-secondary px-4" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-danger px-4" id="confirmEditAction">Edit</button>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="modal fade success-modal" id="successModal" tabindex="-1" aria-labelledby="successModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-body text-center py-4">
                <div class="success-icon mb-3">
                    <i class="fas fa-check"></i>
                </div>
                <h5 class="modal-title mb-2">Editted!</h5>
                <p class="mb-4">Book Editted successfully!</p>
                <button type="button" class="btn btn-secondary px-4" data-bs-dismiss="modal">OK</button>
            </div>
        </div>
    </div>
</div>




@section scripts {
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
    <script type="module">

        const authorSelect = document.getElementById('author');

        //Setting Up Author
         try {
            const response = await fetch('/Book/GetAuthor', {
                method: 'GET'
            });

            if (response.ok) {
                const result = await response.json();
                const author_list = result.message


                //Add a default "Select Author" option 
                const default_option = document.createElement('option');
                default_option.value = ""
                default_option.textContent = "Select Author"
                authorSelect.appendChild(default_option)
                const authorName= document.getElementById('hiddenAuthor')

                //Add elements of the author_list to the select tag
                author_list.forEach(author_name_id => {
                    const parts = author_name_id.split(',');
                    console.log("Hello")
                    console.log(author_name_id)

                    const option = document.createElement('option');
                    option.value = parts[1].trim();
                    option.textContent = parts[0].trim();
                    


                    if(authorName.value && authorName.value.trim() != "" && authorName.value.trim() == parts[1].trim())
                    {
                        option.selected = true;
                    }
                     

                    authorSelect.appendChild(option);
                })
            } else {
                alert("Server error")
            }
        } catch (backendError) {
            alert("Unexpected Error Occured"+backendError)
        }


        // reusable function to initialize multi-select dropdowns with preselected items (for genre and language dropdowns)
        async function initializeMultiSelectWithPreselected({
            containerId,
            dropdownId,
            hiddenInputId,
            selectedContainerId,
            fetchUrl,
            placeholderText = 'Select Items',
            fallbackItems = null,
            itemType 
        }) {
            const selectButton = document.querySelector(`#${containerId} .custom-select-btn`);
            const dropdown = document.getElementById(dropdownId);
            const selectedContainer = document.getElementById(selectedContainerId);
            const hiddenInput = document.getElementById(hiddenInputId);

            selectButton.querySelector('span').textContent = placeholderText;

            selectButton.addEventListener('click', (event) => {
                event.stopPropagation(); 
                dropdown.classList.toggle('show');
            });

            document.addEventListener('click', (event) => {
                if (!selectButton.contains(event.target) && !dropdown.contains(event.target)) {
                    dropdown.classList.remove('show');
                }
            });

            function addSelectedTag(itemText, itemValue) {
                const tag = document.createElement('div');
                tag.className = `selected-tag ${itemType}-tag`; 
                tag.innerHTML = `
                            ${itemText}
                            <span class="remove-tag" data-value="${itemValue}" data-type="${itemType}">×</span>
                        `;
                selectedContainer.appendChild(tag);

                tag.querySelector('.remove-tag').addEventListener('click', () => {
                    tag.remove();
                    const checkbox = dropdown.querySelector(`input[value="${itemValue}"]`);
                    if (checkbox) checkbox.checked = false;
                    updateHiddenInput();
                });
            }

            // hidden input with selected values
            function updateHiddenInput() {
                const selectedCheckboxes = Array.from(dropdown.querySelectorAll('input[type="checkbox"]:checked'));
                const selectedValues = selectedCheckboxes.map(checkbox => checkbox.value);
                hiddenInput.value = selectedValues.join(',');
            }

            // checkbox changes
            dropdown.addEventListener('change', (event) => {
                if (event.target.type === 'checkbox') {
                    selectedContainer.innerHTML = '';
                    const selectedCheckboxes = Array.from(dropdown.querySelectorAll('input[type="checkbox"]:checked'));
                    selectedCheckboxes.forEach(checkbox => {
                        const label = dropdown.querySelector(`label[for="${checkbox.id}"]`).textContent;
                        addSelectedTag(label, checkbox.value);
                    });
                    updateHiddenInput();
                }
            });

            // Fetch and populate items
            try {
                const response = await fetch(fetchUrl, { method: 'GET' });
                let itemsToPopulate = [];

                if (response.ok) {
                    const result = await response.json();
                    itemsToPopulate = result.message;
                } else if (fallbackItems) {
                    console.warn(`Failed to fetch from ${fetchUrl}, using fallback items.`);
                    itemsToPopulate = fallbackItems;
                } else {
                    console.error(`Server error fetching data from ${fetchUrl} and no fallback provided.`);
                    return;
                }

                // Populate dropdown with checkboxes
                itemsToPopulate.forEach(item => {
                    const parts = item.split(',');
                    const itemName = parts[0].trim();
                    const itemValue = parts[1].trim();
                    const optionDiv = document.createElement('div');
                    optionDiv.className = 'dropdown-item';
                    optionDiv.innerHTML = `
                                <input type="checkbox" value="${itemValue}" id="${dropdownId}-${itemValue}">
                                <label for="${dropdownId}-${itemValue}">${itemName}</label>
                            `;
                    dropdown.appendChild(optionDiv);
                });

                // Restore previously selected items from hidden input and create tags
                if (hiddenInput.value) {
                    const preselectedValues = hiddenInput.value.split(',').map(v => v.trim());
                    Array.from(dropdown.querySelectorAll('input[type="checkbox"]')).forEach(checkbox => {
                        if (preselectedValues.includes(checkbox.value)) {
                            checkbox.checked = true;
                            const label = dropdown.querySelector(`label[for="${checkbox.id}"]`).textContent;
                            addSelectedTag(label, checkbox.value);
                        }
                    });
                }

            } catch (error) {
                console.error(`Error initializing dropdown for ${containerId}:`, error);
                if (fallbackItems) {
                    console.warn(`Using fallback items for ${containerId} due to fetch error.`);
                    // fallback if fetch fails
                    fallbackItems.forEach(item => {
                        const parts = item.split(',');
                        const itemName = parts[0].trim();
                        const itemValue = parts[1].trim();
                        const optionDiv = document.createElement('div');
                        optionDiv.className = 'dropdown-item';
                        optionDiv.innerHTML = `
                                    <input type="checkbox" value="${itemValue}" id="${dropdownId}-${itemValue}">
                                    <label for="${dropdownId}-${itemValue}">${itemName}</label>
                                `;
                        dropdown.appendChild(optionDiv);
                    });
                    // Restore values for fallback items
                    if (hiddenInput.value) {
                        const preselectedValues = hiddenInput.value.split(',').map(v => v.trim());
                        Array.from(dropdown.querySelectorAll('input[type="checkbox"]')).forEach(checkbox => {
                            if (preselectedValues.includes(checkbox.value)) {
                                checkbox.checked = true;
                                const label = dropdown.querySelector(`label[for="${checkbox.id}"]`).textContent;
                                addSelectedTag(label, checkbox.value);
                            }
                        });
                    }
                } else {
                    showStatusModal(`Failed to load items for ${placeholderText}. Please try again.`, 'Error');
                }
            }
        }

        initializeMultiSelectWithPreselected({
            containerId: 'genreContainer',
            dropdownId: 'genreDropdown',
            hiddenInputId: 'concatenatedGenre',
            selectedContainerId: 'selectedGenres',
            fetchUrl: '/Book/GetGenre',
            placeholderText: 'Select Genre',
            fallbackItems: [
                'Fiction,Fiction', 'Science Fiction,ScienceFiction', 'Fantasy,Fantasy',
                'Thriller,Thriller', 'Mystery,Mystery', 'Romance,Romance', 'Horror,Horror',
                'Biography,Biography', 'History,History', 'Cookbook,Cookbook', 'Poetry,Poetry'
            ],
            itemType: 'genre'
        });
        

        initializeMultiSelectWithPreselected({
            containerId: 'languageContainer',
            dropdownId: 'languageDropdown',
            hiddenInputId: 'concatenatedLanguage', 
            selectedContainerId: 'selectedLanguages',
            fetchUrl: '/Book/GetLanguage', 
            placeholderText: 'Select Language',
            fallbackItems: [
                'English,English', 'Tagalog,Tagalog', 'Bisaya,Bisaya',
                'Spanish,Spanish', 'French,French', 'German,German', 'Japanese,Japanese'
            ],
            itemType: 'language'
        });

        // const genreSelect = document.getElementById('genre');
        // const concatenatedGenreInput = document.getElementById('concatenatedGenre');

        // //Setting Up Genres
        // try {
        //     const response = await fetch('/Book/GetGenre', {
        //         method: 'GET'
        //     });

        //     if (response.ok) {
        //         const result = await response.json();
        //         const genre_list = result.message
        //         console.log(genre_list)

        //         // Add a default "Select Genre" option
        //         const default_option = document.createElement('option');
        //         default_option.value = ""
        //         default_option.textContent = "Select Genre"
        //         genreSelect.appendChild(default_option)

        //         //convert genrelist from commaseparated string to a list
        //         const commaSeparatedGenre = concatenatedGenreInput.value;
        //         const genreArray = commaSeparatedGenre.split(',').map(item => item.trim().toLowerCase()).filter(item => item !== '');
        //         console.log(genreArray)

        //         //Add elements of the genre_list to the select tag
        //         genre_list.forEach(genre_name_id => {
        //             const parts = genre_name_id.split(',');
        //             console.log("Hello")
        //             console.log(genre_name_id)

        //             const option = document.createElement('option');
        //             option.value = parts[1].trim();
        //             option.textContent = parts[0].trim();

        //             if (genreArray.includes(parts[1].trim().toLowerCase())) {
        //                 option.selected = true;
        //             }

        //             genreSelect.appendChild(option);
        //         })
        //     } else {
        //         alert("Server error")
        //     }
        // } catch (backendError) {
        //     alert("Unexpected Error Occured")
        // }

        // function updateConcatenatedGenre() {
        //     const selectedOptions = Array.from(genreSelect.options).filter(option => option.selected);
        //     const selectedGenres = selectedOptions.map(option => option.value);
        //     concatenatedGenreInput.value = selectedGenres.join(',');
        // }

        // //Listener - call updateConcatinedtGenre everytime the selected genre changes
        // genreSelect.addEventListener('change', updateConcatenatedGenre);


        document.getElementById('coverImageFile').addEventListener('change', function () {
            const fileName = this.files[0] ? this.files[0].name : 'No file selected';
        });

        document.getElementById('bookFile').addEventListener('change', function () {
            const fileName = this.files[0] ? this.files[0].name : 'No file selected';
        });


        // Your Firebase configuration
        //Transfer this secretes into AnalyserNode env or file, and include it in gitignore.
        const firebaseConfig = {
            apiKey: "AIzaSyA4CTMSbgGQN_yLn9lEZlswbZ_2A2Xhl0k",
            authDomain: "basabuzz-ca8fe.firebaseapp.com",
            projectId: "basabuzz-ca8fe",
            storageBucket: "basabuzz-ca8fe.firebasestorage.app",
            messagingSenderId: "206533484485",
            appId: "1:206533484485:web:2c71a06a17d5244efe75ac"
        };

        // Initialize Firebase
        import { initializeApp } from "https://www.gstatic.com/firebasejs/11.9.1/firebase-app.js";
        import { getStorage, ref, uploadBytesResumable, getDownloadURL, deleteObject } from "https://www.gstatic.com/firebasejs/11.9.1/firebase-storage.js";

        const app = initializeApp(firebaseConfig);
        const storage = getStorage(app);

        async function deleteFileFromFirebase(fileUrl) {
            if (!fileUrl) {
                console.warn("Attempted to delete null or empty file URL.");
                return;
            }
            try {
                //Get a reference to the file from the download URL
                const fileRef = ref(storage, fileUrl);
                await deleteObject(fileRef);
                console.log(`Successfully deleted file: ${fileUrl}`);
            } catch (error) {
                alert(`Failed to delete file ${fileUrl}:`, error)
                console.error(`Failed to delete file ${fileUrl}:`, error);
            }
        }

        async function deleteCoverUrlFromError(coverUrlCopy, coverUploadStatusCopy) {
            if (coverUrlCopy) {
                await deleteFileFromFirebase(coverUrlCopy);
                coverUploadStatusCopy.textContent = 'Cover image upload rolled back due to backend error.';
            }
            else {
                alert("No cover Url")
            }
        }

        async function deleteBookUrlFromError(bookFileUploadStatusCopy, bookUrlCopy) {
            if (bookUrlCopy) {
                await deleteFileFromFirebase(bookUrlCopy);
                bookFileUploadStatusCopy.textContent = 'Book file upload rolled back due to backend error.';
            }
            else {
                alert("No book Url")
            }
        }

        async function deleteCoverUrl(coverUrlCopy) {
            if (coverUrlCopy) {
                await deleteFileFromFirebase(coverUrlCopy);
            }
            else {
                alert("No cover Url")
            }
        }

        async function deleteBookUrl(bookUrlCopy) {
            if (bookUrlCopy) {
                await deleteFileFromFirebase(bookUrlCopy);
            }
            else {
                alert("No book Url")
            }
        }

        //Firebase Upload Function
        //This function returns the download URL or null on failure/no file
        async function uploadFileToFirebase(file, path, statusElement) {
            if (!file) {
                statusElement.textContent = 'No file selected.';
                return null; //Indicates no file was provided
            }

            //Generate New File Name
            const timestamp = new Date().getTime();
            const randomString = Math.random().toString(36).substring(2, 8);
            const uniqueFileName = `${timestamp}-${randomString}-${file.name}`;

            const storageRef = ref(storage, path + uniqueFileName);
            const uploadTask = uploadBytesResumable(storageRef, file);

            return new Promise((resolve, reject) => {
                uploadTask.on('state_changed',
                    (snapshot) => {
                        const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;
                        statusElement.textContent = `Upload is ${progress.toFixed(2)}% done`;
                    },
                    (error) => {
                        statusElement.textContent = `Upload failed: ${error.message}`;
                        console.error("Upload error:", error);
                        reject(error); //Reject the promise on upload error
                    },
                    async () => {
                        try {
                            const downloadURL = await getDownloadURL(uploadTask.snapshot.ref);
                            statusElement.textContent = 'Upload successful!';
                            resolve(downloadURL); //Resolve with the download URL
                        } catch (error) {
                            statusElement.textContent = `Failed to get download URL: ${error.message}`;
                            console.error("Get Download URL error:", error);
                            reject(error); //Reject the promise if getting URL fails
                        }
                    }
                );
            });
        }

        //Form Submission Logic
    document.getElementById('confirmEditAction').addEventListener('click', async (event) => {
        event.preventDefault(); //Prevent default form submission initially

        const form = document.getElementById('editBookForm'); // Get the form directly
        const coverImageFile = document.getElementById('coverImageFile').files[0];
        const bookFile = document.getElementById('bookFile').files[0];

        const coverUploadStatus = document.getElementById('coverUploadStatus');
        const bookFileUploadStatus = document.getElementById('bookFileUploadStatus');
        const coverImageUrlInput = document.getElementById('coverImageUrl');
        const bookFileUrlInput = document.getElementById('bookFileUrl');
        const existingCoverImage = document.getElementById('existingCoverImage');
        const existingBookFile = document.getElementById('existingBookFile');

        //Indicated whether a new cover or book is uploaded
        let isCoverUploaded = false
        let isBookUploaded = false

        //cover and book url added from add book
        //will be used to delete the previous url if a new one is added.
        const coverImageFromAddBook = existingCoverImage.src
        const bookFilFromAddBook = existingBookFile.getAttribute('href');

        //holds the current Url uploaded
        let coverUrlHold = existingCoverImage.src
        let bookUrlHold = existingBookFile.getAttribute('href');

        // Clear previous status messages
        coverUploadStatus.textContent = '';
        bookFileUploadStatus.textContent = '';

        //Upload files to Firebase
        try {
            if (coverImageFile) {
                coverUploadStatus.textContent = 'Uploading cover image...';
                const coverUrl = await uploadFileToFirebase(coverImageFile, 'book_covers/', coverUploadStatus);
                if (!coverUrl) {
                    alert('Cover image upload failed or was cancelled.'); // You might want to use a modal here too for failed uploads
                    return;
                }
                coverImageUrlInput.value = coverUrl;
                coverUrlHold = coverUrl;
                isCoverUploaded = true
            }

            if (bookFile) {
                // Display initial upload status
                bookFileUploadStatus.textContent = 'Uploading book file...';
                const bookUrl = await uploadFileToFirebase(bookFile, 'book_files/', bookFileUploadStatus);

                if (!bookUrl) {
                    alert('Book file upload failed or was cancelled.'); // You might want to use a modal here too for failed uploads
                    return;
                }

                //Set hidden field with obtained URL
                bookFileUrlInput.value = bookUrl;
                //Set hold variable
                bookUrlHold = bookUrl
                isBookUploaded = true
            }

        } catch (uploadError) {
            alert('File upload to Firebase failed.'); // You might want to use a modal here too for failed uploads
            console.error('Firebase upload error during form submission:', uploadError);
            return;
        }

        
        //Concatinate genrelist then update on and input field
        // updateConcatenatedGenre()

        // Proceed with form data submission to backend
        const formData = new FormData(form);

        // Convert FormData to a plain JavaScript object
        /*const bookData = {};
        for (const [key, value] of formData.entries()) {
            if (key === 'PublicationDate') {
                console.log("Pulication run")
                bookData[key] = value === "" ? null : value;
            }
            else if (key === 'NumberOfPages' || key === 'Likes' || key === 'AverageRating' || key == "SeriesOrder") {
                //Use the unary plus operator (+) to convert to number.
                bookData[key] = +value || 0;
            } else {
                bookData[key] = value;
            }
        }*/

        const publicationDateValue = formData.get('PublicationDate');

        // Process number fields (NumberOfPages, Likes, AverageRating, SeriesOrder)
        const numberFields = ['NumberOfPages', 'Likes', 'AverageRating', 'SeriesOrder'];
        for (const fieldName of numberFields) {
            const fieldValue = formData.get(fieldName);
            if (fieldValue === "" || fieldValue === null) {
                formData.set(fieldName, "0"); // Set it explicitly as the string "0"
            }
        }

        // Handling of Api
        try {
            const response = await fetch('/Book/EditBook', {
                method: 'POST',
                body: formData
            });

            if (response.ok) {
                const result = await response.json();
                // alert(result.Message || "Book edited successfully!");
                // Show success modal
                const successModal = new bootstrap.Modal(document.getElementById('successModal'));
                // Reset success modal content in case it was used for an error previously
                document.querySelector('#successModal .modal-title').textContent = 'Editted!';
                document.querySelector('#successModal .modal-body p').textContent = 'Book Editted successfully!';
                document.querySelector('#successModal .success-icon').innerHTML = '<i class="fas fa-check"></i>'; 
                successModal.show();
                // Hide confirmation modal if it's still open
                const confirmationModal = bootstrap.Modal.getInstance(document.getElementById('confirmationModal'));
                if (confirmationModal) {
                    confirmationModal.hide();
                }

                // Set up a listener for when the success modal is hidden
                document.getElementById('successModal').addEventListener('hidden.bs.modal', async () => { 
                    form.reset(); // Clear the form fields
                    // Reset upload status messages and hidden URLs
                    coverUploadStatus.textContent = '';
                    bookFileUploadStatus.textContent = '';
                    coverImageUrlInput.value = '';
                    bookFileUrlInput.value = '';
                    if (isCoverUploaded) {
                        await deleteCoverUrl(coverImageFromAddBook);
                    }
                    if (isBookUploaded) {
                        await deleteBookUrl(bookFilFromAddBook);
                    }
                    window.location.href = "/Book/ListBook";
                }, { once: true }); // Ensure the listener is removed after it's called once

            } else {
                const errorData = await response.json();
                // Check for 'errors' property for validation messages from ASP.NET Core
                
                const errorMessage = JSON.stringify(errorData.errors || errorData.Message || "An unknown error occurred on the server.");
                document.querySelector('#successModal .modal-title').textContent = 'Error!';
                document.querySelector('#successModal .modal-body p').textContent = `Failed to edit book: ${errorMessage}`;
                document.querySelector('#successModal .success-icon').innerHTML = '<i class="fas fa-times" style="color: #dc3545;"></i>'; 
                const successModal = new bootstrap.Modal(document.getElementById('successModal'));
                successModal.show();

                console.error('Backend error details:', errorData);

                if (isCoverUploaded) {
                    await deleteCoverUrlFromError(coverUrlHold, coverUploadStatus);
                }
                if (isBookUploaded) {
                    await deleteBookUrlFromError(bookFileUploadStatus, bookUrlHold);
                }
            }
        } catch (backendError) {
            console.error('Network or unexpected error during backend submission:', backendError);
            
            document.querySelector('#successModal .modal-title').textContent = 'Error!';
            document.querySelector('#successModal .modal-body p').textContent = 'An unexpected error occurred while saving book data. Please try again.';
            document.querySelector('#successModal .success-icon').innerHTML = '<i class="fas fa-times" style="color: #dc3545;"></i>'; 
            const successModal = new bootstrap.Modal(document.getElementById('successModal'));
            successModal.show();

            if (isCoverUploaded) {
                await deleteCoverUrlFromError(coverUrlHold, coverUploadStatus);
            }
            if (isBookUploaded) {
                await deleteBookUrlFromError(bookFileUploadStatus, bookUrlHold);
            }
        }
    });

    </script>
}
