@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@model ASI.Basecode.Data.Models.Book;
@{
    ViewData["Title"] = "EditBook";
    Layout = "_AdminSidebarLayout";
}

@section styles {
    <link rel="stylesheet" href="~/css/add-book.css" asp-append-version="true" />
}


    @* @Html.Partial("_AdminSidebarLayout") *@


    @* <div class="main-content"> *@
        <div class="add-book-container">
            <h1 class="add-book-form-title">Edit Book</h1>
            <p class="add-book-form-subtitle">Enter details of the new book here.</p>

            <form id="addBookForm" asp-action="EditBook">
                <div class="add-book-form-grid">
                    <div class="add-book-form-group">
                        <label for="title" class="add-book-form-label">Title:</label>
                        <input type="text" id="title" name="Title" class="add-book-form-input" asp-for="Title" required>
                    </div>
                    <!--<div class="add-book-form-group">
                        <label for="subtitle" class="add-book-form-label">Subtitle:</label>
                        <input type="text" id="subtitle" name="Subtitle" class="add-book-form-input">
                    </div>
                    <div class="add-book-form-group">
                        <label for="publicationDate" class="add-book-form-label">Publication Date:</label>
                        <div class="add-book-date-input-wrapper">
                            <input type="date" id="publicationDate" name="PublicationDate" class="add-book-form-input">
                            <svg class="add-book-date-input-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h.01M17 11h.01M7 15h.01M17 15h.01M12 18h.01M3 21h18a2 2 0 002-2V7a2 2 0 00-2-2H3a2 2 0 00-2 2v12a2 2 0 002 2z"></path></svg>
                        </div>
                    </div>
                    <div class="add-book-form-group">
                        <label for="publisher" class="add-book-form-label">Publisher:</label>
                        <input type="text" id="publisher" name="Publisher" class="add-book-form-input">
                    </div>
                    <div class="add-book-form-group">
                        <label for="publicationLocation" class="add-book-form-label">Publication Location:</label>
                        <input type="text" id="publicationLocation" name="PublicationLocation" class="add-book-form-input">
                    </div>
                    <div class="add-book-form-group">
                        <label for="description" class="add-book-form-label">Description:</label>
                        <textarea id="description" name="Description" class="add-book-form-textarea"></textarea>
                    </div>
                    <div class="add-book-form-group">
                        <label for="numberOfPages" class="add-book-form-label">Number of Pages:</label>
                        <input type="number" id="numberOfPages" name="NumberOfPages" class="add-book-form-input">
                    </div>
                    <div class="add-book-form-group">
                        <label for="language" class="add-book-form-label">Language:</label>
                        <input type="text" id="language" name="Language" class="add-book-form-input">
                    </div>
                    <div class="add-book-form-group">
                        <label for="seriesName" class="add-book-form-label">Series Name:</label>
                        <input type="text" id="seriesName" name="SeriesName" class="add-book-form-input">
                    </div>
                    <div class="add-book-form-group">
                        <label for="seriesOrder" class="add-book-form-label">Series Order:</label>
                           <input type="number" id="seriesOrder" name="SeriesOrder" class="add-book-form-input">
                    </div>
                    <div class="add-book-form-group">
                        <label for="seriesDescription" class="add-book-form-label">Series Description:</label>
                        <textarea id="seriesDescription" name="SeriesDescription" class="add-book-form-textarea"></textarea>
                    </div>
                    <div class="add-book-form-group add-book-form-grid-span-2">
                        <label for="author" class="add-book-form-label">Author (comma-separated):</label>
                        <input type="text" id="author" name="Author" class="add-book-form-input">
                    </div>
                </div>

                <h3 class="add-book-form-section-title">Categorization</h3>
                <div class="add-book-form-grid">
                    <div class="add-book-form-group">
                        <label for="genre" class="add-book-form-label">Genre:</label>
                        <select id="genre" name="Genre" class="add-book-form-select">
                            <option value="">Select Genre</option>
                            <option value="Fiction">Fiction</option>
                            <option value="Fantasy">Fantasy</option>
                            <option value="Science Fiction">Science Fiction</option>
                            <option value="Thriller">Thriller</option>
                            <option value="Mystery">Mystery</option>
                            <option value="Biography">Biography</option>
                            <option value="History">History</option>
                        </select>
                    </div>
                    <div class="add-book-form-group">
                        <label for="subgenre" class="add-book-form-label">Subgenre (comma-separated):</label>
                        <input type="text" id="subgenre" name="Subgenre" class="add-book-form-input" placeholder="e.g., Contemporary, Philosophical Fiction">
                    </div>
                    <div class="add-book-form-group">
                        <label for="audience" class="add-book-form-label">Audience:</label>
                        <select id="audience" name="Audience" class="add-book-form-select">
                            <option value="">Select Audience</option>
                            <option value="Adult">Adult</option>
                            <option value="Young Adult">Young Adult</option>
                            <option value="Children">Children</option>
                        </select>
                    </div>
                    <div class="add-book-form-group">
                        <label for="isbn10" class="add-book-form-label">ISBN10:</label>
                        <input type="text" id="isbnten" name="ISBN10" class="add-book-form-input">
                    </div>
                    <div class="add-book-form-group">
                        <label for="isbn13" class="add-book-form-label">ISBN13:</label>
                        <input type="text" id="isbnthitheen" name="ISBN13" class="add-book-form-input">
                    </div class="add-book-form-group">
                    <div>
                        <label for="edition" class="add-book-form-label">Edition:</label>
                        <input type="text" id="edition" name="Edition" class="add-book-form-input">
                    </div>
                </div>

            <h3 class="add-book-form-section-title">Cover Image Upload</h3>
            <div class="add-book-form-group add-book-form-grid-span-2">
                <label for="coverImageFile" class="add-book-form-label">Select Cover Image:</label>
                <div class="add-book-file-upload-wrapper">
                    <input type="text" class="add-book-file-input-text" readonly id="coverFileNameDisplay" placeholder="Text">
                    <input type="file" id="coverImageFile" accept="image/*" name="CoverImageFile" style="display: none;" required>
                    <button type="button" class="add-book-browse-button" onclick="document.getElementById('coverImageFile').click();">BROWSE</button>
                </div>
                <p id="coverUploadStatus" class="add-book-upload-status">Max file size: 1GB &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Supported formats: JPG, PNG, JPEG</p>
                <input type="hidden" id="coverImageUrl" name="CoverImageUrl">
            </div>

            <h3 class="add-book-form-section-title">Book File Upload (e.g., PDF)</h3>
            <div class="add-book-form-group add-book-form-grid-span-2">
                <label for="bookFile" class="add-book-form-label">Select Book File:</label>
                <div class="add-book-file-upload-wrapper">
                    <input type="text" class="add-book-file-input-text" readonly id="bookFileNameDisplay" placeholder="Text">
                    <input type="file" id="bookFile" accept=".pdf,.epub" name="BookFile" style="display: none;" required>
                    <button type="button" class="add-book-browse-button" onclick="document.getElementById('bookFile').click();">BROWSE</button>
                </div>
                <p id="bookFileUploadStatus" class="add-book-upload-status">Max file size: 1GB &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Supported formats: PDF, EPUB.</p>
                <input type="hidden" id="bookFileUrl" name="BookFileUrl">
            </div>-->


                <button type="submit" class="add-book-submit-button">Edit Book</button>
            </form>
        </div>


<!--<script type="module">
    
    document.getElementById('coverImageFile').addEventListener('change', function () {
        const fileName = this.files[0] ? this.files[0].name : 'Text'; 
        document.getElementById('coverFileNameDisplay').value = fileName;
    });

    document.getElementById('bookFile').addEventListener('change', function () {
        const fileName = this.files[0] ? this.files[0].name : 'Text'; 
        document.getElementById('bookFileNameDisplay').value = fileName;
    });


    // Your Firebase configuration
    //Transfer this secretes into AnalyserNode env or file, and include it in gitignore.
    const firebaseConfig = {
        apiKey: "AIzaSyA4CTMSbgGQN_yLn9lEZlswbZ_2A2Xhl0k",
        authDomain: "basabuzz-ca8fe.firebaseapp.com",
        projectId: "basabuzz-ca8fe",
        storageBucket: "basabuzz-ca8fe.firebasestorage.app",
        messagingSenderId: "206533484485",
        appId: "1:206533484485:web:2c71a06a17d5244efe75ac"
    };

    // Initialize Firebase
    import { initializeApp } from "https://www.gstatic.com/firebasejs/11.9.1/firebase-app.js";
    import { getStorage, ref, uploadBytesResumable, getDownloadURL, deleteObject } from "https://www.gstatic.com/firebasejs/11.9.1/firebase-storage.js";

    const app = initializeApp(firebaseConfig);
    const storage = getStorage(app);

    async function deleteFileFromFirebase(fileUrl) {
        if (!fileUrl) {
            console.warn("Attempted to delete null or empty file URL.");
            return;
        }
        try {
            //Get a reference to the file from the download URL
            const fileRef = ref(storage, fileUrl);
            await deleteObject(fileRef);
            console.log(`Successfully deleted file: ${fileUrl}`);
        } catch (error) {
            alert(`Failed to delete file ${fileUrl}:`, error)
            console.error(`Failed to delete file ${fileUrl}:`, error);
        }
    }

    async function deleteUrlFromError(coverUrlCopy, coverUploadStatusCopy, bookFileUploadStatusCopy, bookUrlCopy) {
        if (coverUrlCopy) {
            await deleteFileFromFirebase(coverUrlCopy);
            coverUploadStatusCopy.textContent = 'Cover image upload rolled back due to backend error.';
        }
        else{
            alert("No cover Url")
        }
        if (bookUrlCopy) {
            await deleteFileFromFirebase(bookUrlCopy);
            bookFileUploadStatusCopy.textContent = 'Book file upload rolled back due to backend error.';
        }
        else{
            alert("No book Url")
        }
    }

    //Firebase Upload Function
    //This function returns the download URL or null on failure/no file
    async function uploadFileToFirebase(file, path, statusElement) {
        if (!file) {
            statusElement.textContent = 'No file selected.';
            return null; //Indicates no file was provided
        }

        //Generate New File Name
        const timestamp = new Date().getTime();
        const randomString = Math.random().toString(36).substring(2, 8);
        const uniqueFileName = `${timestamp}-${randomString}-${file.name}`;

        const storageRef = ref(storage, path + uniqueFileName);
        const uploadTask = uploadBytesResumable(storageRef, file);

        return new Promise((resolve, reject) => {
            uploadTask.on('state_changed',
                (snapshot) => {
                    const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;
                    statusElement.textContent = `Upload is ${progress.toFixed(2)}% done`;
                },
                (error) => {
                    statusElement.textContent = `Upload failed: ${error.message}`;
                    console.error("Upload error:", error);
                    reject(error); //Reject the promise on upload error
                },
                async () => {
                    try {
                        const downloadURL = await getDownloadURL(uploadTask.snapshot.ref);
                        statusElement.textContent = 'Upload successful!';
                        resolve(downloadURL); //Resolve with the download URL
                    } catch (error) {
                        statusElement.textContent = `Failed to get download URL: ${error.message}`;
                        console.error("Get Download URL error:", error);
                        reject(error); //Reject the promise if getting URL fails
                    }
                }
            );
        });
    }

    //Form Submission Logic
    document.getElementById('addBookForm').addEventListener('submit', async (event) => {
        event.preventDefault(); //Prevent default form submission initially

        const form = event.target;
        const coverImageFile = document.getElementById('coverImageFile').files[0];
        const bookFile = document.getElementById('bookFile').files[0];

        const coverUploadStatus = document.getElementById('coverUploadStatus');
        const bookFileUploadStatus = document.getElementById('bookFileUploadStatus');
        const coverImageUrlInput = document.getElementById('coverImageUrl');
        const bookFileUrlInput = document.getElementById('bookFileUrl');

        let coverUrlHold = ""
        let bookUrlHold = ""

        // Clear previous status messages
        coverUploadStatus.textContent = '';
        bookFileUploadStatus.textContent = '';
        coverImageUrlInput.value = '';
        bookFileUrlInput.value = '';

        //Validate if files are selected
        if (!coverImageFile) {
            alert('Please select a cover image file.');
            return;
        }
        if (!bookFile) {
            alert('Please select a book file.');
            return;
        }

        //Upload files to Firebase
        try {
            // Display initial upload status
            coverUploadStatus.textContent = 'Uploading cover image...';
            bookFileUploadStatus.textContent = 'Uploading book file...';

            const [coverUrl, bookUrl] = await Promise.all([
                uploadFileToFirebase(coverImageFile, 'book_covers/', coverUploadStatus),
                uploadFileToFirebase(bookFile, 'book_files/', bookFileUploadStatus)
            ]);

            //If any upload returned null or failed, the Promise.all would have rejected.
            if (!coverUrl) {
                alert('Cover image upload failed or was cancelled.');
                return;
            }
            if (!bookUrl) {
                alert('Book file upload failed or was cancelled.');
                return;
            }

            coverImageUrlInput.value = coverUrl; //Set hidden field with obtained URL
            bookFileUrlInput.value = bookUrl;   //Set hidden field with obtained URL
            coverUrlHold= coverUrl;//Set hold variable
            bookUrlHold= bookUrl//Set hold variable

        } catch (uploadError) {
            alert('File upload to Firebase failed.');
            console.error('Firebase upload error during form submission:', uploadError);
            return;
        }

        // Proceed with form data submission to backend
        const formData = new FormData(form);

        // Convert FormData to a plain JavaScript object
        const bookData = {};
        for (const [key, value] of formData.entries()) {
            if (key === 'NumberOfPages' || key === 'Likes' || key === 'AverageRating' || key == "SeriesOrder") {
                //Use the unary plus operator (+) to convert to number.
                bookData[key] = +value || 0;
            } else {
                bookData[key] = value;
            }
        }

        //Double-check URLs are populated
        if (!bookData.CoverImageUrl || !bookData.BookFileUrl) {
            alert('Internal error: File URLs not set after Firebase upload. Please try again.');
            return;
        }

        // Handling of Api
        try {
            const response = await fetch('/api/BookApi/add', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    // Add Authorization header if your backend API requires it. Needed if Admin Log In and Sign up will be implemented
                },
                body: JSON.stringify(bookData)
            });

            if (response.ok) {
                const result = await response.json();
                alert(result.Message || "Book added successfully!");
                form.reset(); // Clear the form fields
                // Reset upload status messages and hidden URLs
                coverUploadStatus.textContent = '';
                bookFileUploadStatus.textContent = '';
                coverImageUrlInput.value = '';
                bookFileUrlInput.value = '';
            } else {
                const errorData = await response.json();
                // Check for 'errors' property for validation messages from ASP.NET Core
                alert(`Error: ${JSON.stringify(errorData.errors || errorData.Message || "An unknown error occurred on the server.")}`);
                console.error('Backend error details:', errorData);

                await deleteUrlFromError(coverUrlHold, coverUploadStatus,  bookFileUploadStatus,bookUrlHold);
            }
        } catch (backendError) {
            console.error('Network or unexpected error during backend submission:', backendError);
            alert('An unexpected error occurred while saving book data. Please try again.');
            await deleteUrlFromError(coverUrlHold, coverUploadStatus, bookFileUploadStatus, bookUrlHold);
        }
    });
</script>-->
