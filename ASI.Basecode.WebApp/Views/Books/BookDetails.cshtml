@using System.Security.Claims
@model ASI.Basecode.Services.ServiceModels.BookViewModel;
@inject ASI.Basecode.WebApp.AccessControl.IAccessControlInterface AccessControl
@{
    var current_author_details = ViewBag.AuthorDetails as ASI.Basecode.Services.ServiceModels.AuthorViewModel;
    string authorImage = "";
    string authorName = "";
    string authorDesription = "";

    if (current_author_details != null)
    {
        authorImage = current_author_details?.AuthorImageUrl ?? ViewBag.AuthorDetails as string ?? "";
        authorName = current_author_details?.AuthorName ?? ViewBag.AuthorDetails as string ?? "";
        authorDesription = current_author_details?.AuthorDescription ?? ViewBag.AuthorDetails as string ?? "";
    }
}
@{
    ViewData["Title"] = "BookDetails";
    
    var isAdmin = await AccessControl.CheckAdminAccess();
    var currentUserId = User.Identity.IsAuthenticated ? User.FindFirstValue(ClaimTypes.NameIdentifier) : null;
    bool userHasReviewed = Model?.Reviews?.Any(r => r.UserId == currentUserId) ?? false;
    
    @if (isAdmin)
    {
        Layout = "_AdminSidebarLayout";
        <link rel="stylesheet" href="~/css/admin/adminsidebar.css" asp-append-version="true" />
    
        <style>
            .container
            {
                margin-top: 70px;
            }
        </style>
    }
    else
    {
        <style>
            .container
            {
                margin-top: 70px;
            }
        </style>
    }   
}

@section styles {
    <link rel="stylesheet" href="~/css/admin/book-details.css" asp-append-version="true" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/css/toastr.min.css">
    <link rel="stylesheet" href="~/css/userui/review.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/admin/books/bookdetails.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/admin/common.css" asp-append-version="true" />
}

<div class="book-details-page-wrapper">
    @if (Model != null)
    {
        <!-- Hero Section with Book Cover and Basic Info -->
        <div class="book-details-header">
            <div class="book-cover-header-container">
                @if (!string.IsNullOrWhiteSpace(Model.CoverImageUrl))
                {
                    <img src="@Model.CoverImageUrl" alt="Book Cover" class="header-book-cover-image" />
                }
                else
                {
                    <img src="/images/dummy-book-cover.png" alt="No Cover Available" class="header-book-cover-image dummy-cover" />
                }
            </div>

            <div class="book-header-info">
                <h1 class="book-header-title">@Html.DisplayFor(model => model.Title)</h1>
                <p class="book-header-author">by @Html.DisplayFor(model => model.Author)</p>

                <div class="book-header-tags" id="genre-tags">
                    <!-- Genres populated by JavaScript -->
                </div>
                <input type="hidden" id="concatenatedGenre" name="GenreList" value="@Model?.GenreList" />

                <div class="book-header-rating" id="bookHeaderRating">
                    <div class="stars header-stars" style="cursor: default">
                        <i class="far fa-star" data-rating="1" style="cursor: default"></i>
                        <i class="far fa-star" data-rating="2" style="cursor: default"></i>
                        <i class="far fa-star" data-rating="3" style="cursor: default"></i>
                        <i class="far fa-star" data-rating="4" style="cursor: default"></i>
                        <i class="far fa-star" data-rating="5" style="cursor: default"></i>
                    </div>

                                        <span class="rating-text">@Model.AverageRating?.ToString("0.00") / 5.0 (@Model.ReviewCount reviews)</span>


                </div>
            </div>

            <div class="book-header-actions">
                @if (!string.IsNullOrWhiteSpace(Model.BookFileUrl))
                {
                    <a href="@Model.BookFileUrl" target="_blank" class="view-book-file-button">
                        <i class="fas fa-book-reader mr-2"></i> View Book File
                    </a>
                }
            </div>
        </div>

        <!-- Table of Contents / Quick Jump -->
        <div class="book-details-container">
            <div class="book-toc">
                <h2 class="toc-title">Contents</h2>
                <div class="toc-links">
                    <a href="#description" class="toc-link">
                        <i class="fas fa-align-left"></i> Description
                    </a>
                    <a href="#details" class="toc-link">
                        <i class="fas fa-info-circle"></i> Details
                    </a>
                    @if (!string.IsNullOrWhiteSpace(Model.SeriesName) || Model.SeriesOrder.HasValue)
                    {
                        <a href="#series" class="toc-link">
                            <i class="fas fa-layer-group"></i> Series
                        </a>
                    }
                    <a href="#publishing" class="toc-link">
                        <i class="fas fa-book-open"></i> Publishing
                    </a>
                    <a href="#metadata" class="toc-link">
                        <i class="fas fa-tags"></i> Administrative
                    </a>
                    <a href="#reviews" class="toc-link">
                        <i class="fas fa-comments"></i> Reviews
                    </a>
                </div>
            </div>
            
            <!-- Description Section -->
            <section id="description" class="book-detail-section">
                <div class="section-header">
                    <div class="section-icon">
                        <i class="fas fa-align-left"></i>
                    </div>
                    <h2>Description</h2>
                </div>
                <div class="section-content">
                    <div class="book-description">
                        @Html.DisplayFor(model => model.Description)
                    </div>
                </div>
            </section>

            <!-- Book Details Section -->
            <section id="details" class="book-detail-section">
                <div class="section-header">
                    <div class="section-icon">
                        <i class="fas fa-info-circle"></i>
                    </div>
                    <h2>Book Details</h2>
                </div>
                <div class="section-content">
                    <div class="info-grid">
                        @if (!string.IsNullOrWhiteSpace(Model.Subtitle))
                        {
                            <div class="info-item">
                                <div class="info-label">
                                    <i class="fas fa-heading"></i> Subtitle
                                </div>
                                <div class="info-value">@Html.DisplayFor(model => model.Subtitle)</div>
                            </div>
                        }

                    

                        <div class="info-item">
                            <div class="info-label">
                                <i class="fas fa-language"></i> Language
                            </div>
                            <div class="info-value">
                                <input type="hidden" id="language-hidden" value="@Model.Language">
                                <span id="language-value"></span>
                            </div>
                        </div>

                        <div class="info-item">
                            <div class="info-label">
                                <i class="fas fa-file-alt"></i> Number of Pages
                            </div>
                            <div class="info-value">@Html.DisplayFor(model => model.NumberOfPages)</div>
                        </div>

                        <div class="info-item">
                            <div class="info-label">
                                <i class="fas fa-bookmark"></i> Edition
                            </div>
                            <div class="info-value">@Html.DisplayFor(model => model.Edition)</div>
                        </div>

                        <div class="info-item">
                            <div class="info-label">
                                <i class="fas fa-star-half-alt"></i> Average Rating
                            </div>
                            <div class="info-value">@Model.AverageRating?.ToString("0.0") / 5.0</div>
                        </div>                       

                        <div class="info-item">
                            <div class="info-label">
                                <i class="fas fa-star"></i> Featured Status
                            </div>
                            <div class="info-value">
                                @if (Model.IsFeatured.HasValue && Model.IsFeatured.Value)
                                {
                                    <span class="status-badge featured"><i class="fas fa-check-circle"></i> Featured</span>
                                }
                                else
                                {
                                    <span class="status-badge not-featured"><i class="fas fa-times-circle"></i> Not Featured</span>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </section>

            <!-- Series Section (if applicable) -->
            @if (!string.IsNullOrWhiteSpace(Model.SeriesName) || Model.SeriesOrder.HasValue)
            {
                <section id="series" class="book-detail-section">
                    <div class="section-header">
                        <div class="section-icon">
                            <i class="fas fa-layer-group"></i>
                        </div>
                        <h2>Series Information</h2>
                    </div>
                    <div class="section-content">
                        <div class="info-grid">
                            @if (!string.IsNullOrWhiteSpace(Model.SeriesName))
                            {
                                <div class="info-item">
                                    <div class="info-label">
                                        <i class="fas fa-layer-group"></i> Series Name
                                    </div>
                                    <div class="info-value">@Html.DisplayFor(model => model.SeriesName)</div>
                                </div>
                            }

                            @if (Model.SeriesOrder.HasValue)
                            {
                                <div class="info-item">
                                    <div class="info-label">
                                        <i class="fas fa-sort-numeric-down"></i> Series Order
                                    </div>
                                    <div class="info-value">@Html.DisplayFor(model => model.SeriesOrder)</div>
                                </div>
                            }
                        </div>
                        
                        @if (!string.IsNullOrWhiteSpace(Model.SeriesDescription))
                        {
                            <div class="series-description">
                                <h4><i class="fas fa-info-circle"></i> Series Description</h4>
                                <div class="description-content">
                                    @Html.DisplayFor(model => model.SeriesDescription)
                                </div>
                            </div>
                        }
                    </div>
                </section>
            }

            <!-- Publishing Information Section -->
            <section id="publishing" class="book-detail-section">
                <div class="section-header">
                    <div class="section-icon">
                        <i class="fas fa-book-open"></i>
                    </div>
                    <h2>Publishing Information</h2>
                </div>
                <div class="section-content">
                    <div class="info-grid">
                        <div class="info-item">
                            <div class="info-label">
                                <i class="fas fa-calendar-day"></i> Publication Date
                            </div>
                            <div class="info-value">@Model.PublicationDate?.ToString("MMMM dd, yyyy")</div>
                        </div>

                        <div class="info-item">
                            <div class="info-label">
                                <i class="fas fa-building"></i> Publisher
                            </div>
                            <div class="info-value">@Html.DisplayFor(model => model.Publisher)</div>
                        </div>

                        <div class="info-item">
                            <div class="info-label">
                                <i class="fas fa-map-marker-alt"></i> Publication Location
                            </div>
                            <div class="info-value">@Html.DisplayFor(model => model.PublicationLocation)</div>
                        </div>
                    </div>
                </div>
            </section>

            <!-- Metadata Section -->
            <section id="metadata" class="book-detail-section">
                <div class="section-header">
                    <div class="section-icon">
                        <i class="fas fa-tags"></i>
                    </div>
                    <h2>Administrative Details</h2>
                </div>
                <div class="section-content">
                    <div class="info-grid">
                        <div class="info-item">
                            <div class="info-label">
                                <i class="fas fa-barcode"></i> ISBN-10
                            </div>
                            <div class="info-value">@Html.DisplayFor(model => model.ISBN10)</div>
                        </div>

                        <div class="info-item">
                            <div class="info-label">
                                <i class="fas fa-barcode"></i> ISBN-13
                            </div>
                            <div class="info-value">@Html.DisplayFor(model => model.ISBN13)</div>
                        </div>

                        <div class="info-item">
                            <div class="info-label">
                                <i class="fas fa-calendar-plus"></i> Upload Date
                            </div>
                            <div class="info-value">@Model.UploadDate?.ToString("MMMM dd, yyyy hh:mm tt")</div>
                        </div>

                        <div class="info-item">
                            <div class="info-label">
                                <i class="fas fa-user-shield"></i> Admin ID (Uploader)
                            </div>
                            <div class="info-value">@Html.DisplayFor(model => model.CreatedBy)</div>
                        </div>

                        @if (Model.UpdatedDate.HasValue)
                        {
                            <div class="info-item">
                                <div class="info-label">
                                    <i class="fas fa-calendar-check"></i> Last Updated
                                </div>
                                <div class="info-value">@Model.UpdatedDate?.ToString("MMMM dd, yyyy hh:mm tt")</div>
                            </div>
                        }

                        @if (!string.IsNullOrWhiteSpace(Model.UpdatedBy))
                        {
                            <div class="info-item">
                                <div class="info-label">
                                    <i class="fas fa-user-edit"></i> Updated By Admin ID
                                </div>
                                <div class="info-value">@Html.DisplayFor(model => model.UpdatedBy)</div>
                            </div>
                        }
                    </div>
                </div>
            </section>


            <!--Author Details-->
            <section id="metadata" class="book-detail-section">
                <div class="section-header">
                    <div class="section-icon">
                        <i class="fas fa-tags"></i>
                    </div>
                    <h2>Author Details</h2>
                </div>
                <div class="section-content">
                    <div class="info-grid">
                        <div class="info-item">
                            <div class="info-label">
                                <i class="fas fa-barcode"></i> Image
                            </div>
                            <img src = @authorImage style = "height:50px; width:50px" />
                        </div>

                        <div class="info-item">
                            <div class="info-label">
                                <i class="fas fa-barcode"></i> Author Name
                            </div>
                            <div class="info-value">@authorName</div>
                        </div>

                        <div class="info-item">
                            <div class="info-label">
                                <i class="fas fa-calendar-plus"></i> Author Description
                            </div>
                            <div class="info-value">@authorDesription</div>
                        </div>

                    </div>
                </div>
            </section>


            <!-- Reviews Section -->
            <section id="reviews" class="book-detail-section">
                <div class="section-header">
                    <div class="section-icon">
                        <i class="fas fa-comments"></i>
                    </div>
                    <h2>Reviews</h2>
                </div>
                <div class="section-content">
                    <div class="book-reviews-section">
                        @if (!userHasReviewed && User.Identity.IsAuthenticated)
                        {
                            <div class="mb-4">
                                <button type="button" class="btn btn-review"
                                        onclick="openReviewModal('@Model.BookId', '@Model.Title', '@Model.Author')">
                                    <i class="fas fa-pen"></i> Leave a Review
                                </button>
                            </div>
                        }

                        @if (Model.Reviews != null && Model.Reviews.Any())
                        {
                            <div class="review-container">
                                @{
                                    var userReview = Model.Reviews.FirstOrDefault(r => r.UserId == currentUserId);

                                    // Display user's review first if it exists
                                    if (userReview != null)
                                    {
                                        <div class="review-box user-review">
                                            <div class="reviewer-info">
                                                <div class="reviewer-avatar">
                                                    @(userReview.UserId?.Substring(0, 1).ToUpper() ?? "U")
                                                </div>
                                                <div>
                                                    <div class="reviewer-name">You</div>
                                                </div>
                                            </div>
                                            <div class="review-header">
                                                <div class="review-rating">
                                                    <div class="stars">
                                                        @for (var i = 1; i <= 5; i++)
                                                        {
                                                            if (i <= userReview.Rating)
                                                            {
                                                                <i class="fas fa-star"></i>
                                                            }
                                                            else if (i - 0.5 <= userReview.Rating)
                                                            {
                                                                <i class="fas fa-star-half-alt"></i>
                                                            }
                                                            else
                                                            {
                                                                <i class="far fa-star"></i>
                                                            }
                                                        }
                                                    </div>
                                                    <span style="font-size: 13px">@userReview.Rating / 5</span>
                                                </div>
                                            </div>
                                            @if (!string.IsNullOrWhiteSpace(userReview.Comment))
                                            {
                                                <div class="review-comment">@userReview.Comment</div>
                                            }
                                            <div class="review-date">
                                                Updated last: @userReview.UploadDate?.ToString("MMMM dd, yyyy")
                                            </div>
                                            <div class="review-actions">
												@if(userReview.UserId == currentUserId)
												{
													<button class="btn btn-edit-review" onclick="editReview('@userReview.ReviewId', '@Model.BookId', @(userReview.Rating), '@Html.Raw(Html.Encode(userReview.Comment))', '@userReview.UploadDate?.ToString("yyyy-MM-ddTHH:mm:ss")')">
                                                    <i class="fas fa-edit"></i> Edit
                                                </button>
												}
												
                                                 @if (isAdmin || userReview.UserId == currentUserId)
                                                    {
                                                        <button class="btn btn-delete-review"
                                                                onclick="deleteBookReview('@userReview.ReviewId')">
                                                            <i class="fas fa-trash-alt"></i> Delete
                                                        </button>
                                                    }
                                            </div>
                                        </div>
                                    }

                                    // Display other reviews
                                    foreach (var review in Model.Reviews.Where(r => r.UserId != currentUserId))
                                    {
                                        <div class="review-box">
                                            <div class="reviewer-info">
                                                <div class="reviewer-avatar">
                                                    @(review.UserId?.Substring(0, 1).ToUpper() ?? "U")
                                                </div>
                                                <div>
                                                    <div class="reviewer-name">@review.UserId</div>
                                                </div>
                                            </div>
                                            <div class="review-header">
                                                <div class="review-rating">
                                                    <div class="stars">
                                                        @for (var i = 1; i <= 5; i++)
                                                        {
                                                            if (i <= review.Rating)
                                                            {
                                                                <i class="fas fa-star"></i>
                                                            }
                                                            else if (i - 0.5 <= review.Rating)
                                                            {
                                                                <i class="fas fa-star-half-alt"></i>
                                                            }
                                                            else
                                                            {
                                                                <i class="far fa-star"></i>
                                                            }
                                                        }
                                                    </div>
                                                    <span style="font-size: 13px">@review.Rating / 5</span>
                                                </div>
                                            </div>
                                            @if (!string.IsNullOrWhiteSpace(review.Comment))
                                            {
                                                <div class="review-comment">@review.Comment</div>
                                            }
                                            <div class="review-date">
                                                Updated last: @review.UploadDate?.ToString("MMMM dd, yyyy")
                                            </div>
                                            <div class="review-actions">
                                                
                                                 @if (isAdmin)
                                                    {
                                                        <button class="btn btn-delete-review"
                                                                onclick="deleteBookReview('@review.ReviewId')">
                                                            <i class="fas fa-trash-alt"></i> Delete
                                                        </button>
                                                    }
                                            </div>
                                        </div>
                                    }
                                }
                            </div>
                        }
                        else
                        {
                            <div class="no-reviews">
                                <i class="far fa-comment-alt mr-2"></i> No reviews available for this book.
                            </div>
                        }
                    </div>
                </div>
            </section>

            <!-- Back to top button -->
            <div class="back-to-top">
                <a href="#" title="Back to Top">
                    <i class="fas fa-arrow-up"></i>
                </a>
            </div>
        </div>
    }
    else
    {
        <div class="book-details-container">
            <div class="error-message">
                <i class="fas fa-exclamation-circle"></i>
                <p>Book details could not be loaded. Please ensure a valid Book ID was provided.</p>
            </div>
        </div>
    }
</div>

<!-- Add Review Modal -->
<div class="modal fade review-modal" id="addReview" tabindex="-1" aria-labelledby="addReviewLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header border-0">
                <button class="btn border-0 back-button" data-bs-dismiss="modal" aria-label="Close">
                    <i class="fas fa-arrow-left"></i>
                </button>
            </div>
            <div class="modal-body pt-0">
                <div class="book-details text-center mb-4">
                    <h2 class="book-title">Book Title</h2>
                    <p class="book-author">Author</p>
                </div>

                <form id="addReviewForm">
                    @Html.AntiForgeryToken()
                    <input type="hidden" id="bookId" name="BookId">
                    <input type="hidden" id="userId" name="UserId" value="@User.FindFirstValue(ClaimTypes.NameIdentifier)">
                    <input type="hidden" id="reviewId" name="ReviewId">

                    <div class="mb-4">
                        <label class="form-label">What do you think of the book?</label>
						<textarea class="form-control" id="add-comment" name="Comment" rows="5" placeholder="Add feedback" maxlength="1000"></textarea>
						<small class="text-muted" id="add-comment-count">0 / 1000</small>
                    </div>
                    <div class="mb-4">
                        <label class="form-label">How would you rate the book?</label>
                        <div class="rating">
                            <div class="stars" id="starsRating">
                                <i class="far fa-star" data-rating="1"></i>
                                <i class="far fa-star" data-rating="2"></i>
                                <i class="far fa-star" data-rating="3"></i>
                                <i class="far fa-star" data-rating="4"></i>
                                <i class="far fa-star" data-rating="5"></i>
                            </div>
                            <input type="hidden" name="Rating" id="rating-value">
                        </div>
                    </div>

                    <div class="text-center">
                        <button type="button" id="submitReviewBtn" class="btn btn-submit">Submit</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- Edit Review Modal - Updated -->
<div class="modal fade review-modal" id="editReview" tabindex="-1" aria-labelledby="editReviewLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header border-0">
                <button class="btn border-0 back-button" data-bs-dismiss="modal" aria-label="Close">
                    <i class="fas fa-arrow-left"></i>
                </button>
            </div>
            <div class="modal-body pt-0">
                <div class="book-details text-center mb-4">
                    <h2 class="edit-book-title">Book Title</h2>
                    <p class="edit-book-author">by Author</p>
                </div>

                <form id="editReviewForm">
                    @Html.AntiForgeryToken()
                    <input type="hidden" id="edit-bookId" name="BookId">
                    <input type="hidden" id="edit-userId" name="UserId" value="@User.FindFirstValue(ClaimTypes.NameIdentifier)">
                    <input type="hidden" id="edit-reviewId" name="ReviewId">
                    <!-- Adding an explicit hidden input for UploadDate since it's required -->
                    <input type="hidden" id="edit-uploadDate" name="UploadDate" value="">

                    <div class="mb-4">
                        <label class="form-label">What do you think of the book?</label>
<textarea class="form-control" id="edit-comment" name="Comment" rows="5" placeholder="Add feedback" maxlength="1000"></textarea>
<small class="text-muted" id="edit-comment-count">0 / 1000</small>
                    </div>
                    <div class="mb-4">
                        <label class="form-label">How would you rate the book?</label>
                        <div class="rating">
                            <div class="stars" id="editStarsRating">
                                <i class="far fa-star" data-rating="1"></i>
                                <i class="far fa-star" data-rating="2"></i>
                                <i class="far fa-star" data-rating="3"></i>
                                <i class="far fa-star" data-rating="4"></i>
                                <i class="far fa-star" data-rating="5"></i>
                            </div>
                            <input type="hidden" name="Rating" id="edit-rating-value">
                        </div>
                    </div>

                    <div class="text-center">
                        <button type="button" id="updateReviewBtn" class="btn btn-submit">Update Review</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<div class="modal fade confirmation-modal" id="deleteBookReviewModal" tabindex="-1" aria-labelledby="deleteBookReviewModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header border-0">
                <h5 class="modal-title" id="deleteBookReviewModalLabel">Confirm Delete</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body text-center">
                <h6>Are you sure you want to delete your review?</h6>
                <p class="text-muted">This action cannot be undone.</p>
            </div>
            <div class="modal-footer border-0 justify-content-center">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" id="confirmDeleteBookReview" class="btn btn-danger">Delete Review</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/jquery@3.6.0/dist/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/js/toastr.min.js"></script>
    <script type="module">
        //For Genre
        const genre_tag = document.getElementById("genre-tags")
        const concatenatedGenreInput = document.getElementById('concatenatedGenre');
        const languageHidden = document.getElementById('language-hidden');
        try {
            //Add commentMore actions
            const response = await fetch('/Book/GetLanguage', { method: 'GET' });
            let itemsToPopulate = [];

            if (response.ok) {
                const result = await response.json();
                itemsToPopulate = result.message;
            } else {
                console.error(`Server error fetching`);
            }

            //convert genrelist from commaseparated string to a list
            const languageValue = languageHidden.value;
            const languageContainer = document.getElementById('language-value')

            // Populate dropdown with checkboxes
            itemsToPopulate.forEach(item => {
                const parts = item.split(',');
                const itemName = parts[0].trim();
                const itemValue = parts[1].trim();

                if (languageValue.trim().toLowerCase() == parts[1].trim().toLowerCase()) {

                    languageContainer.textContent = itemName;
                }

            });

        } catch (error) {
            console.error(`Error initializing`, error);
        }




        try {
            const response = await fetch('/Book/GetGenre', { method: 'GET' });
            let itemsToPopulate = [];

            if (response.ok) {
                const result = await response.json();
                itemsToPopulate = result.message;
                
            } else {
                console.error(`Server error fetching`);
            }

            
            //convert genrelist from commaseparated string to a list
            const commaSeparatedGenre = concatenatedGenreInput.value;
            const genreArray = commaSeparatedGenre.split(',').map(item => item.trim().toLowerCase()).filter(item => item !== '');
            

            // Populate dropdown with checkboxes
            itemsToPopulate.forEach(item => {
                const parts = item.split(',');
                const itemName = parts[0].trim();
                const itemValue = parts[1].trim();
                const optionDiv = document.createElement('div');
                

                if (genreArray.includes(parts[1].trim().toLowerCase())) {
                    optionDiv.textContent = itemName
                    optionDiv.setAttribute("class", "book-tag")
                    

                    genre_tag.appendChild(optionDiv);
                }

            });

        } catch (error) {
            console.error(`Error initializing`, error);
        }
    </script>
    <script>
        // Define resetStars outside the document.ready to make it globally accessible
        let stars;
        let editStars;
        let selectedRating = 0;
        let editSelectedRating = 0;

        // Function to render stars for a static rating display
        function renderStars(rating, container) {
            if (!container) return;

            const stars = container.find('i');
            const fullStars = Math.floor(rating);
            const hasHalfStar = (rating - fullStars) >= 0.5;

            stars.each(function(index) {
                const star = $(this);
                if (index < fullStars) {
                    star.removeClass('far').addClass('fas'); // Full star
                } else if (index === fullStars && hasHalfStar) {
                    star.removeClass('far fas').addClass('fas fa-star-half-alt'); // Half star
                } else {
                    star.removeClass('fas fa-star-half-alt').addClass('far'); // Empty star
                }
            });
        }

        // Function to highlight stars up to a certain rating
        function highlightStars(rating, starsSelector) {
            starsSelector.each(function() {
                const star = $(this);
                const starRating = parseInt(star.data('rating'));

                if (starRating <= rating) {
                    star.removeClass('far').addClass('fas');
                } else {
                    star.removeClass('fas').addClass('far');
                }
            });
        }

        // Function to reset all stars
        function resetStars(starsSelector, containerSelector) {
            if (starsSelector) {
                starsSelector.removeClass('fas').addClass('far');
                $(containerSelector).removeClass('selection-locked');
            }
        }

        // Function to extract rating value from text
        function extractRatingValue(ratingText) {
            if (!ratingText) return 0;
    
            // This handles formats like "4.5 / 5" by extracting just the number part
            const match = ratingText.match(/(\d+(?:\.\d+)?)/);
            const rating = match ? parseFloat(match[1]) : 0;
    
            console.log("Extracted rating:", rating, "from text:", ratingText);
            return rating;
        }

        // Function to show success notification - modified to use toastr
        function showSuccessNotification(message) {
            toastr.success(message);
        }

        // Function to open the modal with book details - UPDATED
        function openReviewModal(bookId, bookTitle, bookAuthor) {
            console.log("Opening modal for book:", bookId, bookTitle, bookAuthor);

            // Set the book details in the modal
            $('#bookId').val(bookId);
            $('.book-title').text(bookTitle);
            $('.book-author').text(bookAuthor);

            // Reset the form
            $('#addReviewForm')[0].reset();
            resetStars(stars, '#starsRating');
            selectedRating = 0;

            // Open the modal
            var reviewModal = new bootstrap.Modal(document.getElementById('addReview'));
            reviewModal.show();
        }

        // Updated JavaScript function to properly capture and send the upload date
        function editReview(reviewId, bookId, rating, comment, uploadDate) {
            try {
                // Add debug logging
                console.log("Edit Review Function Called with parameters:");
                console.log("- reviewId:", reviewId);
                console.log("- bookId:", bookId);
                console.log("- rating:", rating, "type:", typeof rating);
                console.log("- comment:", comment);
                console.log("- uploadDate:", uploadDate);

                // Make sure bookId isn't empty
                if (!bookId) {
                    bookId = '@Model.BookId';  // Use the book ID from the page model as fallback
                    console.log("Using fallback BookId:", bookId);
                }

                // Make sure the rating is a number
                const numericRating = parseFloat(rating);
        
                // Set values in form
                $('#edit-reviewId').val(reviewId);
                $('#edit-bookId').val(bookId);
                $('#edit-comment').val(comment);
                $('#edit-rating-value').val(numericRating);
                $('#edit-uploadDate').val(uploadDate);
        
                // Store the rating for later use - this ensures we have the original rating
                // even if the user doesn't interact with the stars
                editSelectedRating = numericRating;
        
                // Set book information
                $('.edit-book-title').text('@Model.Title');
                $('.edit-book-author').text('by @Model.Author');
        
                // Open the modal
                var editModal = new bootstrap.Modal(document.getElementById('editReview'));
                editModal.show();
        
                // Wait for modal to be fully visible before handling stars
                $('#editReview').one('shown.bs.modal', function() {
                    console.log("Modal shown, setting stars to rating:", numericRating);
            
                    // Reset stars first
                    editStars.removeClass('fas').addClass('far');
            
                    // Then apply the correct rating
                    editStars.each(function(index) {
                        if (index < numericRating) {
                            $(this).removeClass('far').addClass('fas');
                        }
                    });
            
                    // Lock the selection - we've removed this to allow changing the rating
                    // $('#editStarsRating').addClass('selection-locked');
                });
            } catch (error) {
                console.error("Error preparing review edit:", error);
                toastr.error("Error preparing review for editing: " + error.message);
            }
        }

        // Update review button click handler
        $('#updateReviewBtn').click(function() {
            // Validate the form
            const comment = $('#edit-comment').val().trim();
            const reviewId = $('#edit-reviewId').val();
            const bookId = $('#edit-bookId').val() || '@Model.BookId';  // Use fallback if empty
            const uploadDate = $('#edit-uploadDate').val();
    
            // Check if we have the original rating from when the modal was opened
            let rating = $('#edit-rating-value').val();
    
            // If rating is 0 or empty but editSelectedRating has a value, use that instead
            // This ensures we keep the original rating if the user didn't click on stars
            if (!rating || rating == 0) {
                rating = editSelectedRating;
            }

            console.log("Submitting review update:", {
                reviewId: reviewId,
                bookId: bookId,
                rating: rating,
                comment: comment,
                uploadDate: uploadDate
            });            

            // Get the token
            const token = $('#editReviewForm input[name="__RequestVerificationToken"]').val();

            // Create a complete form data object with all necessary fields
            const formData = {
                ReviewId: reviewId,
                BookId: bookId, 
                Rating: rating,
                Comment: comment,
                UserId: $('#edit-userId').val(),
                UploadDate: uploadDate,
                __RequestVerificationToken: token
            };

            // Submit the form via AJAX
            $.ajax({
                url: '@Url.Action("Edit", "Review")',
                type: 'POST',
                data: formData,
                headers: {
                    'RequestVerificationToken': token
                },
                success: function(response) {
                    if (response && response.success) {
                        // Close the modal
                        var editReviewModal = bootstrap.Modal.getInstance(document.getElementById('editReview'));
                        editReviewModal.hide();

                        toastr.success("Review updated successfully!");

                        // Refresh the page after a short delay to show the updated review
                        setTimeout(function() {
                            location.reload();
                        }, 1500);
                    } else {
                        toastr.error("Error: " + ((response && response.errors) ? response.errors.join(", ") : "Unknown error"));
                    }
                },
                error: function(xhr, status, error) {
                    console.error("Error details:", xhr.responseText);
                    toastr.error("Error updating review: " + error);
                }
            });
        });

        $(document).ready(async function() {
            


            // Initialize stars variables
            stars = $('#starsRating i');
            editStars = $('#editStarsRating i');

            // Render the average rating stars in the header
            const averageRating = @(Model?.AverageRating?.ToString("F1") ?? "0.0");
            renderStars(averageRating, $('.book-header-rating .header-stars'));

            // Smooth scroll for anchor links
            $('a.toc-link').on('click', function(event) {
                if (this.hash !== "") {
                    event.preventDefault();
                    const hash = this.hash;
                    
                    // Add active class to clicked link and remove from others
                    $('.toc-link').removeClass('active');
                    $(this).addClass('active');
                    
                    $('html, body').animate({
                        scrollTop: $(hash).offset().top - 80
                    }, 600);
                }
            });
			$('#add-comment').on('input', function () {
				const length = $(this).val().length;
				$('#add-comment-count').text(`${length} / 1000`);
		});

// Character counter for Edit Review
$('#edit-comment').on('input', function () {
    const length = $(this).val().length;
    $('#edit-comment-count').text(`${length} / 1000`);
});

// Reset counter on modal open
$('#addReview').on('shown.bs.modal', function () {
    $('#add-comment-count').text('0 / 1000');
});

$('#editReview').on('shown.bs.modal', function () {
    const currentLength = $('#edit-comment').val().length;
    $('#edit-comment-count').text(`${currentLength} / 1000`);
});          

            $('#addReview, #editReview').on('hidden.bs.modal', function () {
                $('body').removeClass('modal-open');
                $('.modal-backdrop').remove();

                if ($(this).attr('id') === 'addReview') {
                    $('#addReviewForm')[0].reset();
                    resetStars(stars, '#starsRating');
                    selectedRating = 0;
                } else {
                    $('#editReviewForm')[0].reset();
                    resetStars(editStars, '#editStarsRating');
                    editSelectedRating = 0;
                }
            });

            stars.hover(
                function() {
                    if (!$('#starsRating').hasClass('selection-locked')) {
                        const star = $(this);
                        const hoverRating = parseInt(star.data('rating'));
                        highlightStars(hoverRating, stars);
                    }
                },
                function() {
                    if (!$('#starsRating').hasClass('selection-locked')) {
                        highlightStars(selectedRating, stars);
                    }
                }
            );

            editStars.hover(
                function() { 
                    if (!$('#editStarsRating').hasClass('selection-locked')) {
                        const star = $(this);
                        const hoverRating = parseInt(star.data('rating'));

                        editStars.each(function() {
                            const s = $(this);
                            const r = parseInt(s.data('rating'));
                            
                            if (r <= hoverRating) {
                                s.removeClass('far').addClass('fas');
                            } else {
                                s.removeClass('fas').addClass('far');
                            }
                        });
                    }
                },
                function() { 
                    if (!$('#editStarsRating').hasClass('selection-locked')) {
                        editStars.each(function() {
                            const s = $(this);
                            const r = parseInt(s.data('rating'));
                            
                            if (r <= editSelectedRating) {
                                s.removeClass('far').addClass('fas');
                            } else {
                                s.removeClass('fas').addClass('far');
                            }
                        });
                    }
                }
            );

            stars.click(function() {
                const star = $(this);
                const clickedRating = parseInt(star.data('rating'));

                if (selectedRating === clickedRating) {
                    selectedRating = 0;
                    $('#rating-value').val(selectedRating);
                    resetStars(stars, '#starsRating');
                } else {
                    selectedRating = clickedRating;
                    $('#rating-value').val(selectedRating);
                    highlightStars(selectedRating, stars);
                    $('#starsRating').addClass('selection-locked');
                }
            });

editStars.click(function() {
    const star = $(this);
    const clickedRating = parseInt(star.data('rating'));
    console.log("Star clicked with rating:", clickedRating);

    editSelectedRating = clickedRating;
    $('#edit-rating-value').val(editSelectedRating);
    
    resetStars(editStars, '#editStarsRating');
    
    highlightStars(editSelectedRating, editStars);
    $('#editStarsRating').addClass('selection-locked');
});

            $(document).on('click', function(event) {
                if (!$(event.target).closest('#starsRating').length &&
                    !$(event.target).is('#starsRating') &&
                    selectedRating !== 0) {
                    selectedRating = 0;
                    $('#rating-value').val(selectedRating);
                    resetStars(stars, '#starsRating');
                }
            });

            $('.modal-content').on('click', function(event) {
                event.stopPropagation();
            });

            $('#submitReviewBtn').click(function() {
                const rating = $('#rating-value').val();
                const comment = $('textarea[name="Comment"]').val().trim();
                const bookId = $('#bookId').val();

                console.log("Submitting new review:", {
                    bookId: bookId,
                    rating: rating,
                    comment: comment,
                    userId: $('#userId').val()
                });

                if (!rating || rating == 0) {
                    toastr.warning("Please select a rating for the book.");
                    return;
                }

                const token = $('#addReviewForm input[name="__RequestVerificationToken"]').val();
                $.ajax({
                    url: '@Url.Action("Add", "Review")',
                    type: 'POST',
                    data: $('#addReviewForm').serialize(),
                    headers: {
                        'RequestVerificationToken': token
                    },
                    success: function(response) {
                        if (response && response.success) {
                            var addReviewModal = bootstrap.Modal.getInstance(document.getElementById('addReview'));
                            addReviewModal.hide();

                            showSuccessNotification("Review submitted successfully!");
                       
                            setTimeout(function() {
                                location.reload();
                            }, 1500);
                        } else {
                            toastr.error("Error: " + ((response && response.errors) ? response.errors.join(", ") : "Unknown error"));
                        }
                    },
                    error: function(xhr, status, error) {
                        console.error("Error details:", xhr.responseText);
                        toastr.error("Error submitting review: " + error);
                    }
                });
            });


$('#updateReviewBtn').click(function() {

    let rating = $('#edit-rating-value').val();
    const comment = $('#edit-comment').val().trim();
    const reviewId = $('#edit-reviewId').val();
    const bookId = $('#edit-bookId').val();
    const uploadDate = $('#edit-uploadDate').val();
    
    if (!rating || rating == 0) {
        rating = editSelectedRating;
        $('#edit-rating-value').val(editSelectedRating);
    }

    const token = $('#editReviewForm input[name="__RequestVerificationToken"]').val();

    $.ajax({
        url: '@Url.Action("Edit", "Review")',
        type: 'POST',
        data: $('#editReviewForm').serialize(),
        headers: {
            'RequestVerificationToken': token
        },
        success: function(response) {
            if (response && response.success) {
                // Close the modal
                var editReviewModal = bootstrap.Modal.getInstance(document.getElementById('editReview'));
                editReviewModal.hide();

                // Refresh the page after a short delay to show the updated review
                setTimeout(function() {
                    location.reload();
                }, 1500);
            } else {
                toastr.error("Error: " + ((response && response.errors) ? response.errors.join(", ") : "Unknown error"));
            }
        },
        error: function(xhr, status, error) {
            console.error("Error details:", xhr.responseText);
            toastr.error("Error updating review: " + error);
        }
    });
});
            console.log("Book details and review functionality initialized");

            // Set toastr options
            toastr.options = {
                "closeButton": true,
                "debug": false,
                "newestOnTop": true,
                "progressBar": true,
                "positionClass": "toast-top-right",
                "preventDuplicates": false,
                "showDuration": "300",
                "hideDuration": "1000",
                "timeOut": "5000",
                "extendedTimeOut": "1000",
                "showEasing": "swing",
                "hideEasing": "linear",
                "showMethod": "fadeIn",
                "hideMethod": "fadeOut"
            };
        });
    </script>
    <script>
    let reviewIdToDelete = null;

    function deleteBookReview(reviewId) {
        reviewIdToDelete = reviewId;
        var deleteModal = new bootstrap.Modal(document.getElementById('deleteBookReviewModal'));
        deleteModal.show();
    }

    $('#confirmDeleteBookReview').click(function () {
        if (reviewIdToDelete) {
            const token = $('input[name="__RequestVerificationToken"]').first().val();

            $.ajax({
                url: '@Url.Action("Delete", "Review")',
                type: 'POST',
                data: {
                    id: reviewIdToDelete,
                    __RequestVerificationToken: token
                },
                success: function (response) {
                    var deleteModal = bootstrap.Modal.getInstance(document.getElementById('deleteBookReviewModal'));
                    deleteModal.hide();

                    toastr.success("Review deleted successfully!");

                    setTimeout(function () {
                        location.reload();
                    }, 1200);

                    reviewIdToDelete = null;
                },
                error: function (xhr, status, error) {
                    toastr.error("Error deleting review: " + error);
                }
            });
        }
    });
</script>
    <script>
        $(document).ready(function() {
            // Initialize variables
            const $tocLinks = $('.toc-link');
            const $sections = $('.book-detail-section');
            let isScrolling = false;

            // Immediately set description as active when page loads
            $tocLinks.removeClass('active');
            $tocLinks.filter('[href="#description"]').addClass('active');

            // Function to highlight the correct TOC link based on current section
            function updateActiveTocLink() {
                // Get the current scroll position with some offset for better section detection
                const scrollPosition = $(window).scrollTop() + 120;
                const windowHeight = $(window).height();
                const documentHeight = $(document).height();

                // Special case: if we're very close to the bottom, highlight the reviews tab
                if (scrollPosition + windowHeight >= documentHeight - 50) {
                    $tocLinks.removeClass('active');
                    $tocLinks.filter('[href="#reviews"]').addClass('active');
                    return;
                }

                // Find the current section in view
                let currentSection = null;
                let closestSectionTop = -Infinity;

                $sections.each(function() {
                    const $section = $(this);
                    const sectionId = $section.attr('id');
                    const sectionTop = $section.offset().top - 100;
                    const sectionBottom = sectionTop + $section.outerHeight();

                    // Check if we're inside this section
                    if (scrollPosition >= sectionTop && scrollPosition < sectionBottom) {
                        // If this section is closer to the top of our viewport than our previous match
                        if (sectionTop > closestSectionTop) {
                            closestSectionTop = sectionTop;
                            currentSection = sectionId;
                        }
                    }
                });

                // If we found a section, highlight its tab
                if (currentSection) {
                    $tocLinks.removeClass('active');
                    $tocLinks.filter(`[href="#${currentSection}"]`).addClass('active');
                }
                // If no section is found and we're at the top, default to description
                else if (scrollPosition < 300) {
                    $tocLinks.removeClass('active');
                    $tocLinks.filter('[href="#description"]').addClass('active');
                }
            }

            // More efficient scroll handling with requestAnimationFrame
            let ticking = false;

            $(window).on('scroll', function() {
                if (!ticking) {
                    window.requestAnimationFrame(function() {
                        updateActiveTocLink();
                        ticking = false;
                    });
                    ticking = true;
                }
            });

            // Handle clicks on TOC links - instant tab highlighting
            $tocLinks.on('click', function(event) {
                if (this.hash) {
                    event.preventDefault();
                    const hash = this.hash;

                    // Immediately update active state
                    $tocLinks.removeClass('active');
                    $(this).addClass('active');

                    // Store target element and position
                    const $target = $(hash);
                    const targetPosition = $target.offset().top - 90;

                    // Set flag to prevent scroll handler from changing highlighting
                    isScrolling = true;

                    // Scroll without animation for instant feedback
                    $('html, body').animate({
                        scrollTop: targetPosition
                    }, {
                        duration: 400,
                        complete: function() {
                            // After scrolling completes, reset flag
                            setTimeout(function() {
                                isScrolling = false;
                            }, 10);
                        }
                    });
                }
            });

            // Initial call to highlight the correct tab based on scroll position
            updateActiveTocLink();

            // Also update tab highlighting when window is resized
            $(window).on('resize', function() {
                updateActiveTocLink();
            });

            // Back to top button functionality
            const $backToTopButton = $('.back-to-top');

            // Show/hide back to top button based on scroll position
            $(window).on('scroll', function() {
                if ($(this).scrollTop() > 300) {
                    $backToTopButton.addClass('show');
                } else {
                    $backToTopButton.removeClass('show');
                }
            });

            // Scroll to top when button is clicked
            $backToTopButton.on('click', function(e) {
                e.preventDefault();
                $('html, body').animate({
                    scrollTop: 0
                }, 600);
                
                // Update TOC highlighting when scrolling back to top
                $('.toc-link').removeClass('active');
                $('.toc-link').filter('[href="#description"]').addClass('active');
                
                return false;
            });
        });
    </script>
}