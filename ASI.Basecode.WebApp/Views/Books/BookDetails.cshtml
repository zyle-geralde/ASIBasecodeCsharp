@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@model ASI.Basecode.Services.ServiceModels.BookViewModel;
@{
    ViewData["Title"] = "BookDetails";
    Layout = "_AdminSidebarLayout";
}

@section styles {
    <link rel="stylesheet" href="~/css/admin/book-details.css" asp-append-version="true" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <link rel="stylesheet" href="~/css/admin/books/bookdetails.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/admin/common.css" asp-append-version="true" />
}

<div class="book-details-page-wrapper">
    @if (Model != null)
    {
        <div class="book-details-header">
            <div class="book-cover-header-container">
                @if (!string.IsNullOrWhiteSpace(Model.CoverImageUrl))
                {
                    <img src="@Model.CoverImageUrl" alt="Book Cover" class="header-book-cover-image" />
                }
                else
                {
                    <img src="/images/dummy-book-cover.png" alt="No Cover Available" class="header-book-cover-image dummy-cover" />
                }
            </div>

            <div class="book-header-info">
                <h1 class="book-header-title">@Html.DisplayFor(model => model.Title)</h1>
                <p class="book-header-author">by @Html.DisplayFor(model => model.Author)</p>

                <div class="book-header-tags">
                    @* ---------------------genreeeeeeeeeeeeeeeeeeeeeeeeeeee------------------ *@
                    <span class="book-tag">Fiction</span>
                    <span class="book-tag">Coming-of-Age</span>
                    <span class="book-tag">Horror</span>
                </div>

                @* ---------------------star ratinggggg------------------ *@
                <div class="book-header-rating" id="bookHeaderRating">
                    <span class="rating-text">@Model.AverageRating?.ToString("0.0") / 5.0</span>
                </div>
            </div>

            <div class="book-header-actions">
                @if (!string.IsNullOrWhiteSpace(Model.BookFileUrl))
                {
                    <a href="@Model.BookFileUrl" target="_blank" class="view-book-file-button">
                        View Book File
                    </a>
                }
            </div>
        </div>

       

    @* ---------------------------the rest of the details-------------------------------- *@
        <div class="book-details-container content-card p-4">
            <div class="book-info-section">
                @if (!string.IsNullOrWhiteSpace(Model.Subtitle))
                {
                    <div class="detail-group">
                        <span class="detail-label">Subtitle:</span>
                        <span class="detail-value">@Html.DisplayFor(model => model.Subtitle)</span>
                    </div>
                }

                <div class="detail-group">
                    <span class="detail-label">Book ID:</span>
                    <span class="detail-value">@Html.DisplayFor(model => model.BookId)</span>
                </div>

                <div class="detail-group detail-description">
                    <span class="detail-label">Description:</span>
                    <div class="description-box">
                        @Html.DisplayFor(model => model.Description)
                    </div>
                </div>

                <div class="detail-group">
                    <span class="detail-label">Publication Date:</span>
                    <span class="detail-value">@Model.PublicationDate?.ToString("MMMM dd, yyyy")</span>
                </div>

                <div class="detail-group">
                    <span class="detail-label">Publisher:</span>
                    <span class="detail-value">@Html.DisplayFor(model => model.Publisher)</span>
                </div>

                <div class="detail-group">
                    <span class="detail-label">Publication Location:</span>
                    <span class="detail-value">@Html.DisplayFor(model => model.PublicationLocation)</span>
                </div>

                <div class="detail-group">
                    <span class="detail-label">Number of Pages:</span>
                    <span class="detail-value">@Html.DisplayFor(model => model.NumberOfPages)</span>
                </div>
            </div>

            <div class="detail-group">
                <span class="detail-label">Language:</span>
                <span class="detail-value">@Html.DisplayFor(model => model.Language)</span>
            </div>

            <div class="detail-group">
                <span class="detail-label">ISBN-10:</span>
                <span class="detail-value">@Html.DisplayFor(model => model.ISBN10)</span>
            </div>

            <div class="detail-group">
                <span class="detail-label">ISBN-13:</span>
                <span class="detail-value">@Html.DisplayFor(model => model.ISBN13)</span>
            </div>

            <div class="detail-group">
                <span class="detail-label">Edition:</span>
                <span class="detail-value">@Html.DisplayFor(model => model.Edition)</span>
            </div>

            @if (!string.IsNullOrWhiteSpace(Model.SeriesName))
            {
                <div class="detail-group">
                    <span class="detail-label">Series Name:</span>
                    <span class="detail-value">@Html.DisplayFor(model => model.SeriesName)</span>
                </div>
            }
            @if (Model.SeriesOrder.HasValue)
            {
                <div class="detail-group">
                    <span class="detail-label">Series Order:</span>
                    <span class="detail-value">@Html.DisplayFor(model => model.SeriesOrder)</span>
                </div>
            }
            @if (!string.IsNullOrWhiteSpace(Model.SeriesDescription))
            {
                <div class="detail-group detail-description">
                    <span class="detail-label">Series Description:</span>
                    <div class="description-box">
                        @Html.DisplayFor(model => model.SeriesDescription)
                    </div>
                </div>
            }
            <div class="detail-group">
                <span class="detail-label">Average Rating:</span>
                <span class="detail-value">@Model.AverageRating?.ToString("0.0") / 5.0</span>
            </div>

            <div class="detail-group">
                <span class="detail-label">Likes:</span>
                <span class="detail-value">@Html.DisplayFor(model => model.Likes)</span>
            </div>

            <div class="detail-group">
                <span class="detail-label">Upload Date:</span>
                <span class="detail-value">@Model.UploadDate</span>
            </div>

            @if (Model.UpdatedDate.HasValue)
            {
                <div class="detail-group">
                    <span class="detail-label">Last Updated:</span>
                    <span class="detail-value">@Model.UpdatedDate?.ToString("MMMM dd, yyyy hh:mm tt")</span>
                </div>
            }

            <div class="detail-group">
                <span class="detail-label">Admin ID (Uploader):</span>
                <span class="detail-value">@Html.DisplayFor(model => model.AdminId)</span>
            </div>

            @if (!string.IsNullOrWhiteSpace(Model.UpdatedByAdminId))
            {
                <div class="detail-group">
                    <span class="detail-label">Updated By Admin ID:</span>
                    <span class="detail-value">@Html.DisplayFor(model => model.UpdatedByAdminId)</span>
                </div>
            }

            

            <div class="book-reviews-section mt-4">
                <h2>Reviews</h2>
                @if (!Model.HasReviewed && User.Identity.IsAuthenticated)
                {
                    <div class="mb-4">
                        <a class="btn btn-primary"
                           asp-controller="Review"
                           asp-action="Add"
                           asp-route-bookId="@Model.BookId">
                            Leave a Review
                        </a>
                    </div>
                }

                @if (Model.Reviews != null && Model.Reviews.Any())
                {
                    @foreach (var review in Model.Reviews)
                    {
                        <div class="review-box border p-3 mb-3 rounded bg-light">
                            <div><strong>Reviewer:</strong> @review.UserId</div>
                            <div><strong>Rating:</strong> @review.Rating / 5</div>
                            <div><strong>Comments:</strong></div>
                            <div class="review-comments">@review.Comment</div>
                            <div class="text-muted small">Posted on: @review.UploadDate</div>
                        </div>
                    }
                }
                else
                {
                    <p class="text-muted">No reviews available for this book.</p>
                }
            </div>
        </div>
        </div>
    }

    else
    {
        <p>Book details could not be loaded. Please ensure a valid Book ID was provided.</p>
    }
</div>

@section scripts {
    <script>
        function renderStars(rating, targetElementId) {
            const container = document.getElementById(targetElementId);
            if (!container) {
                console.error(`Star rating container with ID '${targetElementId}' not found.`);
                return;
            }

            const ratingTextSpan = container.querySelector('.rating-text');
            if (ratingTextSpan) {
                while (container.firstChild && container.firstChild !== ratingTextSpan) {
                    container.removeChild(container.firstChild);
                }
            } else {
                container.innerHTML = '';
            }

            const maxStars = 5;
            let starsHtml = '';

            const normalizedRating = Math.max(0, Math.min(maxStars, parseFloat(rating) || 0));

            const fullStars = Math.floor(normalizedRating);
            const hasHalfStar = normalizedRating % 1 >= 0.5;

            // Full stars
            for (let i = 0; i < fullStars; i++) {
                starsHtml += '<i class="fas fa-star"></i>';
            }

            // Half star
            if (hasHalfStar) {
                starsHtml += '<i class="fas fa-star-half-alt"></i>';
            }

            // Empty stars
            const emptyStars = maxStars - fullStars - (hasHalfStar ? 1 : 0);
            for (let i = 0; i < emptyStars; i++) {
                starsHtml += '<i class="far fa-star"></i>';
            }

            if (ratingTextSpan) {
                ratingTextSpan.insertAdjacentHTML('beforebegin', starsHtml);
            } else {
                container.innerHTML = starsHtml + container.innerHTML;
            }
        }

        // Get the average rating from the model and call the function on page load
        const averageRatingStringFromModel = '@(Model.AverageRating?.ToString(System.Globalization.CultureInfo.InvariantCulture) ?? "0.0")';

        // Log both the string and the parsed number for debugging
        console.log("C# Model AverageRating (as string):", averageRatingStringFromModel);

        const averageRatingParsed = parseFloat(averageRatingStringFromModel);
        console.log("Parsed AverageRating (as number):", averageRatingParsed);

        document.addEventListener('DOMContentLoaded', function () {
            renderStars(averageRatingParsed, 'bookHeaderRating');
        });

    </script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/js/all.min.js"></script>
}