@using System.Security.Claims
@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@model ASI.Basecode.Services.ServiceModels.BookViewModel;
@{
    ViewData["Title"] = "BookDetails";
    Layout = "_AdminSidebarLayout";
}

@section styles {
    <link rel="stylesheet" href="~/css/admin/book-details.css" asp-append-version="true" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/css/toastr.min.css">
    <link rel="stylesheet" href="~/css/userui/review.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/admin/books/bookdetails.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/admin/common.css" asp-append-version="true" />
}

<div class="book-details-page-wrapper">
    @if (Model != null)
    {
        <div class="book-details-header">
            <div class="book-cover-header-container">
                @if (!string.IsNullOrWhiteSpace(Model.CoverImageUrl))
                {
                    <img src="@Model.CoverImageUrl" alt="Book Cover" class="header-book-cover-image" />
                }
                else
                {
                    <img src="/images/dummy-book-cover.png" alt="No Cover Available" class="header-book-cover-image dummy-cover" />
                }
            </div>

            <div class="book-header-info">
                <h1 class="book-header-title">@Html.DisplayFor(model => model.Title)</h1>
                <p class="book-header-author">by @Html.DisplayFor(model => model.Author)</p>

                <div class="book-header-tags" id = "genre-tags">
                    @* ---------------------genreeeeeeeeeeeeeeeeeeeeeeeeeeee------------------ *@
                </div>

                @* ---------------------star ratinggggg------------------ *@
                <div class="book-header-rating" id="bookHeaderRating">
                    <div class="stars header-stars">
                        <i class="far fa-star" data-rating="1"></i>
                        <i class="far fa-star" data-rating="2"></i>
                        <i class="far fa-star" data-rating="3"></i>
                        <i class="far fa-star" data-rating="4"></i>
                        <i class="far fa-star" data-rating="5"></i>
                    </div>
                    <span class="rating-text">@Model.AverageRating?.ToString("0.0") / 5.0</span>
                </div>
            </div>

            <div class="book-header-actions">
                @if (!string.IsNullOrWhiteSpace(Model.BookFileUrl))
                {
                    <a href="@Model.BookFileUrl" target="_blank" class="view-book-file-button">
                        View Book File
                    </a>
                }
            </div>
        </div>

       

    @* ---------------------------the rest of the details-------------------------------- *@
        <div class="book-details-container content-card p-4">
            <div class="book-info-section">
                @if (!string.IsNullOrWhiteSpace(Model.Subtitle))
                {
                    <div class="detail-group">
                        <span class="detail-label">Subtitle:</span>
                        <span class="detail-value">@Html.DisplayFor(model => model.Subtitle)</span>
                    </div>
                }

                <div class="detail-group">
                    <span class="detail-label">Book ID:</span>
                    <span class="detail-value">@Html.DisplayFor(model => model.BookId)</span>
                    <input type = "hidden" value="@Model?.GenreList" id = "book-genre-tags"/>
                    
                </div>

                <div class="detail-group detail-description">
                    <span class="detail-label">Description:</span>
                    <div class="description-box">
                        @Html.DisplayFor(model => model.Description)
                    </div>
                </div>

                <div class="detail-group">
                    <span class="detail-label">Publication Date:</span>
                    <span class="detail-value">@Model.PublicationDate?.ToString("MMMM dd, yyyy")</span>
                </div>

                <div class="detail-group">
                    <span class="detail-label">Publisher:</span>
                    <span class="detail-value">@Html.DisplayFor(model => model.Publisher)</span>
                </div>

                <div class="detail-group">
                    <span class="detail-label">Publication Location:</span>
                    <span class="detail-value">@Html.DisplayFor(model => model.PublicationLocation)</span>
                </div>

                <div class="detail-group">
                    <span class="detail-label">Number of Pages:</span>
                    <span class="detail-value">@Html.DisplayFor(model => model.NumberOfPages)</span>
                </div>
            </div>

            <div class="detail-group">
                <span class="detail-label">Language:</span>
                <input type = "hidden" id = "language-hidden" value="@Model.Language">
                <span class="detail-value" id="language-value"></span>@*@Html.DisplayFor(model => model.Language)*@
            </div>

            <div class="detail-group">
                <span class="detail-label">ISBN-10:</span>
                <span class="detail-value">@Html.DisplayFor(model => model.ISBN10)</span>
            </div>

            <div class="detail-group">
                <span class="detail-label">ISBN-13:</span>
                <span class="detail-value">@Html.DisplayFor(model => model.ISBN13)</span>
            </div>

            <div class="detail-group">
                <span class="detail-label">Edition:</span>
                <span class="detail-value">@Html.DisplayFor(model => model.Edition)</span>
            </div>

            @if (!string.IsNullOrWhiteSpace(Model.SeriesName))
            {
                <div class="detail-group">
                    <span class="detail-label">Series Name:</span>
                    <span class="detail-value">@Html.DisplayFor(model => model.SeriesName)</span>
                </div>
            }
            @if (Model.SeriesOrder.HasValue)
            {
                <div class="detail-group">
                    <span class="detail-label">Series Order:</span>
                    <span class="detail-value">@Html.DisplayFor(model => model.SeriesOrder)</span>
                </div>
            }
            @if (!string.IsNullOrWhiteSpace(Model.SeriesDescription))
            {
                <div class="detail-group detail-description">
                    <span class="detail-label">Series Description:</span>
                    <div class="description-box">
                        @Html.DisplayFor(model => model.SeriesDescription)
                    </div>
                </div>
            }
            <div class="detail-group">
                <span class="detail-label">Average Rating:</span>
                <span class="detail-value">@Model.AverageRating?.ToString("0.0") / 5.0</span>
            </div>

            <div class="detail-group">
                <span class="detail-label">Likes:</span>
                <span class="detail-value">@Html.DisplayFor(model => model.Likes)</span>
            </div>

            <div class="detail-group">
                <span class="detail-label">Upload Date:</span>
                <span class="detail-value">@Model.UploadDate?.ToString("MMMM dd, yyyy hh:mm tt")</span>
            </div>

            @if (Model.UpdatedDate.HasValue)
            {
                <div class="detail-group">
                    <span class="detail-label">Last Updated:</span>
                    <span class="detail-value">@Model.UpdatedDate?.ToString("MMMM dd, yyyy hh:mm tt")</span>
                </div>
            }

            <div class="detail-group">
                <span class="detail-label">Admin ID (Uploader):</span>
                <span class="detail-value">@Html.DisplayFor(model => model.CreatedBy)</span>
            </div>

            @if (!string.IsNullOrWhiteSpace(Model.UpdatedBy))
            {
                <div class="detail-group">
                    <span class="detail-label">Updated By Admin ID:</span>
                    <span class="detail-value">@Html.DisplayFor(model => model.UpdatedBy)</span>
                </div>
            }

            <div class="detail-group">
                <span class="detail-label">Is Featured:</span>
                <span class="detail-value">@Model.IsFeatured</span>
            </div>
            

            <div class="book-reviews-section mt-4">
                <h2>Reviews</h2>
                @if (!Model.HasReviewed && User.Identity.IsAuthenticated)
                {
                    <div class="mb-4">
                        <button type="button" class="btn btn-primary"
                                onclick="openReviewModal('@Model.BookId', '@Model.Title', '@Model.Author')">
                            Leave a Review
                        </button>
                    </div>
                }

                @if (Model.Reviews != null && Model.Reviews.Any())
                {
                    @foreach (var review in Model.Reviews)
                    {
                        <div class="review-box border p-3 mb-3 rounded bg-light">
                            <div><strong>Reviewer:</strong> @review.UserId</div>
                            <div><strong>Rating:</strong> @review.Rating / 5</div>
                            <div><strong>Comments:</strong></div>
                            <div class="review-comments">@review.Comment</div>
                            <div class="text-muted small">Posted on: @review.UploadDate</div>
                        </div>
                    }
                }
                else
                {
                    <p class="text-muted">No reviews available for this book.</p>
                }
            </div>
        </div>
    }

    else
    {
        <p>Book details could not be loaded. Please ensure a valid Book ID was provided.</p>
    }
</div>

<!-- Add Review Modal -->
<div class="modal fade review-modal" id="addReview" tabindex="-1" aria-labelledby="addReviewLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header border-0">
                <button class="btn border-0 back-button" data-bs-dismiss="modal" aria-label="Close">
                    <i class="fas fa-arrow-left"></i>
                </button>
            </div>
            <div class="modal-body pt-0">
                <div class="book-details text-center mb-4">
                    <h2 class="book-title">Book Title</h2>
                    <p class="book-author">Author</p>
                </div>

                <form id="addReviewForm">
                    @Html.AntiForgeryToken()
                    <input type="hidden" id="bookId" name="BookId">
                    <input type="hidden" id="userId" name="UserId" value="@User.FindFirstValue(ClaimTypes.NameIdentifier)">

                    <div class="mb-4">
                        <label class="form-label">What do you think of the book?</label>
                        <textarea class="form-control" name="Comment" rows="5" placeholder="Add feedback"></textarea>
                    </div>
                    <div class="mb-4">
                        <label class="form-label">How would you rate the book?</label>
                        <div class="rating">
                            <div class="stars" id="starsRating">
                                <i class="far fa-star" data-rating="1"></i>
                                <i class="far fa-star" data-rating="2"></i>
                                <i class="far fa-star" data-rating="3"></i>
                                <i class="far fa-star" data-rating="4"></i>
                                <i class="far fa-star" data-rating="5"></i>
                            </div>
                            <input type="hidden" name="Rating" id="rating-value">
                        </div>
                    </div>

                    <div class="text-center">
                        <button type="button" id="submitReviewBtn" class="btn btn-submit">Submit</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/jquery@3.6.0/dist/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/js/toastr.min.js"></script>
    <script>
        // Define resetStars outside the document.ready to make it globally accessible
        let stars;
        let selectedRating = 0;

        // Function to render stars for a static rating display
        function renderStars(rating, container) {
            if (!container) return;

            const stars = container.find('i');
            const fullStars = Math.floor(rating);
            const hasHalfStar = (rating - fullStars) >= 0.5;

            stars.each(function(index) {
                const star = $(this);
                if (index < fullStars) {
                    star.removeClass('far').addClass('fas'); // Full star
                } else if (index === fullStars && hasHalfStar) {
                    star.removeClass('far fas').addClass('fas fa-star-half-alt'); // Half star
                } else {
                    star.removeClass('fas fa-star-half-alt').addClass('far'); // Empty star
                }
            });
        }

        // Function to highlight stars up to a certain rating
        function highlightStars(rating) {
            stars.each(function() {
                const star = $(this);
                const starRating = parseInt(star.data('rating'));

                if (starRating <= rating) {
                    star.removeClass('far').addClass('fas');
                } else {
                    star.removeClass('fas').addClass('far');
                }
            });
        }

        // Function to reset all stars - moved outside document.ready
        function resetStars() {
            if (stars) {
                stars.removeClass('fas').addClass('far');
                $('#starsRating').removeClass('selection-locked');
            }
        }

        // Function to show success notification - modified to use toastr
        function showSuccessNotification() {
            var addReviewModal = bootstrap.Modal.getInstance(document.getElementById('addReview'));
            addReviewModal.hide();

            // Show toastr notification
            toastr.success('Review submitted successfully!');
        }

        // Function to open the modal with book details
        function openReviewModal(bookId, bookTitle, bookAuthor) {
            console.log("Opening modal for book:", bookId, bookTitle, bookAuthor);

            // Set the book details in the modal
            $('#bookId').val(bookId);
            $('.book-title').text(bookTitle);
            $('.book-author').text(bookAuthor);

            // Reset the form
            $('#addReviewForm')[0].reset();
            resetStars();

            // Open the modal
            var reviewModal = new bootstrap.Modal(document.getElementById('addReview'));
            reviewModal.show();
        }

        $(document).ready(function() {
            // Initialize stars variable for the review form
            stars = $('#starsRating i');

            // Render the average rating stars in the header
            const averageRating = @(Model.AverageRating?.ToString("F1") ?? "0.0");
            renderStars(averageRating, $('.book-header-rating .header-stars'));

            // Modal handling
            $('#addReview').on('hidden.bs.modal', function () {
                $('body').removeClass('modal-open');
                $('.modal-backdrop').remove();

                // Reset form when modal is closed
                $('#addReviewForm')[0].reset();
                resetStars();
            });

            // Handle star hover effect
            stars.hover(
                function() { // mouseenter
                    if (!$('#starsRating').hasClass('selection-locked')) {
                        const star = $(this);
                        const hoverRating = parseInt(star.data('rating'));
                        highlightStars(hoverRating);
                    }
                },
                function() { // mouseleave
                    if (!$('#starsRating').hasClass('selection-locked')) {
                        highlightStars(selectedRating);
                    }
                }
            );

            // Handle star click
            stars.click(function() {
                const star = $(this);
                const clickedRating = parseInt(star.data('rating'));

                // If clicking the same star that's already selected, deselect all
                if (selectedRating === clickedRating) {
                    selectedRating = 0;
                    $('#rating-value').val(selectedRating);
                    resetStars();
                    $('#starsRating').removeClass('selection-locked');
                } else {
                    selectedRating = clickedRating;
                    $('#rating-value').val(selectedRating);
                    highlightStars(selectedRating);
                    $('#starsRating').addClass('selection-locked');
                }
            });

            // Handle clicking outside the stars to deselect
            $(document).on('click', function(event) {
                // If click is outside the stars
                if (!$(event.target).closest('.stars').length &&
                    !$(event.target).is('.stars') &&
                    selectedRating !== 0) {
                    selectedRating = 0;
                    $('#rating-value').val(selectedRating);
                    resetStars();
                    $('#starsRating').removeClass('selection-locked');
                }
            });

            // Prevent clicks inside the modal from triggering the document click handler
            $('.modal-content').on('click', function(event) {
                event.stopPropagation();
            });

            // Submit review button
            $('#submitReviewBtn').click(function() {
                // Validate the form
                const rating = $('#rating-value').val();
                const comment = $('textarea[name="Comment"]').val();

                if (!rating || rating == 0) {
                    alert("Please select a rating for the book.");
                    return;
                }

                if (!comment.trim()) {
                    alert("Please provide a comment about the book.");
                    return;
                }

                // Get the token
                const token = $('input[name="__RequestVerificationToken"]').val();

                // Submit the form via AJAX
                $.ajax({
                    url: '@Url.Action("Add", "Review")',
                    type: 'POST',
                    data: $('#addReviewForm').serialize(),
                    headers: {
                        'RequestVerificationToken': token
                    },
                    success: function(response) {
                        if (response && response.success) {
                            showSuccessNotification(); // Changed to use toastr

                            // Refresh the page after a short delay to show the new review
                            setTimeout(function() {
                                location.reload();
                            }, 2000);
                        } else {
                            toastr.error("Error: " + ((response && response.errors) ? response.errors.join(", ") : "Unknown error"));
                        }
                    },
                    error: function(xhr, status, error) {
                        toastr.error("Error submitting review: " + error);
                    }
                });
            });

            console.log("Review modal functionality initialized");

            // Set toastr options specifically for this page if needed
            toastr.options = {
                "closeButton": true,
                "debug": false,
                "newestOnTop": true,
                "progressBar": true,
                "positionClass": "toast-top-right",
                "preventDuplicates": false,
                "showDuration": "300",
                "hideDuration": "1000",
                "timeOut": "5000",
                "extendedTimeOut": "1000",
                "showEasing": "swing",
                "hideEasing": "linear",
                "showMethod": "fadeIn",
                "hideMethod": "fadeOut"
            };
        });
    </script>
}