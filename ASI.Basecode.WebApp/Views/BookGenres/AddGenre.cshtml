@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@model ASI.Basecode.Services.ServiceModels.BookGenreViewModel
@{
    ViewData["Title"] = "Add New Book Genre";
    Layout = "_AdminSidebarLayout";

    var addGenreConfirmationModel = new ASI.Basecode.WebApp.Models.ConfirmationModalModel
            {
                Id = "addGenreConfirmationModal",
                Title = "Add Genre Confirmation",
                Message = "Are you sure you want to add this genre?",
                CancelButtonText = "Cancel",
                ConfirmButtonText = "Add Genre",
                ConfirmButtonId = "confirmAddGenreAction",
                ConfirmButtonClass = "book-master-submit-button" 
            };
}

@section styles {
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css" />
    <link rel="stylesheet" href="~/css/admin/books/bookmaster.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/admin/common.css" asp-append-version="true" />
}

        <div class="admin-common-container-add">
            <div class="admin-common-content-wrapper-add">
             <div class="header-section">
                <h1>Add New Book Genre</h1>
                <p>Enter details of the new book Genre here.</p>
             </div>

        <form asp-action="AddGenre" asp-controller="BookGenre" method="post" id="addBookGenreForm">
            <input type="hidden" id="genreImageUrl" name="GenreImageUrl">

            <div class="content-master-grid-add">
                <div class="image-upload-section">
                    <div class="image-preview-container">
                        <img id="genreImagePreview" src="" alt="Genre Image Preview" style="display:none;">
                        <span id="imagePlaceholder" class="placeholder-text">No Image</span>
                    </div>

                    <input type="text" class="book-master-file-input-text" readonly id="genreImageFileNameDisplay">
                    <button type="button" class="master-browse-button" onclick="document.getElementById('genreImageFile').click();">BROWSE</button>
                    <input type="file" id="genreImageFile" accept="image/*" name="GenreImageFile" style="display: none;">

                    <p id="genreImageUploadStatus" class="master-upload-status">
                        <span class="file-size-info required-label">Max file size: 10MB</span>
                        <span class="supported-formats-info">Supported formats: JPG, PNG, JPEG</span>
                    </p>
                </div>

                    <div class="form-column">
                        <div class="book-master-form-group">
                            <label for="genrename" class="required-label">Genre Name</label>
                            <input maxlength="200" type="text" id="genrename" name="GenreName" class="book-master-form-input" value="@Model?.GenreName">
                            <span asp-validation-for="GenreName" class="text-danger"></span>
                        </div>
                        <div class="book-master-form-group">
                            <label for="genredescription">Description</label>
						<textarea rows="3" maxlength="500" type="text" id="genredescription" name="GenreDescription" class="book-master-form-input tracked-field">@Model?.GenreDescription</textarea>

                            <span asp-validation-for="GenreDescription" class="text-danger"></span>
                        </div>
                    </div>
            </div>

            <div class="button-container">
                <button type="button" class="cancel-button" onclick="window.location.href='/BookGenre/ListGenre';">CANCEL</button>
                <button type="submit" class="btn book-master-submit-button" id="addGenreSubmitButton">ADD GENRE</button>
            </div>
        </form>
            </div>
        </div>

<partial name="_ConfirmationModal" model="addGenreConfirmationModel" />




@section scripts {
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js"></script>
    <script type="module">

        // Initialize Bootstrap Modal instances
        const addGenreConfirmationModal = new bootstrap.Modal(document.getElementById('addGenreConfirmationModal'));
        const confirmationModalMessage = document.getElementById('confirmationModalMessage');

        document.addEventListener('DOMContentLoaded', function () {
            const genreImagePreview = document.getElementById('genreImagePreview');
            const imagePlaceholder = document.getElementById('imagePlaceholder');
            const genreImageUrl = document.getElementById('genreImageUrl');

            if (genreImagePreview && imagePlaceholder && genreImageUrl && genreImageUrl.value) {
                genreImagePreview.src = genreImageUrl.value;
                genreImagePreview.style.display = 'block';
                imagePlaceholder.style.display = 'none';
            }
        });

        // Setting up the file input
        document.getElementById('genreImageFile').addEventListener('change', function () {
            const fileName = this.files[0] ? this.files[0].name : '';
            document.getElementById('genreImageFileNameDisplay').value = fileName;

            const genreImagePreview = document.getElementById('genreImagePreview');
            const imagePlaceholder = document.getElementById('imagePlaceholder');

            if (this.files && this.files[0]) {
                const reader = new FileReader();
                reader.onload = function (e) {
                    if (genreImagePreview) {
                        genreImagePreview.src = e.target.result;
                        genreImagePreview.style.display = 'block';
                    }
                    if (imagePlaceholder) {
                        imagePlaceholder.style.display = 'none';
                    }
                };
                reader.readAsDataURL(this.files[0]);
            } else {
                if (genreImagePreview) {
                    genreImagePreview.src = '';
                    genreImagePreview.style.display = 'none';
                }
                if (imagePlaceholder) {
                    imagePlaceholder.style.display = 'block';
                }
            }

            const genreImageUploadStatusElement = document.getElementById('genreImageUploadStatus');

            if (genreImageUploadStatusElement) {
                const fileSizeInfo = genreImageUploadStatusElement.querySelector('.file-size-info');
                const supportedFormatsInfo = genreImageUploadStatusElement.querySelector('.supported-formats-info');
                if (fileSizeInfo) fileSizeInfo.textContent = 'Max file size: 1GB';
                if (supportedFormatsInfo) supportedFormatsInfo.textContent = 'Supported formats: JPG, PNG, JPEG';
                genreImageUploadStatusElement.classList.remove('error-message');
            }
        });

        // Your Firebase configuration
        // Transfer this secrets into AnalyserNode env or file, and include it in gitignore.
        const firebaseConfig = {
            apiKey: "AIzaSyA4CTMSbgGQN_yLn9lEZlswbZ_2A2Xhl0k",
            authDomain: "basabuzz-ca8fe.firebaseapp.com",
            projectId: "basabuzz-ca8fe",
            storageBucket: "basabuzz-ca8fe.firebasestorage.app",
            messagingSenderId: "206533484485",
            appId: "1:206533484485:web:2c71a06a17d5244efe75ac"
        };

        // Initialize Firebase
        import { initializeApp } from "https://www.gstatic.com/firebasejs/11.9.1/firebase-app.js";
        import { getStorage, ref, uploadBytesResumable, getDownloadURL, deleteObject } from "https://www.gstatic.com/firebasejs/11.9.1/firebase-storage.js";

        const app = initializeApp(firebaseConfig);
        const storage = getStorage(app);

        async function deleteFileFromFirebase(fileUrl) {
            if (!fileUrl) {
                console.warn("Attempted to delete null or empty file URL.");
                return;
            }
            try {
                const fileRef = ref(storage, fileUrl);
                await deleteObject(fileRef);
                console.log(`Successfully deleted file: ${fileUrl}`);
            } catch (error) {
                toastr.error(`Failed to delete file ${fileUrl}: ${error.message}`, 'Error');
                console.error(`Failed to delete file ${fileUrl}:`, error);
            }
        }

        async function rollbackFileUploads(uploadedGenreImageUrl, genreImageUploadStatusElement) {
            if (uploadedGenreImageUrl) {
                await deleteFileFromFirebase(uploadedGenreImageUrl);
                if (genreImageUploadStatusElement) {
                    const fileSizeInfo = genreImageUploadStatusElement.querySelector('.file-size-info');
                    if (fileSizeInfo) {
                        fileSizeInfo.textContent = 'Upload rolled back due to backend error.';
                    }
                    genreImageUploadStatusElement.classList.add('error-message');
                }
            }
        }

        //Firebase Upload Function
        async function uploadFileToFirebase(file, path, statusElement) {
            const fileSizeInfoSpan = statusElement ? statusElement.querySelector('.file-size-info') : null;

            if (!file) {
                if (fileSizeInfoSpan) {
                    fileSizeInfoSpan.textContent = 'No file selected.';
                }
                return null;
            }

            const timestamp = new Date().getTime();
            const randomString = Math.random().toString(36).substring(2, 8);
            const uniqueFileName = `${timestamp}-${randomString}-${file.name}`;

            const storageRef = ref(storage, path + uniqueFileName);
            const uploadTask = uploadBytesResumable(storageRef, file);

            return new Promise((resolve, reject) => {
                uploadTask.on('state_changed',
                    (snapshot) => {
                        const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;
                        if (fileSizeInfoSpan) { 
                            fileSizeInfoSpan.textContent = `Upload is ${progress.toFixed(2)}% done`;
                        }
                    },
                    (error) => {
                        toastr.error(`Genre image upload failed: ${error.message}`, 'Error');
                        console.error("Upload error:", error);
                        reject(error);
                    },
                    async () => {
                        try {
                            const downloadURL = await getDownloadURL(uploadTask.snapshot.ref);
                            if (fileSizeInfoSpan) {
                                fileSizeInfoSpan.textContent = 'Upload successful!';
                            }
                            resolve(downloadURL);
                        } catch (error) {
                            toastr.error(`Failed to get download URL: ${error.message}`, 'Error');
                            console.error("Get Download URL error:", error);
                            reject(error);
                        }
                    }
                );
            });
        }

        // Form submission listener
        document.getElementById('addBookGenreForm').addEventListener('submit', async (event) => {
            event.preventDefault(); // default submission

            const form = event.target;
            const genreNameInput = document.getElementById('genrename');
            const genreImageFile = document.getElementById('genreImageFile').files[0];
            const genreImageUploadStatus = document.getElementById('genreImageUploadStatus');
            const genreImageUrlInput = document.getElementById('genreImageUrl');

            let isValid = true;
            const missingFields = [];

            // required fields
            if (!genreNameInput.value.trim()) {
                missingFields.push('Genre Name');
                isValid = false;
            } 

            if (!genreImageFile && !genreImageUrlInput.value) { 
                missingFields.push('Genre Image');
                isValid = false;
            } 

            if (!isValid) {
                toastr.warning(`Please fill in all required fields. Missing: ${missingFields.join(', ')}.`, 'Warning');
                return;
            }

            addGenreConfirmationModal.show();
            form._currentSubmitEvent = event;
        });


        // Confirmation button inside the modal
        document.getElementById('confirmAddGenreAction').addEventListener('click', async () => {
            addGenreConfirmationModal.hide();

            const form = document.getElementById('addBookGenreForm');
            const submitButton = document.getElementById('addGenreSubmitButton');
            const genreImageFile = document.getElementById('genreImageFile').files[0];
            const genreImageUploadStatus = document.getElementById('genreImageUploadStatus');
            const genreImageUrlInput = document.getElementById('genreImageUrl');


            const originalGenreImageUrl = genreImageUrlInput.value;


            const fileSizeInfoSpan = genreImageUploadStatus.querySelector('.file-size-info');
            const supportedFormatsInfoSpan = genreImageUploadStatus.querySelector('.supported-formats-info');

            if (fileSizeInfoSpan) fileSizeInfoSpan.textContent = 'Max file size: 1GB';
            if (supportedFormatsInfoSpan) supportedFormatsInfoSpan.textContent = 'Supported formats: JPG, PNG, JPEG';
            genreImageUploadStatus.classList.remove('error-message');

            // Ensure the button exists before trying to disable/change text
            if (submitButton) {
                submitButton.disabled = true;
                submitButton.textContent = 'Processing...';
            }


            let uploadedGenreImageUrl = null;

            try {
                if (genreImageFile) {

                    uploadedGenreImageUrl = await uploadFileToFirebase(genreImageFile, 'genre_covers/', genreImageUploadStatus);
                    if (uploadedGenreImageUrl) {
                        genreImageUrlInput.value = uploadedGenreImageUrl;
                    } else {
                        throw new Error('Genre image upload failed.');
                    }
                }


                const formData = new FormData(form);

                // Fetch form data to the Controller
                const response = await fetch(form.action, {
                    method: form.method,
                    body: formData
                });

                if (response.ok) {
                    toastr.success('Genre added successfully!', 'Success!');
                    setTimeout(() => {
                        window.location.href = '/BookGenre/ListGenre';
                    }, 500);
                } else {
                    const errorData = await response.json();
                    const errorMessage = JSON.stringify(errorData.errors || errorData.message || "An unknown error occurred on the server.");
                    toastr.error(`${errorMessage}`, 'Error!');

                    // rollback uploaded file if backend submission fails and it was a new upload
                    if (uploadedGenreImageUrl && uploadedGenreImageUrl !== originalGenreImageUrl) {
                        await deleteFileFromFirebase(uploadedGenreImageUrl);
                    }
                }

            } catch (error) {
                console.error('Submission error:', error);
                toastr.error(`An unexpected error occurred during file upload or form submission: ${error.message}. Please try again.`, 'Error!');

                // rollback: delete uploaded file from Firebase
                if (uploadedGenreImageUrl && uploadedGenreImageUrl !== originalGenreImageUrl) {
                    await deleteFileFromFirebase(uploadedGenreImageUrl);
                }

            } finally {
                // Ensure the button exists before trying to re-enable/change text
                if (submitButton) {
                    submitButton.disabled = false;
                    submitButton.textContent = 'ADD GENRE';
                }
            }
        });
    </script>
}
