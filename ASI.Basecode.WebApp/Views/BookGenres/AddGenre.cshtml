@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@model ASI.Basecode.Services.ServiceModels.BookGenreViewModel
@{
    ViewData["Title"] = "Add New Book Genre";
    Layout = "_AdminSidebarLayout";
}

@section styles {
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <link rel="stylesheet" href="~/css/admin/books/bookmaster.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/admin/common.css" asp-append-version="true" />
}

        <div class="admin-common-container">
            <div class="admin-common-content-wrapper">
             <div class="header-section">
                <h1>Add New Book Genre</h1>
                <p>Enter details of the new book Genre here.</p>
             </div>

            <!-- Display validation summary errors -->
            <div asp-validation-summary="ModelOnly" class="validation-summary-errors"></div>

            <form asp-action="AddGenre" method="post" id="addBookGenreForm">
                <div class="book-master-form-grid">
                    <div class="book-master-form-group">
                    <label for="title" class="required-label">Name</label>
                    <input type="text" id="genrename" name="GenreName" class="book-master-form-input" value="@Model?.GenreName" required>
                        <span asp-validation-for="GenreName" class="text-danger"></span>
                    </div>
                    <div class="book-master-form-group">
                        <label for="subtitle">Description</label>
                    <input type="text" id="genredescription" name="GenreDescription" class="book-master-form-input" value="@Model?.GenreDescription">
                        <span asp-validation-for="GenreDescription" class="text-danger"></span>
                    </div>
                </div>

            <h3 class="book-master-form-section-title">Genre Image Upload</h3>
            <div class="book-master-form-group book-master-form-grid-span-2">
                <label for="genreImageFile" class="required-label">Select Genre Image</label>
                <div class="book-master-file-upload-wrapper">
                    <input type="text" class="book-master-file-input-text" readonly id="generImageFileNameDisplay" value="@Model?.GenreImageUrl">
                    <input type="file" id="genreImageFile" accept="image/*" name="GenreImageFile" style="display: none;">
                    <button type="button" class="book-master-browse-button" onclick="document.getElementById('genreImageFile').click();">BROWSE</button>
                </div>
                <p id="genreImageUploadStatus" class="book-master-upload-status">
                    <span class="file-size-info">Max file size: 1GB</span>
                    <span class="supported-formats-info">Supported formats: JPG, PNG, JPEG</span>
                </p>
                <input type="hidden" id="genreImageUrl" name="GenreImageUrl">
            </div>

            <div class="button-container">
                <button type="button" class="cancel-button" onclick="location.href='/BookGenre/ListGenre'">CANCEL</button>
                <button type="submit" class="book-master-submit-button" id="addGenreButton">ADD GENRE</button>
            </div>
            </form>
            </div>
        </div>

<div class="modal fade confirmation-modal" id="addGenreConfirmationModal" tabindex="-1" aria-labelledby="addGenreConfirmationModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header border-0">
                <h5 class="modal-title" id="addGenreConfirmationModalLabel">Add Genre Confirmation</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body text-center">
                <p class="mb-4" id="confirmationModalMessage">Are you sure you want to add this genre?</p>
                <div class="d-flex justify-content-center gap-2">
                    <button type="button" class="btn btn-secondary px-4" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-danger px-4" id="confirmAddGenreAction">Add Genre</button>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="modal fade status-modal" id="statusModal" tabindex="-1" aria-labelledby="statusModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-body text-center py-4">
                <div class="status-icon mb-3">
                    <i class="fas fa-check"></i>
                </div>
                <h5 class="modal-title mb-2" id="statusModalLabel">Success!</h5>
                <p class="mb-4" id="statusModalMessage">Book genre added successfully!</p>
                <button type="button" class="btn btn-secondary px-4" data-bs-dismiss="modal" id="statusModalClose">OK</button>
            </div>
        </div>
    </div>
</div>

@section scripts {
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
    <script type="module">

        // dynamic status modal function
        function showStatusModal(message, type = 'Success') {
            const confirmationModalElement = document.getElementById('addGenreConfirmationModal');
            const confirmationModal = bootstrap.Modal.getInstance(confirmationModalElement);
            if (confirmationModal) {
                confirmationModal.hide();
            }

            const statusModalTitle = document.getElementById('statusModalLabel');
            const statusModalMessage = document.getElementById('statusModalMessage');
            const statusModalClose = document.getElementById('statusModalClose');

            if (statusModalTitle) {
                statusModalTitle.textContent = type;
            }
            if (statusModalMessage) {
                statusModalMessage.textContent = message;
            }

            const statusIcon = document.querySelector('#statusModal .status-icon i');
            if (statusIcon) {
                statusIcon.classList.remove('fa-check', 'fa-times', 'fa-exclamation-triangle');
                if (type === 'Success') {
                    statusIcon.classList.add('fa-check');
                    statusIcon.style.color = '#28a745';
                } else if (type === 'Error') {
                    statusIcon.classList.add('fa-times');
                    statusIcon.style.color = '#dc3545';
                } else if (type === 'Warning') {
                    statusIcon.classList.add('fa-exclamation-triangle');
                    statusIcon.style.color = '#ffc107';
                } else { 
                    statusIcon.classList.add('fa-check');
                    statusIcon.style.color = '#28a745';
                }
            }

            // redirect on success
            if (type === 'Success') {
                statusModalClose.onclick = () => window.location.href = '/BookGenre/ListGenre'; 
            } else {
                statusModalClose.onclick = null;
            }

            setTimeout(() => {
                const statusModalElement = document.getElementById('statusModal');
                const statusModal = new bootstrap.Modal(statusModalElement);
                statusModal.show();
            }, 100);
        }


        const addGenreConfirmationModal = new bootstrap.Modal(document.getElementById('addGenreConfirmationModal'));
        const confirmationModalMessage = document.getElementById('confirmationModalMessage'); 

        //Setting up the file input 
        document.getElementById('genreImageFile').addEventListener('change', function () {
            const fileName = this.files[0] ? this.files[0].name : '';
            document.getElementById('generImageFileNameDisplay').value = fileName;
            const genreImageUploadStatusElement = document.getElementById('genreImageUploadStatus');
           
            if (genreImageUploadStatusElement) {
                const fileSizeInfo = genreImageUploadStatusElement.querySelector('.file-size-info');
                const supportedFormatsInfo = genreImageUploadStatusElement.querySelector('.supported-formats-info');
                if (fileSizeInfo) fileSizeInfo.textContent = 'Max file size: 1GB';
                if (supportedFormatsInfo) supportedFormatsInfo.textContent = 'Supported formats: JPG, PNG, JPEG';
                genreImageUploadStatusElement.classList.remove('error-message');
            }
        });
        
        // Your Firebase configuration
        //Transfer this secretes into AnalyserNode env or file, and include it in gitignore.
        const firebaseConfig = {
            apiKey: "AIzaSyA4CTMSbgGQN_yLn9lEZlswbZ_2A2Xhl0k",
            authDomain: "basabuzz-ca8fe.firebaseapp.com",
            projectId: "basabuzz-ca8fe",
            storageBucket: "basabuzz-ca8fe.firebasestorage.app",
            messagingSenderId: "206533484485",
            appId: "1:206533484485:web:2c71a06a17d5244efe75ac"
        };

        // Initialize Firebase
        import { initializeApp } from "https://www.gstatic.com/firebasejs/11.9.1/firebase-app.js";
        import { getStorage, ref, uploadBytesResumable, getDownloadURL, deleteObject } from "https://www.gstatic.com/firebasejs/11.9.1/firebase-storage.js";

        const app = initializeApp(firebaseConfig);
        const storage = getStorage(app);

        // async function deleteFileFromFirebase(fileUrl) {
        //     if (!fileUrl) {
        //         console.warn("Attempted to delete null or empty file URL.");
        //         return;
        //     }
        //     try {
        //         //Get a reference to the file from the download URL
        //         const fileRef = ref(storage, fileUrl);
        //         await deleteObject(fileRef);
        //         console.log(`Successfully deleted file: ${fileUrl}`);
        //     } catch (error) {
        //         alert(`Failed to delete file ${fileUrl}:`, error)
        //         console.error(`Failed to delete file ${fileUrl}:`, error);
        //     }
        // }

        // async function deleteCoverUrlFromError(coverUrlCopy, coverUploadStatusCopy) {
        //     if (coverUrlCopy) {
        //         await deleteFileFromFirebase(coverUrlCopy);
        //         coverUploadStatusCopy.textContent = 'Cover image upload rolled back due to backend error.';
        //     }
        //     else {
        //         alert("No cover Url")
        //     }
        // }

        // async function deleteBookUrlFromError(bookFileUploadStatusCopy, bookUrlCopy) {
        //     if (bookUrlCopy) {
        //         await deleteFileFromFirebase(bookUrlCopy);
        //         bookFileUploadStatusCopy.textContent = 'Book file upload rolled back due to backend error.';
        //     }
        //     else {
        //         alert("No book Url")
        //     }
        // }

        // async function deleteCoverUrl(coverUrlCopy) {
        //     if (coverUrlCopy) {
        //         await deleteFileFromFirebase(coverUrlCopy);
        //     }
        //     else {
        //         alert("No cover Url")
        //     }
        // }

        // async function deleteBookUrl(bookUrlCopy) {
        //     if (bookUrlCopy) {
        //         await deleteFileFromFirebase(bookUrlCopy);
        //     }
        //     else {
        //         alert("No book Url")
        //     }
        // }
        async function deleteFileFromFirebase(fileUrl) {
            if (!fileUrl) {
                console.warn("Attempted to delete null or empty file URL.");
                return;
            }
            try {
                const fileRef = ref(storage, fileUrl);
                await deleteObject(fileRef);
                console.log(`Successfully deleted file: ${fileUrl}`);
            } catch (error) {
                showStatusModal(`Failed to delete file ${fileUrl}: ${error.message}`, 'Error');
                console.error(`Failed to delete file ${fileUrl}:`, error);
            }
        }

        async function rollbackFileUploads(uploadedGenreImageUrl, genreImageUploadStatusElement) {
            if (uploadedGenreImageUrl) {
                await deleteFileFromFirebase(uploadedGenreImageUrl);
                if (genreImageUploadStatusElement) {
                    const fileSizeInfo = genreImageUploadStatusElement.querySelector('.file-size-info');
                    if (fileSizeInfo) {
                        fileSizeInfo.textContent = 'Upload rolled back due to backend error.';
                    }
                    genreImageUploadStatusElement.classList.add('error-message');
                }
            }
        }

        //Firebase Upload Function
        async function uploadFileToFirebase(file, path, statusElement) {
            // Ensure statusElement is valid and contains the target span before trying to update it
            const fileSizeInfoSpan = statusElement ? statusElement.querySelector('.file-size-info') : null;

            if (!file) {
                if (fileSizeInfoSpan) { // Only update if the span exists
                    fileSizeInfoSpan.textContent = 'No file selected.';
                }
                return null;
            }

            const timestamp = new Date().getTime();
            const randomString = Math.random().toString(36).substring(2, 8);
            const uniqueFileName = `${timestamp}-${randomString}-${file.name}`;

            const storageRef = ref(storage, path + uniqueFileName);
            const uploadTask = uploadBytesResumable(storageRef, file);

            return new Promise((resolve, reject) => {
                uploadTask.on('state_changed',
                    (snapshot) => {
                        const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;
                        if (fileSizeInfoSpan) { // Safely update progress
                            fileSizeInfoSpan.textContent = `Upload is ${progress.toFixed(2)}% done`;
                        }
                    },
                    (error) => {
                        showStatusModal(`Genre image upload failed: ${error.message}`, 'Error');
                        console.error("Upload error:", error);
                        reject(error);
                    },
                    async () => {
                        try {
                            const downloadURL = await getDownloadURL(uploadTask.snapshot.ref);
                            if (fileSizeInfoSpan) { // Safely update success message
                                fileSizeInfoSpan.textContent = 'Upload successful!';
                            }
                            resolve(downloadURL);
                        } catch (error) {
                            showStatusModal(`Failed to get download URL: ${error.message}`, 'Error');
                            console.error("Get Download URL error:", error);
                            reject(error);
                        }
                    }
                );
            });
        }

        // orm submission
        document.getElementById('addBookGenreForm').addEventListener('submit', async (event) => {
            event.preventDefault(); // default submission

            const form = event.target;
            const genreNameInput = document.getElementById('genrename');
            const genreImageFile = document.getElementById('genreImageFile').files[0];
            const genreImageUploadStatus = document.getElementById('genreImageUploadStatus');
            const genreImageUrlInput = document.getElementById('genreImageUrl'); 

            let isValid = true;
            const missingFields = [];

            // required fields
            if (!genreNameInput.value.trim()) {
                missingFields.push('Genre Name');
                genreNameInput.classList.add('is-invalid');
                isValid = false;
            } else {
                genreNameInput.classList.remove('is-invalid');
            }

            if (!genreImageFile && !genreImageUrlInput.value) { // no new file selected AND no existing URL
                missingFields.push('Genre Image');
                // ensure access the span before setting textContent
                const fileSizeInfoSpan = genreImageUploadStatus.querySelector('.file-size-info');
                if (fileSizeInfoSpan) {
                    fileSizeInfoSpan.textContent = 'Genre image is required.';
                }
                genreImageUploadStatus.classList.add('error-message');
                isValid = false;
            } else {
                const fileSizeInfoSpan = genreImageUploadStatus.querySelector('.file-size-info');
                if (fileSizeInfoSpan) {
                    fileSizeInfoSpan.textContent = 'Max file size: 1GB';
                }
                genreImageUploadStatus.classList.remove('error-message');
            }

            if (!isValid) {
                showStatusModal(`Please fill in all required fields. Missing: ${missingFields.join(', ')}.`, 'Warning');
                return;
            }

            addGenreConfirmationModal.show();
            form._currentSubmitEvent = event;
        });


        // confirmation button inside the modal
        document.getElementById('confirmAddGenreAction').addEventListener('click', async () => {
            addGenreConfirmationModal.hide(); 

            const form = document.getElementById('addBookGenreForm');
            const submitButton = document.getElementById('addGenreButton');
            const genreImageFile = document.getElementById('genreImageFile').files[0];
            const genreImageUploadStatus = document.getElementById('genreImageUploadStatus');
            const genreImageUrlInput = document.getElementById('genreImageUrl');


            const originalGenreImageUrl = genreImageUrlInput.value;


            const fileSizeInfoSpan = genreImageUploadStatus.querySelector('.file-size-info');
            const supportedFormatsInfoSpan = genreImageUploadStatus.querySelector('.supported-formats-info');

            if (fileSizeInfoSpan) fileSizeInfoSpan.textContent = 'Max file size: 1GB';
            if (supportedFormatsInfoSpan) supportedFormatsInfoSpan.textContent = 'Supported formats: JPG, PNG, JPEG';
            genreImageUploadStatus.classList.remove('error-message');

            submitButton.disabled = true;
            submitButton.textContent = 'Processing...';

            let uploadedGenreImageUrl = null;

            try {
                if (genreImageFile) {

                    uploadedGenreImageUrl = await uploadFileToFirebase(genreImageFile, 'genre_covers/', genreImageUploadStatus);
                    if (uploadedGenreImageUrl) {
                        genreImageUrlInput.value = uploadedGenreImageUrl;
                    } else {
                        throw new Error('Genre image upload failed.');
                    }
                }
                

                const formData = new FormData(form);

                // Fetch form data to the Controller
                const response = await fetch(form.action, { 
                    method: form.method,
                    body: formData
                });

                if (response.ok) {
                    showStatusModal('Genre added successfully!', 'Success');
                } else {
                    const errorData = await response.json();
                    const errorMessage = JSON.stringify(errorData.errors || errorData.message || "An unknown error occurred on the server.");
                    showStatusModal(`Server error: ${errorMessage}`, 'Error');

                    // rollback uploaded file if backend submission fails and it was a new upload
                    if (uploadedGenreImageUrl && uploadedGenreImageUrl !== originalGenreImageUrl) {
                        await deleteFileFromFirebase(uploadedGenreImageUrl);
                    }
                }

            } catch (error) {
                console.error('Submission error:', error);
                showStatusModal(`An unexpected error occurred during file upload or form submission: ${error.message}. Please try again.`, 'Error');

                // rollback: delete uploaded file from Firebase
                if (uploadedGenreImageUrl && uploadedGenreImageUrl !== originalGenreImageUrl) {
                    await deleteFileFromFirebase(uploadedGenreImageUrl);
                }

            } finally {
                submitButton.disabled = false;
                submitButton.textContent = 'ADD GENRE';
            }
        });


        //Firebase Upload Function
        //This function returns the download URL or null on failure/no file
        // async function uploadFileToFirebase(file, path, statusElement) {
        //     if (!file) {
        //         statusElement.textContent = 'No file selected.';
        //         return null; //Indicates no file was provided
        //     }

        //     //Generate New File Name
        //     const timestamp = new Date().getTime();
        //     const randomString = Math.random().toString(36).substring(2, 8);
        //     const uniqueFileName = `${timestamp}-${randomString}-${file.name}`;

        //     const storageRef = ref(storage, path + uniqueFileName);
        //     const uploadTask = uploadBytesResumable(storageRef, file);

        //     return new Promise((resolve, reject) => {
        //         uploadTask.on('state_changed',
        //             (snapshot) => {
        //                 const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;
        //                 statusElement.textContent = `Upload is ${progress.toFixed(2)}% done`;
        //             },
        //             (error) => {
        //                 statusElement.textContent = `Upload failed: ${error.message}`;
        //                 console.error("Upload error:", error);
        //                 reject(error); //Reject the promise on upload error
        //             },
        //             async () => {
        //                 try {
        //                     const downloadURL = await getDownloadURL(uploadTask.snapshot.ref);
        //                     statusElement.textContent = 'Upload successful!';
        //                     resolve(downloadURL); //Resolve with the download URL
        //                 } catch (error) {
        //                     statusElement.textContent = `Failed to get download URL: ${error.message}`;
        //                     console.error("Get Download URL error:", error);
        //                     reject(error); //Reject the promise if getting URL fails
        //                 }
        //             }
        //         );
        //     });
        // }

        // //trigger add genre button
        // document.getElementById('addGenreButton').addEventListener('click', async (event) => {
        //     event.preventDefault();//Prevent default submission

        //     const form = document.getElementById('addBookGenreForm');
        //     const genreImageFile = document.getElementById('genreImageFile').files[0];

        //     const genreImageUploadStatus = document.getElementById('genreImageUploadStatus');
        //     const genreImageUrl = document.getElementById('genreImageUrl');

        //     let hold_current_url = ""

        //     //Check for validity in the form such as required, max length etc
        //     let isFormValidNatively = form.checkValidity();

        //     //Manually check validity of File uploads
        //     let isFileValid = true;
        //     if (!genreImageFile) {
        //         isFileValid = false;
        //         isFormValidNatively = false;
        //     }

        //     if (!isFormValidNatively || !isFileValid) {
        //         //show pop-ups ex. required pop-up message etc.
        //         form.reportValidity();
        //         return;
        //     }

        //     let uploadedGenreImageUrl = null;
        //     //Uploading to Database
        //     if (genreImageFile) {
        //         genreImageUploadStatus.textContent = 'Uploading cover image...';
        //         uploadedGenreImageUrl = await uploadFileToFirebase(genreImageFile, 'genre_covers/', genreImageUploadStatus);
        //         if (uploadedGenreImageUrl) {
        //             genreImageUrl.value = uploadedGenreImageUrl;
        //         } else {
        //             throw new Error('Cover image upload failed.');
        //         }
        //     }
            


        //     //Prepering form data for submission
        //     const formData = new FormData(form);

        //     //fetch form data to the Controller
        //     try{
        //         const response = await fetch("/BookGenre/AddGenre",{
        //             method:"POST",
        //             body: formData
        //         })

        //         //Successful response
        //         if (response.ok) {
        //             const result = await response.json()
        //             alert(result.message)
        //             window.location.reload()
        //         }
        //         else {
        //             deleteCoverUrlFromError(uploadedGenreImageUrl, genreImageUploadStatus)
        //             const errorData = await response.json();

        //             const errorMessage = JSON.stringify(errorData.errors || errorData.message || "An unknown error occurred on the server.");
        //             alert(errorMessage) 
        //         }
        //     }catch(error){
        //         deleteCoverUrlFromError(uploadedGenreImageUrl, genreImageUploadStatus)
        //         alert('Network or unexpected error during backend submission:', error)
        //     }

        // })


    </script>
}
