@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@model ASI.Basecode.Services.ServiceModels.BookGenreViewModel
@{
    ViewData["Title"] = "Edit Book Genre";
    Layout = "_AdminSidebarLayout";

    var editGenreConfirmationModel = new ASI.Basecode.WebApp.Models.ConfirmationModalModel
            {
                Id = "editGenreConfirmationModal",
                Title = "Edit Genre Confirmation",
                Message = "Are you sure you want to save changes to this genre?",
                CancelButtonText = "Cancel",
                ConfirmButtonText = "Save Changes",
                ConfirmButtonId = "confirmEditGenreAction",
                ConfirmButtonClass = "btn-danger px-4" 
            };

    var discardChangesConfirmationModel = new ASI.Basecode.WebApp.Models.ConfirmationModalModel
            {
                Id = "discardChangesConfirmationModal",
                Title = "Discard Changes?",
                Message = "You have unsaved changes. Are you sure you want to discard them?",
                CancelButtonText = "Keep Editing",
                ConfirmButtonText = "Discard",
                ConfirmButtonId = "confirmDiscardChangesAction",
                ConfirmButtonClass = "btn-danger px-4" 
            };
}

@section styles {
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css" />
    <link rel="stylesheet" href="~/css/admin/books/bookmaster.css" asp-append-version="true"/>
    <link rel="stylesheet" href="~/css/admin/books/editgenre.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/admin/common.css" asp-append-version="true" />
}

<div class="admin-common-container-add">
    <div class="admin-common-content-wrapper-add">
        <div class="header-section">
            <h1>Edit Genre Details</h1>
            <p>Edit details of the genre here</p>
        </div>

        <div asp-validation-summary="ModelOnly" class="validation-summary-errors"></div>

        <form asp-action="EditGenre" method="post" id="editBookGenreForm">
            <input type="hidden" id="hiddenGenreId" name="BookGenreId" value="@Model?.BookGenreId" required>
            <input type="hidden" id="genreImageUrl" name="GenreImageUrl" value="@Model?.GenreImageUrl">

            <div class="content-master-grid-add">
                <div class="image-upload-section">
                    <div class="image-preview-container">
                        <img id="genreImagePreview" src="@Model?.GenreImageUrl" alt="Genre Image Preview" style="@(string.IsNullOrEmpty(Model?.GenreImageUrl) ? "display:none;" : "")">
                        <span id="imagePlaceholder" class="placeholder-text" style="@(string.IsNullOrEmpty(Model?.GenreImageUrl) ? "" : "display:none;")">No Image</span>
                    </div>

                    <button type="button" class="master-browse-button" onclick="document.getElementById('genreImageFile').click();">BROWSE</button>
                    <input type="file" id="genreImageFile" accept="image/*" name="GenreImageFile" style="display: none;">
                    <input type="text" class="book-master-file-input-text" readonly id="genreImageFileNameDisplay">

                    <p id="genreImageUploadStatus" class="master-upload-status">
                        <span class="file-size-info required-label">Max file size: 10mb</span>
                        <span class="supported-formats-info">Supported formats: JPG, PNG, JPEG</span>
                    </p>
                </div>

                    <div class="form-column">
                        <div class="book-master-form-group">
                            <label for="genrename" class="required-label">Genre</label>
                            <input maxlength="200" type="text" id="genrename" name="GenreName" class="book-master-form-input" value="@Model?.GenreName">
                            <span asp-validation-for="GenreName" class="text-danger"></span>
                        </div>
                        <div class="book-master-form-group">
                            <label for="genredescription">Description</label>
						<textarea rows="3" maxlength="500" type="text" id="genredescription" name="GenreDescription" class="book-master-form-input tracked-field">@Model?.GenreDescription</textarea>
						</textarea>
								<span asp-validation-for="GenreDescription" class="text-danger"></span>
                        </div>
                    </div>
            </div>

            <div class="button-container">
                <button type="button" class="cancel-button" id="cancelButton">CANCEL</button> 
                <button type="submit" class="book-master-submit-button" id="editGenreButton">SAVE CHANGES</button>
            </div>
        </form>
    </div>
</div>

<partial name="_ConfirmationModal" model="editGenreConfirmationModel" />
<partial name="_ConfirmationModal" model="discardChangesConfirmationModel" />



@section scripts {
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js"></script>
    <script type="module">

        // function showStatusModal(message, type = 'Success') {
        //     const statusModalElement = document.getElementById('statusModal');
        //     let statusModalInstance = bootstrap.Modal.getInstance(statusModalElement);
        //     if (!statusModalInstance) {
        //         statusModalInstance = new bootstrap.Modal(statusModalElement);
        //     }

        //     const statusModalTitle = document.getElementById('statusModalLabel');
        //     const statusModalMessage = document.getElementById('statusModalMessage');
        //     const statusModalClose = document.getElementById('statusModalClose');

        //     if (statusModalTitle) {
        //         statusModalTitle.textContent = type;
        //     }
        //     if (statusModalMessage) {
        //         statusModalMessage.textContent = message;
        //     }

        //     const statusIcon = document.querySelector('#statusModal .status-icon i');
        //     if (statusIcon) {
        //         statusIcon.classList.remove('fa-check', 'fa-times', 'fa-exclamation-triangle');
        //         if (type === 'Success') {
        //             statusIcon.classList.add('fa-check');
        //             statusIcon.style.color = '#28a745';
        //         } else if (type === 'Error') {
        //             statusIcon.classList.add('fa-times');
        //             statusIcon.style.color = '#dc3545';
        //         } else if (type === 'Warning') {
        //             statusIcon.classList.add('fa-exclamation-triangle');
        //             statusIcon.style.color = '#ffc107';
        //         } else {
        //             statusIcon.classList.add('fa-check');
        //             statusIcon.style.color = '#28a745';
        //         }
        //     }

        //     if (type === 'Success') {
        //         statusModalClose.onclick = () => window.location.href = '/BookGenre/ListGenre';
        //     } else {
        //         statusModalClose.onclick = null;
        //     }

        //     const confirmationModalElement = document.getElementById('editGenreConfirmationModal');
        //     const confirmationModal = bootstrap.Modal.getInstance(confirmationModalElement);
        //     if (confirmationModal) {
        //         confirmationModal.hide();
        //     }

        //     statusModalInstance.show();
        // }

        // initializaiton
        const editGenreConfirmationModal = new bootstrap.Modal(document.getElementById('editGenreConfirmationModal'));
        const confirmationModalMessage = document.getElementById('editGenreConfirmationModalText');
        const discardChangesConfirmationModal = new bootstrap.Modal(document.getElementById('discardChangesConfirmationModal')); 

        const editBookGenreForm = document.getElementById('editBookGenreForm');
        const genreNameInput = document.getElementById('genrename');
        const genredescriptionInput = document.getElementById('genredescription'); 
        const genreImageFile = document.getElementById('genreImageFile');
        const genreImagePreview = document.getElementById('genreImagePreview');
        const imagePlaceholder = document.getElementById('imagePlaceholder');
        const generImageFileNameDisplay = document.getElementById('generImageFileNameDisplay');
        const genreImageUploadStatusElement = document.getElementById('genreImageUploadStatus');
        const genreImageUrlInput = document.getElementById('genreImageUrl');


        let initialGenreName = genreNameInput.value;
        let initialGenreDescription = genredescriptionInput.value; // initial description
        let initialGenreImageUrl = genreImageUrlInput.value;
        let fileSelected = false; //track if a newfile selected
        

        //image preview
        function updateImagePreview(file) {
            if (file) {
                const reader = new FileReader();
                reader.onload = function (e) {
                    genreImagePreview.src = e.target.result;
                    genreImagePreview.style.display = 'block';
                    imagePlaceholder.style.display = 'none';
                };
                reader.readAsDataURL(file);
            } else {
                genreImagePreview.src = '';
                genreImagePreview.style.display = 'none';
                imagePlaceholder.style.display = 'block';
            }
        }

        function hasFormChanges() {
            const currentGenreName = genreNameInput.value;
            const currentGenreDescription = genredescriptionInput.value; // current description
            const currentGenreImageUrl = genreImageUrlInput.value; // current URL

            // checking if there are some editted files or inputsss
            if (currentGenreName !== initialGenreName || currentGenreDescription !== initialGenreDescription) {
                return true;
            }
            // check if a new file has been selected OR if the URL cleared
            if (fileSelected || (currentGenreImageUrl !== initialGenreImageUrl)) {
                return true;
            }

            return false;
        }


        //initial preview
        document.addEventListener('DOMContentLoaded', () => {
            if (genreImageUrlInput.value) {
                genreImagePreview.src = genreImageUrlInput.value;
                genreImagePreview.style.display = 'block';
                imagePlaceholder.style.display = 'none';
                if (generImageFileNameDisplay) {
                    const fileName = genreImageUrlInput.value.substring(genreImageUrlInput.value.lastIndexOf('/') + 1);
                    generImageFileNameDisplay.value = fileName;
                }
            } else {
                genreImagePreview.src = '';
                genreImagePreview.style.display = 'none';
                imagePlaceholder.style.display = 'block';
                if (generImageFileNameDisplay) {
                    generImageFileNameDisplay.value = '';
                }
            }

            // store initial values 
            initialGenreName = genreNameInput.value;
            initialGenreDescription = genredescriptionInput.value;
            initialGenreImageUrl = genreImageUrlInput.value;
        });


        //genreImageFile change
        genreImageFile.addEventListener('change', function () {
            fileSelected = true; 
            if (generImageFileNameDisplay) {
                const fileName = this.files[0] ? this.files[0].name : '';
                generImageFileNameDisplay.value = fileName;
            }
            updateImagePreview(this.files[0]);

            const fileSizeInfoSpan = genreImageUploadStatusElement.querySelector('.file-size-info');
            const supportedFormatsInfoSpan = genreImageUploadStatusElement.querySelector('.supported-formats-info');
            if (fileSizeInfoSpan) fileSizeInfoSpan.textContent = 'Max file size: 10MB';
            if (supportedFormatsInfoSpan) supportedFormatsInfoSpan.textContent = 'Supported formats: JPG, PNG, JPEG';
            genreImageUploadStatusElement.classList.remove('error-message');
        });

        genreNameInput.addEventListener('input', () => hasFormChanges());
        genredescriptionInput.addEventListener('input', () => hasFormChanges());



        // Firebase configuration
        //Transfer this secretes into AnalyserNode env or file, and include it in gitignore.
        const firebaseConfig = {
            apiKey: "AIzaSyA4CTMSbgGQN_yLn9lEZlswbZ_2A2Xhl0k",
            authDomain: "basabuzz-ca8fe.firebaseapp.com",
            projectId: "basabuzz-ca8fe",
            storageBucket: "basabuzz-ca8fe.firebasestorage.app",
            messagingSenderId: "206533484485",
            appId: "1:206533484485:web:2c71a06a17d5244efe75ac"
        };

        // Initialize Firebase
        import { initializeApp } from "https://www.gstatic.com/firebasejs/11.9.1/firebase-app.js";
        import { getStorage, ref, uploadBytesResumable, getDownloadURL, deleteObject } from "https://www.gstatic.com/firebasejs/11.9.1/firebase-storage.js";

        const app = initializeApp(firebaseConfig);
        const storage = getStorage(app);

       async function deleteFileFromFirebase(fileUrl) {
            if (!fileUrl) {
                console.warn("Attempted to delete null or empty file URL.");
                return;
            }
            try {
                const fileRef = ref(storage, fileUrl);
                await deleteObject(fileRef);
                console.log(`Successfully deleted file: ${fileUrl}`);
            } catch (error) {
                toastr.error(`Failed to delete old image from Firebase: ${error.message}`, 'Error');
                console.error(`Failed to delete file ${fileUrl}:`, error);
            }

        }

        //Firebase Upload Function
        //This function returns the download URL or null on failure/no file
        async function uploadFileToFirebase(file, path, statusElementContainer) {
            const fileSizeInfoSpan = statusElementContainer ? statusElementContainer.querySelector('.file-size-info') : null;

            if (!file) {
                if (fileSizeInfoSpan) {
                    fileSizeInfoSpan.textContent = 'No file selected.';
                }
                return null;
            }

            const timestamp = new Date().getTime();
            const randomString = Math.random().toString(36).substring(2, 8);
            const uniqueFileName = `${path}${timestamp}-${randomString}-${file.name}`;

            const storageRef = ref(storage, uniqueFileName);
            const uploadTask = uploadBytesResumable(storageRef, file);

            return new Promise((resolve, reject) => {
                uploadTask.on('state_changed',
                    (snapshot) => {
                        const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;
                        if (fileSizeInfoSpan) {
                            fileSizeInfoSpan.textContent = `Upload is ${progress.toFixed(2)}% done`;
                        }
                    },
                    (error) => {
                        toastr.error(`Image upload failed: ${error.message}`, 'Error');
                        console.error("Upload error:", error);
                        reject(error);
                    },
                    async () => {
                        try {
                            const downloadURL = await getDownloadURL(uploadTask.snapshot.ref);
                            if (fileSizeInfoSpan) {
                                fileSizeInfoSpan.textContent = 'Upload successful!';
                            }
                            resolve(downloadURL);
                        } catch (error) {
                            toastr.error(`Failed to get download URL: ${error.message}`, 'Error');
                            console.error("Get Download URL error:", error);
                            reject(error);
                        }
                    }
                );
            });
        }


       document.getElementById('editBookGenreForm').addEventListener('submit', async (event) => {
            event.preventDefault();

            const form = event.target;
            const submitButton = document.getElementById('editGenreButton'); 

            let isValid = true;
            const missingFields = [];

            if (!genreNameInput.value.trim()) {
                missingFields.push('Genre Name');
                genreNameInput.classList.add('is-invalid');
                isValid = false;
            } else {
                genreNameInput.classList.remove('is-invalid');
            }
            

            if (!genreImageFile.files[0] && !genreImageUrlInput.value) { 
                missingFields.push('Genre Image');
                const fileSizeInfoSpan = genreImageUploadStatusElement.querySelector('.file-size-info');
                if (fileSizeInfoSpan) {
                    fileSizeInfoSpan.textContent = 'Genre image is required.';
                }
                genreImageUploadStatusElement.classList.add('error-message');
                isValid = false;
            } else {
                const fileSizeInfoSpan = genreImageUploadStatusElement.querySelector('.file-size-info');
                if (fileSizeInfoSpan) {
                    fileSizeInfoSpan.textContent = 'Max file size: 10MB';
                }
                genreImageUploadStatusElement.classList.remove('error-message');
            }

            if (!isValid) {
                toastr.warning(`Please fill in all required fields. Missing: ${missingFields.join(', ')}.`, 'Warning');
                return;
            }

            if (!genreImageFile.files[0] && genreImageUrlInput.value === '') { 
                confirmationModalMessage.textContent = "You are attempting to save this genre without an image. Are you sure you want to proceed?";
            } else {
                confirmationModalMessage.textContent = "Are you sure you want to save changes to this genre?";
            }

            editGenreConfirmationModal.show();
            form._currentSubmitEvent = event;
        });



         document.getElementById('confirmEditGenreAction').addEventListener('click', async () => {
            editGenreConfirmationModal.hide();

            const form = document.getElementById("editBookGenreForm");
            const genreImageFileInstance = document.getElementById('genreImageFile'); 
            const genreImageFile = genreImageFileInstance.files[0];
            const genreImageUrlHiddenInput = document.getElementById('genreImageUrl');
            const submitButton = document.getElementById('editGenreButton');
            const genreImageUploadStatusElement = document.getElementById('genreImageUploadStatus');

            const originalGenreImageUrl = genreImageUrlInput.value; 

            const fileSizeInfoSpan = genreImageUploadStatusElement.querySelector('.file-size-info');
            const supportedFormatsInfoSpan = genreImageUploadStatusElement.querySelector('.supported-formats-info');
            if (fileSizeInfoSpan) fileSizeInfoSpan.textContent = 'Max file size: 10MB';
            if (supportedFormatsInfoSpan) supportedFormatsInfoSpan.textContent = 'Supported formats: JPG, PNG, JPEG';
            genreImageUploadStatusElement.classList.remove('error-message');


            submitButton.disabled = true;
            submitButton.textContent = 'Processing...';

            let uploadedGenreImageUrl = null;

            try {
                if (genreImageFile) {
                    uploadedGenreImageUrl = await uploadFileToFirebase(genreImageFile, 'genre_covers/', genreImageUploadStatusElement);
                    if (uploadedGenreImageUrl) {
                        genreImageUrlHiddenInput.value = uploadedGenreImageUrl;
                    } else {
                        throw new Error('New image upload failed or was cancelled.');
                    }
                }

                const formData = new FormData(form);

                const response = await fetch(form.action, {
                    method: form.method,
                    body: formData
                });

                if (response.ok) {
                    toastr.success('Genre updated successfully!', 'Success!');
                    if (uploadedGenreImageUrl && originalGenreImageUrl && uploadedGenreImageUrl !== originalGenreImageUrl) {
                        await deleteFileFromFirebase(originalGenreImageUrl);
                    }

                    setTimeout(() => {
                        window.location.href = '/BookGenre/ListGenre';
                    }, 500);
                } else {
                    const errorData = await response.json();
                    const errorMessage = JSON.stringify(errorData.errors || errorData.message || "An unknown error occurred on the server.");
                    toastr.error(`${errorMessage}`, 'Error!');

                    if (uploadedGenreImageUrl && uploadedGenreImageUrl !== originalGenreImageUrl) {
                        await deleteFileFromFirebase(uploadedGenreImageUrl);
                        // revert if new upload failed and backend failed
                        genreImageUrlHiddenInput.value = originalGenreImageUrl;
                        updateImagePreview(null);
                        if (originalGenreImageUrl) {
                            genreImagePreview.src = originalGenreImageUrl;
                            genreImagePreview.style.display = 'block';
                            imagePlaceholder.style.display = 'none';
                        } else {
                            genreImagePreview.src = '';
                            genreImagePreview.style.display = 'none';
                            imagePlaceholder.style.display = 'block';
                        }
                    }
                }

            } catch (error) {
                console.error('Submission error:', error);
                toastr.error(`An unexpected error occurred during form submission: ${error.message}. Please try again.`, 'Error!');

                if (uploadedGenreImageUrl && uploadedGenreImageUrl !== originalGenreImageUrl) {
                    await deleteFileFromFirebase(uploadedGenreImageUrl);

                    genreImageUrlHiddenInput.value = originalGenreImageUrl;
                    updateImagePreview(null);
                    if (originalGenreImageUrl) {
                        genreImagePreview.src = originalGenreImageUrl;
                        genreImagePreview.style.display = 'block';
                        imagePlaceholder.style.display = 'none';
                    } else {
                        genreImagePreview.src = '';
                        genreImagePreview.style.display = 'none';
                        imagePlaceholder.style.display = 'block';
                    }
                }
            } finally {
                submitButton.disabled = false;
                submitButton.textContent = 'SAVE CHANGES';
            }
        });


        document.getElementById('cancelButton').addEventListener('click', (event) => {
            if (hasFormChanges()) {
                discardChangesConfirmationModal.show();
            } else {
                window.location.href = '/BookGenre/ListGenre';
            }
        });


        document.getElementById('confirmDiscardChangesAction').addEventListener('click', () => {
            discardChangesConfirmationModal.hide();
            genreNameInput.value = initialGenreName;
            genredescriptionInput.value = initialGenreDescription;
            genreImageUrlInput.value = initialGenreImageUrl;
            genreImageFile.value = '';

            updateImagePreview(null); 


            if (initialGenreImageUrl) {
                genreImagePreview.src = initialGenreImageUrl;
                genreImagePreview.style.display = 'block';
                imagePlaceholder.style.display = 'none';
            } else {
                genreImagePreview.src = '';
                genreImagePreview.style.display = 'none';
                imagePlaceholder.style.display = 'block';
            }


            genreNameInput.classList.remove('is-invalid');
            genredescriptionInput.classList.remove('is-invalid');
            const fileSizeInfoSpan = genreImageUploadStatusElement.querySelector('.file-size-info');
            const supportedFormatsInfoSpan = genreImageUploadStatusElement.querySelector('.supported-formats-info');
            if (fileSizeInfoSpan) fileSizeInfoSpan.textContent = 'Max file size: 10MB';
            if (supportedFormatsInfoSpan) supportedFormatsInfoSpan.textContent = 'Supported formats: JPG, PNG, JPEG';
            genreImageUploadStatusElement.classList.remove('error-message');

            fileSelected = false; 

            window.location.href = '/BookGenre/ListGenre';
        });

        // document.getElementById('editGenreButton').addEventListener('click', async (event) => {
        //     event.preventDefault();

        //     const form = document.getElementById("editBookGenreForm")
        //     const genreImageFile = document.getElementById('genreImageFile').files[0];
        //     const genreImageUploadStatus = document.getElementById('genreImageUploadStatus');
        //     const genreImageUrl = document.getElementById('genreImageUrl');

        //     let hold_original_cover = genreImageUrl.value

        //     let isFormValidNatively = form.checkValidity();


        //     if (!isFormValidNatively) {
        //         //show pop-ups ex. required pop-up message etc.
        //         form.reportValidity();
        //         return;
        //     }

        //     let uploadedGenreImageUrl = null;
        //     //Uploading to Database
        //     if (genreImageFile) {
        //         genreImageUploadStatus.textContent = 'Uploading cover image...';
        //         uploadedGenreImageUrl = await uploadFileToFirebase(genreImageFile, 'genre_covers/', genreImageUploadStatus);
        //         if (uploadedGenreImageUrl) {
        //             genreImageUrl.value = uploadedGenreImageUrl;
        //         } else {
        //             throw new Error('Cover image upload failed.');
        //         }
        //     }

        //     const formData = new FormData(form);

        //     try{
        //         const response = await fetch("/BookGenre/EditGenre",{
        //             method:"POST",
        //             body: formData
        //         })

        //         //Successful response
        //         if (response.ok) {

        //             const result = await response.json()
        //             alert(result.message)
        //             if(uploadedGenreImageUrl){
        //                 deleteCoverUrl(hold_original_cover)
        //             }

        //             window.location.reload()
        //         }
        //         else {
        //             if(uploadedGenreImageUrl){
        //                 deleteCoverUrlFromError(uploadedGenreImageUrl, genreImageUploadStatus)
        //             }
                    
        //             const errorData = await response.json();

        //             const errorMessage = JSON.stringify(errorData.errors || errorData.message || "An unknown error occurred on the server.");
        //             alert(errorMessage)
        //         }
        //     }catch(error){
        //         if(uploadedGenreImageUrl){
        //             deleteCoverUrlFromError(uploadedGenreImageUrl, genreImageUploadStatus)
        //         }
        //         alert('Network or unexpected error during backend submission:', error)
        //     }

            
        // })

    </script>
}