@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@using ASI.Basecode.Services.ServiceModels;
@*@model List<BookGenreViewModel>;*@
@model PaginatedList<ASI.Basecode.Data.Models.BookGenre>

@{
    ViewData["Title"] = "Book Genre List";
    Layout = "_AdminSidebarLayout";

    var currentSearch = (string?)ViewData["CurrentSearch"];
    var currentSort = (string?)ViewData["CurrentSort"];
    var currentSortDescending = (bool)(ViewData["CurrentSortDescending"] ?? false);
	var currentPageSize = (int)(ViewData["CurrentPageSize"] ?? 10);

    var routeValues = new Dictionary<string, string>
    {
        ["searchTerm"] = currentSearch,
        ["sortOrder"] = currentSort,
        ["sortDescending"] = currentSortDescending.ToString().ToLowerInvariant(),
				["pageSize"] = currentPageSize.ToString(),

    };

    ViewData["CurrentPage"] = Model.PageIndex;
    ViewData["TotalPages"] = Model.TotalPages;

    var deleteGenreConfirmationModal = new ConfirmationModalModel
            {
                Id = "deleteGenreConfirmModal",
                Title = "Delete Genre Confirmation",
                Message = "Are you sure you want to delete this genre? This action cannot be undone.",
                CancelButtonText = "Cancel",
                ConfirmButtonText = "Delete",
                ConfirmButtonId = "confirmDeleteGenreBtn",
                ConfirmButtonClass = "btn-danger px-4"
            };
}

@section styles {
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css" />
    <link rel="stylesheet" href="~/css/admin/common.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/admin/books/bookmaster.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/admin/books/bookmasterlist.css" asp-append-version="true" />
    @* <link rel="stylesheet" href="~/css/admin/books/listbook.css" asp-append-version="true" /> *@
    <link rel="stylesheet" href="~/css/modal.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/pagination.css" asp-append-version="true" />

    <style>
        input[type="text"] {
            transform: translateY(-3px);
        }

            input[type="text"]:hover {
                transform: translateY(-2px);
            }
    </style>
}


<div class="content-card" style="padding: 40px>
    @Html.AntiForgeryToken()
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div class="header-section">
            <h1>Genres</h1>
            <p>Manage your Genre collection</p>
        </div>
        <p>
            <a href="/BookGenre/AddGenre" class="btn btn-secondary">
                <i class="fas fa-plus me-2" style="color: #fff"></i> ADD GENRE
            </a>
        </p>
    </div>

    <div class="card">
        <div class="card-body">
            <div class="search-filter-container" style="height: 50px; align-items: stretch; margin-top: 10px; margin-bottom: 15px">
                <form asp-action="ListGenre" asp-controller="BookGenre" method="get" class="d-flex align-items-center mb-3" id="searchFilterForm">
                    <div class="search-container" style="margin-right: 10px">
                        <i class="fas fa-search"></i>
                        <input type="text"
                               name="searchTerm"
                               value="@currentSearch"
                               class="book-master-form-input align-self-center" style="font-weight: 300; margin-right: 10px"
                               placeholder="Search genres…" />
                    </div>
                    <div class="action-buttons">
                        <button type="button" id="sortButton" class="btn btn-outline-secondary sort-btn"> <i class="fas fa-sort"></i> Sort & Filter</button>
                                      <a asp-action="ListGenre" class="btn btn-outline-secondary">
                        Clear All</a>
                        
                    </div>
					<input type="hidden" id="pageSizeField" name="pageSize" value="@currentPageSize" />

                    <input type="hidden" id="sortOrderField" name="sortOrder" value="@currentSort" />
                    <input type="hidden" id="sortDescendingField" name="sortDescending" value="@(currentSortDescending.ToString().ToLowerInvariant())" />
                </form>
            </div>
            <div class="sort-popup card shadow" id="sortPopup" style="display: none;">
                <div class="card-header bg-secondary text-white justify-center">
                    <h6 class="mb-0" style="margin-top: 6px;">Sort By:</h6>
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <label class="form-label fw-bold">Sort By:</label>
                        <div class="ms-2">
                            <div class="form-check">
                                <input class="form-check-input" type="radio" name="popupSortOrder" id="sortName" value="Name" @(currentSort == "Name" ? "checked" : "")>
                                <label class="form-check-label" for="sortId">Name</label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input" type="radio" name="popupSortOrder" id="sortDate" value="CreatedTime" @(currentSort == "CreatedTime" ? "checked" : "")>
                                <label class="form-check-label" for="sortDate">Created Date</label>
                            </div>
                        </div>
                    </div>

                    <div class="mb-3">
                        <label class="form-label fw-bold">Direction:</label>
                        <div class="ms-2">
                            <div class="form-check">
                                <input class="form-check-input" type="radio" name="popupSortDirection" id="sortAsc" value="false" @(!currentSortDescending ? "checked" : "")>
                                <label class="form-check-label" for="sortAsc">Ascending <i class="fas fa-arrow-up"></i></label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input" type="radio" name="popupSortDirection" id="sortDesc" value="true" @(currentSortDescending ? "checked" : "")>
                                <label class="form-check-label" for="sortDesc">Descending <i class="fas fa-arrow-down"></i></label>
                            </div>
                        </div>
                    </div>

					<div class="filter-section">
						<label class="form-label fw-bold">Items per page</label>
						<select name="pageSize" class="form-select" id="filterPageSize">
							<option value="10" selected="@(currentPageSize == 10 ? "selected" : null)">10</option>
							<option value="20" selected="@(currentPageSize == 20 ? "selected" : null)">20</option>
							<option value="50" selected="@(currentPageSize == 50 ? "selected" : null)">50</option>
							<option value="100" selected="@(currentPageSize == 100 ? "selected" : null)">100</option>
						</select>
					</div>

                    <div class="d-flex justify-content-end">
                        <button type="button" class="btn btn-outline-secondary" style="margin-right: 10px" id="closeSortButton">Cancel</button>
                        <button type="button" class="btn btn-secondary me-2" id="applySortButton">Apply</button>
                    </div>
                </div>
            </div>
                        <p style="font-size: 12px; color:"gray">Showing  @Model.StartIndex - @Model.EndIndex out of @Model.TotalCount genres</p>

            @*------------------------------------------------------------For searching sort and filter-----------------------------------------------*@

            <div class="table-container">
                @if (Model != null && Model.Any())
                {
                    <div class="table-responsive">
                        <table class="data-table table table-hover">
							<colgroup>
								<col style="width: 15%;">
								<col style="width: 20%;">
								<col style="width: 30%;">
								<col style="width: 15%;">

								<col style="width: 20%;">
							</colgroup>
                            <thead>
                                <tr>
                                    <th>Cover</th>
                                    <th>Name</th>
                                    <th>Description</th>
									<th>Created At</th>
                                    <th>Books</th>

                                    <th class="text-md-center">Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                            <td style="display:none" id="genre-id"></td>
                            <td style="display:none" id="cover-url"></td>
                            @foreach (var genre in Model)
                            {
                                <tr>
                                    <td>
                                        @if (!string.IsNullOrWhiteSpace(genre.GenreImageUrl))
                                        {
                                            <img src="@genre.GenreImageUrl" alt="Cover Image" class="cover-image" />
                                        }
                                        else
                                        {
                                            <span>No Image</span>
                                        }
                                    </td>
                                    <td>@genre.GenreName</td>
                                    <td>@genre.GenreDescription</td>
									<td>@genre.UploadDate?.ToString("dd MMMM yyyy")</td>
                                      <td>                
                                                     <a asp-controller="Book"
                                               asp-action="ListBook"
                                               asp-route-genreFilter="@genre.BookGenreId"
                                               asp-route-category="@genre.GenreName"
                                               class="action-icon-button text-secondary">
                                               View books
                                            </a></td>

                                    <td class="text-center">
                                        <div class="d-flex gap-2 justify-content-center">
                            
                                            <a href="/BookGenre/EditGenre/@genre.BookGenreId" class="action-icon-button text-primary">
                                                <i class="fas fa-edit" style="color: #447D9B"></i>
                                            </a>
                                            <button type="button" class="action-icon-button text-danger delete-genre-btn"
                                                    data-bs-toggle="modal" data-bs-target="#deleteGenreConfirmModal"
                                                    data-genre-id="@genre.BookGenreId"
                                                    data-genre-name="@genre.GenreName"
                                                    data-cover-url=@genre.GenreImageUrl 
                                                    @* id="deleteButton" *@>
                                                <i class="fas fa-trash" style="color: #B22222"></i>
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                            }
                            </tbody>
                        </table>
                    </div>
                }
                else
                {
                    <p class="empty-message">No genres found. Why not add some?</p>
                }
                <partial name="_PaginationPartial" view-data='@new ViewDataDictionary(ViewData) { { "RouteValues", routeValues } }' />

            </div>
          </div>
    </div>  
</div>
@* <input type="hidden" id="deleteGenreId" />
<input type="hidden" id="deleteGenreImageUrl" /> *@
<partial name="_ConfirmationModal" model="deleteGenreConfirmationModal" />
<div class="loading-overlay" id="loadingOverlay">
    <div class="loading-spinner"></div>
</div>


@section Scripts {
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="//cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js"></script>
    <script type = "module">
        import { showLoadingOverlay, hideLoadingOverlay } from "/js/common/_loadingSpinner.js";
        // Your Firebase configuration
        //Transfer this secretes into AnalyserNode env or file, and include it in gitignore.
        const firebaseConfig = {
            apiKey: "AIzaSyA4CTMSbgGQN_yLn9lEZlswbZ_2A2Xhl0k",
            authDomain: "basabuzz-ca8fe.firebaseapp.com",
            projectId: "basabuzz-ca8fe",
            storageBucket: "basabuzz-ca8fe.firebasestorage.app",
            messagingSenderId: "206533484485",
            appId: "1:206533484485:web:2c71a06a17d5244efe75ac"
        };

        // Initialize Firebase
        import { initializeApp } from "https://www.gstatic.com/firebasejs/11.9.1/firebase-app.js";
        import { getStorage, ref, uploadBytesResumable, getDownloadURL, deleteObject } from "https://www.gstatic.com/firebasejs/11.9.1/firebase-storage.js";

        const app = initializeApp(firebaseConfig);
        const storage = getStorage(app);

        async function deleteFileFromFirebase(fileUrl) {
            if (!fileUrl) {
                console.warn("Attempted to delete null or empty file URL.");
                return;
            }
            try {
                //Get a reference to the file from the download URL
                const fileRef = ref(storage, fileUrl);
                await deleteObject(fileRef);
                console.log(`Successfully deleted file: ${fileUrl}`);
            } catch (error) {
                alert(`Failed to delete file ${fileUrl}:`, error)
                console.error(`Failed to delete file ${fileUrl}:`, error);
            }
        }

        async function deleteCoverUrlFromError(coverUrlCopy, coverUploadStatusCopy) {
            if (coverUrlCopy) {
                await deleteFileFromFirebase(coverUrlCopy);
                coverUploadStatusCopy.textContent = 'Cover image upload rolled back due to backend error.';
            }
            else {
                alert("No cover Url")
            }
        }

        async function deleteBookUrlFromError(bookFileUploadStatusCopy, bookUrlCopy) {
            if (bookUrlCopy) {
                await deleteFileFromFirebase(bookUrlCopy);
                bookFileUploadStatusCopy.textContent = 'Book file upload rolled back due to backend error.';
            }
            else {
                alert("No book Url")
            }
        }

        async function deleteCoverUrl(coverUrlCopy) {
            if (coverUrlCopy) {
                await deleteFileFromFirebase(coverUrlCopy);
            }
            else {
                alert("No cover Url")
            }
        }

        async function deleteBookUrl(bookUrlCopy) {
            if (bookUrlCopy) {
                await deleteFileFromFirebase(bookUrlCopy);
            }
            else {
                alert("No book Url")
            }
        }

        //Firebase Upload Function
        //This function returns the download URL or null on failure/no file
        async function uploadFileToFirebase(file, path, statusElement) {
            if (!file) {
                statusElement.textContent = 'No file selected.';
                return null; //Indicates no file was provided
            }

            //Generate New File Name
            const timestamp = new Date().getTime();
            const randomString = Math.random().toString(36).substring(2, 8);
            const uniqueFileName = `${timestamp}-${randomString}-${file.name}`;

            const storageRef = ref(storage, path + uniqueFileName);
            const uploadTask = uploadBytesResumable(storageRef, file);

            return new Promise((resolve, reject) => {
                uploadTask.on('state_changed',
                    (snapshot) => {
                        const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;
                        statusElement.textContent = `Upload is ${progress.toFixed(2)}% done`;
                    },
                    (error) => {
                        statusElement.textContent = `Upload failed: ${error.message}`;
                        console.error("Upload error:", error);
                        reject(error); //Reject the promise on upload error
                    },
                    async () => {
                        try {
                            const downloadURL = await getDownloadURL(uploadTask.snapshot.ref);
                            statusElement.textContent = 'Upload successful!';
                            resolve(downloadURL); //Resolve with the download URL
                        } catch (error) {
                            statusElement.textContent = `Failed to get download URL: ${error.message}`;
                            console.error("Get Download URL error:", error);
                            reject(error); //Reject the promise if getting URL fails
                        }
                    }
                );
            });
        }


        // --- DELETE GENRE MODAL ---
        $(document).on('click', '.delete-genre-btn', function () {
            const genreId = $(this).data('genre-id');
            const genreName = $(this).data('genre-name');
            const genreImageUrl = $(this).data('cover-url');

            window.currentGenreToDelete = {
                id: genreId,
                name: genreName,
                imageUrl: genreImageUrl
            };

            $('#genreToDeleteName').text(genreName);
        });

        // Confirm delete 
        document.getElementById("confirmDeleteGenreBtn").addEventListener("click", async function () {
            if (!window.currentGenreToDelete?.id) {
                toastr.error("Genre ID is missing. Cannot proceed with deletion.");
                return;
            }

            const { id, imageUrl, name } = window.currentGenreToDelete;

            showLoadingOverlay();
            var deleteModalInstance = bootstrap.Modal.getInstance(document.getElementById('deleteGenreConfirmModal'));
            if (deleteModalInstance) deleteModalInstance.hide();

            try {
                const antiForgeryToken = $('input[name="__RequestVerificationToken"]').val();

                const response = await fetch("/BookGenre/DeleteGenre", {
                    method: "POST",
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': antiForgeryToken
                    },
                    body: JSON.stringify({ BookGenreId: id })
                });

                const result = await response.json();

                if (response.ok) {
                    if (imageUrl?.trim()) await deleteFileFromFirebase(imageUrl);
                    toastr.success(result.message || `Genre '${name}' deleted successfully!`);
                    setTimeout(() => window.location.reload(), 1000);
                } else {
                    toastr.error(result.message || `Error deleting genre '${name}'`);
                }
            } catch (error) {
                toastr.error("An unexpected error occurred. Please try again.");
                console.error("Error:", error);
            } finally {
                hideLoadingOverlay();
            }
        });

        // Sort popup functionality
            const sortButton = document.getElementById('sortButton');
            const sortPopup = document.getElementById('sortPopup');
            const closeSortButton = document.getElementById('closeSortButton');
            const applySortButton = document.getElementById('applySortButton');

            // Toggle the sort popup when the sort button is clicked
            sortButton.addEventListener('click', function(e) {
                e.preventDefault();
                if (sortPopup.style.display === 'none') {
                    sortPopup.style.display = 'block';
                } else {
                    sortPopup.style.display = 'none';
                }
            });

            // Close the sort popup when clicked outside
            document.addEventListener('click', function(e) {
                if (!sortButton.contains(e.target) &&
                    !sortPopup.contains(e.target) &&
                    sortPopup.style.display === 'block') {
                    sortPopup.style.display = 'none';
                }
            });

            // Close button
            closeSortButton.addEventListener('click', function() {
                sortPopup.style.display = 'none';
            });

        // Apply button
        // Apply button
        applySortButton.addEventListener('click', function () {
            // Get selected values
            const sortOrderValue = document.querySelector('input[name="popupSortOrder"]:checked').value;
            const sortDirectionValue = document.querySelector('input[name="popupSortDirection"]:checked').value;
							  const pageSizeValue  = document.getElementById('filterPageSize').value;

            // Update hidden form fields
            document.getElementById('sortOrderField').value = sortOrderValue;

            document.getElementById('sortDescendingField').value = sortDirectionValue;
										  document.getElementById('pageSizeField').value = pageSizeValue;

            // Find the main form and submit it
            document.querySelector('#searchFilterForm').submit();

        });

    </script>
    
}
