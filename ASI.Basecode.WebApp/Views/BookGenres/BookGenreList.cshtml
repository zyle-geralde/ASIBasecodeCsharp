@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@using ASI.Basecode.Services.ServiceModels;
@*@model List<BookGenreViewModel>;*@
@model PaginatedList<ASI.Basecode.Data.Models.BookGenre>

@{
    ViewData["Title"] = "Book Genre List";
    Layout = "_AdminSidebarLayout";

    var currentSearch = (string?)ViewData["CurrentSearch"];
    var currentSort = (string?)ViewData["CurrentSort"];
    var currentSortDescending = (bool)(ViewData["CurrentSortDescending"] ?? false);

    var routeValues = new Dictionary<string, string>
    {
        ["searchTerm"] = currentSearch,
        ["sortOrder"] = currentSort,
        ["sortDescending"] = currentSortDescending.ToString().ToLowerInvariant()
    };

    ViewData["CurrentPage"] = Model.PageIndex;
    ViewData["TotalPages"] = Model.TotalPages;
}

@section styles {
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <link rel="stylesheet" href="~/css/admin/common.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/admin/books/listbook.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/modal.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/pagination.css" asp-append-version="true" />
}


<div class="content-card p-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div class="header-section">
            <h1>Genres</h1>
            <p>Manage your Genre collection</p>
        </div>
        <p>
            <a href="/BookGenre/AddGenre" class="btn btn-secondary">
                <i class="fas fa-plus me-2" style="color: #fff"></i> ADD GENRE
            </a>
        </p>
    </div>


    @*--------------------------------------For Searching sort and filter---------------------------------------------*@
    <form asp-action="ListGenre" asp-controller="BookGenre" method="get" class="d-flex align-items-center mb-3" id="searchFilterForm">
        <input type="text"
               name="searchTerm"
               value="@currentSearch"
               class="form-control me-2"
               placeholder="Search users…" />

        <input type="hidden" id="sortOrderField" name="sortOrder" value="@currentSort" />
        <input type="hidden" id="sortDescendingField" name="sortDescending" value="@(currentSortDescending.ToString().ToLowerInvariant())" />

        <button type="submit" class="btn btn-primary">Apply</button>

        <button type="button" id="sortButton" class="sort-btn">Sort By <i class="fas fa-caret-down"></i></button>

    </form>
    <div class="sort-popup card shadow" id="sortPopup" style="display: none;">
        <div class="card-header bg-secondary text-white justify-center">
            <h6 class="mb-0" style="margin-top: 6px;">Sort By:</h6>
        </div>
        <div class="card-body">
            <div class="mb-3">
                <label class="form-label fw-bold">Sort By:</label>
                <div class="ms-2">
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="popupSortOrder" id="sortName" value="Name" @(currentSort == "Name" ? "checked" : "")>
                        <label class="form-check-label" for="sortId">Name</label>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="popupSortOrder" id="sortDate" value="CreatedTime" @(currentSort == "CreatedTime" ? "checked" : "")>
                        <label class="form-check-label" for="sortDate">Created Date</label>
                    </div>
                </div>
            </div>

            <div class="mb-3">
                <label class="form-label fw-bold">Direction:</label>
                <div class="ms-2">
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="popupSortDirection" id="sortAsc" value="false" @(!currentSortDescending ? "checked" : "")>
                        <label class="form-check-label" for="sortAsc">Ascending <i class="fas fa-arrow-up"></i></label>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="popupSortDirection" id="sortDesc" value="true" @(currentSortDescending ? "checked" : "")>
                        <label class="form-check-label" for="sortDesc">Descending <i class="fas fa-arrow-down"></i></label>
                    </div>
                </div>
            </div>

            <div class="d-flex justify-content-end">
                <button type="button" class="btn btn-outline-secondary" style="margin-right: 10px" id="closeSortButton">Cancel</button>
                <button type="button" class="btn btn-secondary me-2" id="applySortButton">Apply</button>
            </div>
        </div>
    </div>
    @*------------------------------------------------------------For searching sort and filter-----------------------------------------------*@

    @if (Model != null && Model.Any())
    {
        <div class="table-responsive">
            <table class="data-table table table-hover">
                <thead>
                    <tr>
                        <th>Cover</th>
                        <th>Name</th>
                        <th>Description</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                <td style="display:none" id="genre-id"></td>
                <td style="display:none" id="cover-url"></td>
                    @foreach (var genre in Model)
                    {
                    <tr>
                        <td>
                                @if (!string.IsNullOrWhiteSpace(genre.GenreImageUrl))
                                {
                                <img src="@genre.GenreImageUrl" alt="Cover Image" class="cover-image" />
                                }
                                else
                                {
                                <span>No Image</span>
                                }
                        </td>
                        <td>@genre.GenreName</td>
                        <td>@genre.GenreDescription</td>
                        <td>
                            <div class="d-flex gap-2">
                        <a asp-controller="Book"
                                   asp-action="ListBook"
                                   asp-route-genreFilter="@genre.BookGenreId"
                                   asp-route-category="@genre.GenreName"Add commentMore actions
                                   class="action-icon-button text-secondary">
                                  <i class="fas fa-info-circle"></i>
                                  </a>
                                <a href="/BookGenre/EditGenre/@genre.BookGenreId" class="action-icon-button text-primary">
                                    <i class="fas fa-edit"></i>
                                </a>
                                <button type="button" class="action-icon-button text-danger" data-genre-id="@genre.BookGenreId" data-cover-url=@genre.GenreImageUrl id="deleteButton">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </div>
                        </td>
                    </tr>
                    }
                </tbody>
            </table>
        </div>
    }
    else
    {
        <p class="empty-message">No books found. Why not add some?</p>
    }
    <partial name="_PaginationPartial" view-data='@new ViewDataDictionary(ViewData) { { "RouteValues", routeValues } }' />
</div>


@section Scripts {
    <script type = "module">
        // Your Firebase configuration
        //Transfer this secretes into AnalyserNode env or file, and include it in gitignore.
        const firebaseConfig = {
            apiKey: "AIzaSyA4CTMSbgGQN_yLn9lEZlswbZ_2A2Xhl0k",
            authDomain: "basabuzz-ca8fe.firebaseapp.com",
            projectId: "basabuzz-ca8fe",
            storageBucket: "basabuzz-ca8fe.firebasestorage.app",
            messagingSenderId: "206533484485",
            appId: "1:206533484485:web:2c71a06a17d5244efe75ac"
        };

        // Initialize Firebase
        import { initializeApp } from "https://www.gstatic.com/firebasejs/11.9.1/firebase-app.js";
        import { getStorage, ref, uploadBytesResumable, getDownloadURL, deleteObject } from "https://www.gstatic.com/firebasejs/11.9.1/firebase-storage.js";

        const app = initializeApp(firebaseConfig);
        const storage = getStorage(app);

        async function deleteFileFromFirebase(fileUrl) {
            if (!fileUrl) {
                console.warn("Attempted to delete null or empty file URL.");
                return;
            }
            try {
                //Get a reference to the file from the download URL
                const fileRef = ref(storage, fileUrl);
                await deleteObject(fileRef);
                console.log(`Successfully deleted file: ${fileUrl}`);
            } catch (error) {
                alert(`Failed to delete file ${fileUrl}:`, error)
                console.error(`Failed to delete file ${fileUrl}:`, error);
            }
        }

        async function deleteCoverUrlFromError(coverUrlCopy, coverUploadStatusCopy) {
            if (coverUrlCopy) {
                await deleteFileFromFirebase(coverUrlCopy);
                coverUploadStatusCopy.textContent = 'Cover image upload rolled back due to backend error.';
            }
            else {
                alert("No cover Url")
            }
        }

        async function deleteBookUrlFromError(bookFileUploadStatusCopy, bookUrlCopy) {
            if (bookUrlCopy) {
                await deleteFileFromFirebase(bookUrlCopy);
                bookFileUploadStatusCopy.textContent = 'Book file upload rolled back due to backend error.';
            }
            else {
                alert("No book Url")
            }
        }

        async function deleteCoverUrl(coverUrlCopy) {
            if (coverUrlCopy) {
                await deleteFileFromFirebase(coverUrlCopy);
            }
            else {
                alert("No cover Url")
            }
        }

        async function deleteBookUrl(bookUrlCopy) {
            if (bookUrlCopy) {
                await deleteFileFromFirebase(bookUrlCopy);
            }
            else {
                alert("No book Url")
            }
        }

        //Firebase Upload Function
        //This function returns the download URL or null on failure/no file
        async function uploadFileToFirebase(file, path, statusElement) {
            if (!file) {
                statusElement.textContent = 'No file selected.';
                return null; //Indicates no file was provided
            }

            //Generate New File Name
            const timestamp = new Date().getTime();
            const randomString = Math.random().toString(36).substring(2, 8);
            const uniqueFileName = `${timestamp}-${randomString}-${file.name}`;

            const storageRef = ref(storage, path + uniqueFileName);
            const uploadTask = uploadBytesResumable(storageRef, file);

            return new Promise((resolve, reject) => {
                uploadTask.on('state_changed',
                    (snapshot) => {
                        const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;
                        statusElement.textContent = `Upload is ${progress.toFixed(2)}% done`;
                    },
                    (error) => {
                        statusElement.textContent = `Upload failed: ${error.message}`;
                        console.error("Upload error:", error);
                        reject(error); //Reject the promise on upload error
                    },
                    async () => {
                        try {
                            const downloadURL = await getDownloadURL(uploadTask.snapshot.ref);
                            statusElement.textContent = 'Upload successful!';
                            resolve(downloadURL); //Resolve with the download URL
                        } catch (error) {
                            statusElement.textContent = `Failed to get download URL: ${error.message}`;
                            console.error("Get Download URL error:", error);
                            reject(error); //Reject the promise if getting URL fails
                        }
                    }
                );
            });
        }

        const show_delete_modal = document.querySelectorAll("#deleteButton");
        const get_genre_id = document.getElementById("genre-id")
        const get_cover_url = document.getElementById("cover-url")


        //Adding click event listener for each delete button
        //Grab the bookId cover Url and Book Url from which the trash button was clicked
        show_delete_modal.forEach(button =>  {
            button.addEventListener("click", async function (event) {


                const hold_genre_id = this.dataset.genreId
                const hold_cover_url = this.dataset.coverUrl

                get_genre_id.textContent = hold_genre_id
                get_cover_url.textContent = hold_cover_url

                try {
                    const response = await fetch("/BookGenre/DeleteGenre", {
                        method: "POST",
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({ BookGenreId: get_genre_id.textContent })
                    })

                    if (response.ok) {
                        const result = await response.json()
                        alert(`${result.message}`)
                        if (get_cover_url.textContent !== null || get_cover_url.textConent !== "") {
                            await deleteCoverUrl(get_cover_url.textContent);
                        }


                        window.location.reload()
                    }
                    else {
                        alert(`Error: ${result.message}`)
                    }
                }
                catch (error) {
                    alert(`Error: An unexpected error occurred while deleting book data. Please try again.`)
                }

            })
        })

        //--------------------------FOR SORTING-----------------------------
        // Sort popup functionality
        const sortButton = document.getElementById('sortButton');
        const sortPopup = document.getElementById('sortPopup');
        const closeSortButton = document.getElementById('closeSortButton');
        const applySortButton = document.getElementById('applySortButton');

        // Toggle the sort popup when the sort button is clicked
        sortButton.addEventListener('click', function (e) {
            e.preventDefault();
            if (sortPopup.style.display === 'none') {
                sortPopup.style.display = 'block';
            } else {
                sortPopup.style.display = 'none';
            }
        });

        // Close the sort popup when clicked outside
        document.addEventListener('click', function (e) {
            if (!sortButton.contains(e.target) &&
                !sortPopup.contains(e.target) &&
                sortPopup.style.display === 'block') {
                sortPopup.style.display = 'none';
            }
        });

        // Close button
        closeSortButton.addEventListener('click', function () {
            sortPopup.style.display = 'none';
        });

        // Apply button
        // Apply button
        applySortButton.addEventListener('click', function () {
            // Get selected values
            const sortOrderValue = document.querySelector('input[name="popupSortOrder"]:checked').value;
            const sortDirectionValue = document.querySelector('input[name="popupSortDirection"]:checked').value;

            // Update hidden form fields
            document.getElementById('sortOrderField').value = sortOrderValue;
            document.getElementById('sortDescendingField').value = sortDirectionValue;

            // Find the main form and submit it
            document.querySelector('#searchFilterForm').submit();
        });

    </script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
}
