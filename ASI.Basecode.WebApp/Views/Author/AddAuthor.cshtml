@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@model ASI.Basecode.Services.ServiceModels.AuthorViewModel
@{
    ViewData["Title"] = "Add New Author";
    Layout = "_AdminSidebarLayout";
}

@section styles {
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css" />
    <link rel="stylesheet" href="~/css/admin/books/bookmaster.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/admin/common.css" asp-append-version="true" />

}

<div class="admin-common-container">
    <div class="admin-common-content-wrapper">
        <div class="header-section">
            <h1>Add New Author</h1>
            <p>Enter details of the new author here</p>
        </div>

        <div asp-validation-summary="ModelOnly" class="validation-summary-errors"></div>

        <form asp-action="AddAuthor" asp-controller="Author" method="post" id="addAuthorForm">
            <input type="hidden" id="authorImageUrl" name="AuthorImageUrl">

            <div class="content-master-grid">
                <div class="image-upload-section">
                    <div class="author-image-preview-container">
                        <img id="authorImagePreview" src="" alt="Author Image Preview" style="display:none;">
                        <span id="imagePlaceholder" class="placeholder-text">No Image</span>
                    </div>

                    <input type="text" class="book-master-file-input-text" readonly id="authorImageFileNameDisplay">
                    <button type="button" class="master-browse-button" onclick="document.getElementById('authorImageFile').click();">BROWSE</button>
                    <input type="file" id="authorImageFile" accept="image/*" name="AuthorImageFile" style="display: none;">

                    <p id="authorImageUploadStatus" class="master-upload-status">
                        <span class="file-size-info">Max file size: 1GB</span>
                        <span class="supported-formats-info">Supported formats: JPG, PNG, JPEG</span>
                    </p>
                </div>

                <div>
                    <div class="book-master-form-grid">
                        <div class="book-master-form-group">
                            <label for="authorName" class="required-label">Author Name</label>
                            <input type="text" id="authorName" name="AuthorName" class="book-master-form-input" value="@Model?.AuthorName" required>
                            <span asp-validation-for="AuthorName" class="text-danger"></span>
                        </div>
                        <div class="book-master-form-group">
                            <label for="authorDescription">Description</label>
                            <input type="text" id="authorDescription" name="AuthorDescription" class="book-master-form-input" value="@Model?.AuthorDescription">

                            <span asp-validation-for="AuthorDescription" class="text-danger"></span>
                        </div>
                    </div>
                </div>
            </div>

            <div class="button-container">
                <button type="button" class="cancel-button" onclick="window.location.href='/Author/Index';">CANCEL</button>
                <button type="submit" class="book-master-submit-button" id="addAuthorSubmitButton">ADD AUTHOR</button>
            </div>
        </form>
    </div>
</div>

<div class="modal fade confirmation-modal" id="addAuthorConfirmationModal" tabindex="-1" aria-labelledby="addAuthorConfirmationModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header border-0">
                <h5 class="modal-title" id="addAuthorConfirmationModalLabel">Add Author Confirmation</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body text-center">
                <p class="mb-4" id="addConfirmationModalMessage">Are you sure you want to add this author?</p>
                <div class="d-flex justify-content-center gap-2">
                    <button type="button" class="btn btn-secondary px-4" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary px-4" id="confirmAddAuthorAction">Add Author</button>
                </div>
            </div>
        </div>
    </div>
</div>

@section scripts {
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
    <script type="module">

        // Your Firebase configuration
        //Transfer this secretes into AnalyserNode env or file, and include it in gitignore.
        const firebaseConfig = {
            apiKey: "AIzaSyA4CTMSbgGQN_yLn9lEZlswbZ_2A2Xhl0k",
            authDomain: "basabuzz-ca8fe.firebaseapp.com",
            projectId: "basabuzz-ca8fe",
            storageBucket: "basabuzz-ca8fe.firebasestorage.app",
            messagingSenderId: "206533484485",
            appId: "1:206533484485:web:2c71a06a17d5244efe75ac"
        };

        // Initialize Firebase
        import { initializeApp } from "https://www.gstatic.com/firebasejs/11.9.1/firebase-app.js";
        import { getStorage, ref, uploadBytesResumable, getDownloadURL, deleteObject } from "https://www.gstatic.com/firebasejs/11.9.1/firebase-storage.js";

        const app = initializeApp(firebaseConfig);
        const storage = getStorage(app);

        async function deleteFileFromFirebase(fileUrl) {
            if (!fileUrl) {
                console.warn("Attempted to delete null or empty file URL.");
                return;
            }
            try {
                const fileRef = ref(storage, fileUrl);
                await deleteObject(fileRef);
                console.log(`Successfully deleted file: ${fileUrl}`);
            } catch (error) {
                showStatusModal(`Failed to delete file ${fileUrl}: ${error.message}`, 'Error', 'Error');
                console.error(`Failed to delete file ${fileUrl}:`, error);
            }
        }

        async function rollbackFileUploads(uploadedGImageUrl, imageUploadStatusElement) {
            if (uploadedGImageUrl) {
                await deleteFileFromFirebase(uploadedGImageUrl);
                if (imageUploadStatusElement) {
                    const fileSizeInfo = imageUploadStatusElement.querySelector('.file-size-info');
                    if (fileSizeInfo) {
                        fileSizeInfo.textContent = 'Upload rolled back due to backend error.';
                    }
                    imageUploadStatusElement.classList.add('error-message');
                }
            }
        }

        //Firebase Upload Function
        async function uploadFileToFirebase(file, path, statusElement) {

            const fileSizeInfoSpan = statusElement ? statusElement.querySelector('.file-size-info') : null;

            if (!file) {
                if (fileSizeInfoSpan) {
                    fileSizeInfoSpan.textContent = 'No file selected.';
                }
                return null;
            }

            const timestamp = new Date().getTime();
            const randomString = Math.random().toString(36).substring(2, 8);
            const uniqueFileName = `${timestamp}-${randomString}-${file.name}`;

            const storageRef = ref(storage, path + uniqueFileName);
            const uploadTask = uploadBytesResumable(storageRef, file);

            return new Promise((resolve, reject) => {
                uploadTask.on('state_changed',
                    (snapshot) => {
                        const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;
                        if (fileSizeInfoSpan) {
                            fileSizeInfoSpan.textContent = `Upload is ${progress.toFixed(2)}% done`;
                        }
                    },
                    (error) => {
                        toastr.error(`Author image upload failed: ${error.message}`);
                        console.error("Upload error:", error);
                        reject(error);
                    },
                    async () => {
                        try {
                            const downloadURL = await getDownloadURL(uploadTask.snapshot.ref);
                            if (fileSizeInfoSpan) {
                                fileSizeInfoSpan.textContent = 'Upload successful!';
                            }
                            resolve(downloadURL);
                        } catch (error) {
                            toastr.error(`Failed to get download URL: ${error.message}`);
                            console.error("Get Download URL error:", error);
                            reject(error);
                        }
                    }
                );
            });
        }


        //Setting up the file input
        // document.getElementById('authorImageFile').addEventListener('change', function () {
        //     const fileNameDisplay = document.getElementById('authorImageFileNameDisplay');
        //     const authorImagePreview = document.getElementById('authorImagePreview');
        //     const imagePlaceholder = document.getElementById('imagePlaceholder');
        //     const authorImageUploadStatusElement = document.getElementById('authorImageUploadStatus');
        //     // const fileName = this.files[0] ? this.files[0].name : '';
        //     // document.getElementById('authorImageFileNameDisplay').value = fileName;
        //     // const authorImageUploadStatusElement = document.getElementById('authorImageUploadStatus');

        //     // if (authorImageUploadStatusElement) {
        //     //     const fileSizeInfo = authorImageUploadStatusElement.querySelector('.file-size-info');
        //     //     const supportedFormatsInfo = authorImageUploadStatusElement.querySelector('.supported-formats-info');
        //     //     if (fileSizeInfo) fileSizeInfo.textContent = 'Max file size: 1GB';
        //     //     if (supportedFormatsInfo) supportedFormatsInfo.textContent = 'Supported formats: JPG, PNG, JPEG';
        //     //     authorImageUploadStatusElement.classList.remove('error-message');
        //     // }
        //     if (this.files && this.files[0]) {
        //         const file = this.files[0];
        //         fileNameDisplay.textContent = file.name;
        //         const reader = new FileReader();

        //         reader.onload = function (e) {
        //             authorImagePreview.src = e.target.result;
        //             authorImagePreview.style.display = 'block';
        //             imagePlaceholder.style.display = 'none';
        //         };
        //         reader.readAsDataURL(file);
        //     } else {
        //         fileNameDisplay.textContent = '';
        //         authorImagePreview.src = '';
        //         authorImagePreview.style.display = 'none';
        //         imagePlaceholder.style.display = 'block';
        //     }

        //     if (authorImageUploadStatusElement) {
        //         const fileSizeInfo = authorImageUploadStatusElement.querySelector('.file-size-info');
        //         const supportedFormatsInfo = authorImageUploadStatusElement.querySelector('.supported-formats-info');
        //         if (fileSizeInfo) fileSizeInfo.textContent = 'Max file size: 1GB';
        //         if (supportedFormatsInfo) supportedFormatsInfo.textContent = 'Supported formats: JPG, PNG, JPEG';
        //         authorImageUploadStatusElement.classList.remove('error-message');
        //     }
        // });

        document.addEventListener('DOMContentLoaded', function () {
            // image preview
            const authorImageFile = document.getElementById('authorImageFile');
            const authorImagePreview = document.getElementById('authorImagePreview');
            const imagePlaceholder = document.getElementById('imagePlaceholder');
            const authorImageFileNameDisplay = document.getElementById('authorImageFileNameDisplay');


            const addAuthorForm = document.getElementById("addAuthorForm");
            const authorNameInput = document.getElementById('authorName');
            const authorImageUploadStatusElement = document.getElementById('authorImageUploadStatus');
            const authorImageUrlInput = document.getElementById('authorImageUrl');
            const submitButton = document.getElementById('addAuthorSubmitButton');

            if (authorImageFile) {
                authorImageFile.addEventListener('change', function () {
                    const file = this.files[0];
                    if (file) {
                        const reader = new FileReader();
                        reader.onload = function (e) {
                            authorImagePreview.src = e.target.result;
                            authorImagePreview.style.display = 'block';
                            imagePlaceholder.style.display = 'none';
                            authorImageFileNameDisplay.value = file.name;
                        };
                        reader.readAsDataURL(file);
                    } else {
                        authorImagePreview.src = '';
                        authorImagePreview.style.display = 'none';
                        imagePlaceholder.style.display = 'block';
                        authorImageFileNameDisplay.value = '';
                    }

                    const fileSizeInfo = authorImageUploadStatusElement.querySelector('.file-size-info');
                    const supportedFormatsInfo = authorImageUploadStatusElement.querySelector('.supported-formats-info');
                    if (fileSizeInfo) fileSizeInfo.textContent = 'Max file size: 1GB';
                    if (supportedFormatsInfo) supportedFormatsInfo.textContent = 'Supported formats: JPG, PNG, JPEG';
                    authorImageUploadStatusElement.classList.remove('error-message');
                });
            }



            //  document.getElementById('addAuthorForm').addEventListener('submit', async (event) => {
            //     event.preventDefault();

            //     const form = document.getElementById('addAuthorForm');
            //     const submitButton = document.getElementById('addAuthorSubmitButton');
            //     const authorNameInput = document.getElementById('authorName');
            //     const authorImageFile = document.getElementById('authorImageFile').files[0];
            //     const authorImageUploadStatus = document.getElementById('authorImageUploadStatus');
            //     const authorImageUrlInput = document.getElementById('authorImageUrl');


            //     //const originalAuthorImageUrl = authorImageUrlInput.value;
            //     if (authorNameInput.value.trim() === '') {
            //         showStatusModal('Author Name is required.', 'Validation Error', 'Warning');
            //         return;
            //     }

            //     if (!authorImageFile) {
            //         showStatusModal('Author image is required.', 'Validation Error', 'Warning');
            //         return;
            //     }

            //     const fileSizeInfoSpan = authorImageUploadStatus.querySelector('.file-size-info');
            //     const supportedFormatsInfoSpan = authorImageUploadStatus.querySelector('.supported-formats-info');

            //     if (fileSizeInfoSpan) fileSizeInfoSpan.textContent = 'Max file size: 1GB';
            //     if (supportedFormatsInfoSpan) supportedFormatsInfoSpan.textContent = 'Supported formats: JPG, PNG, JPEG';
            //     authorImageUploadStatus.classList.remove('error-message');

            //     submitButton.disabled = true;
            //     submitButton.textContent = 'Processing...';

            //     let uploadedAuthorImageUrl = null;

            //     try {
            //         if (authorImageFile) {
            //             // max file size checking
            //             const MAX_FILE_SIZE_BYTES = 1 * 1024 * 1024 * 1024; // 1GB
            //             if (authorImageFile.size > MAX_FILE_SIZE_BYTES) {
            //                 showStatusModal('File size exceeds the 1GB limit.', 'Upload Error', 'Error');
            //                 if (fileSizeInfoSpan) fileSizeInfoSpan.textContent = 'File too large!';
            //                 authorImageUploadStatus.classList.add('error-message');
            //                 submitButton.disabled = false;
            //                 submitButton.textContent = 'ADD AUTHOR';
            //                 return;
            //             }

            //             uploadedAuthorImageUrl = await uploadFileToFirebase(authorImageFile, 'author_covers/', authorImageUploadStatus);
            //             if (uploadedAuthorImageUrl) {
            //                 authorImageUrlInput.value = uploadedAuthorImageUrl;
            //             } else {
            //                 throw new Error('Author image upload failed.');
            //             }
            //         }


            //         const formData = new FormData(form);

            //         // Fetch form data to the Controller
            //         const response = await fetch(form.action, {
            //             method: form.method,
            //             body: formData
            //         });

            //         if (response.ok) {
            //             const successData = await response.json();
            //             // alert(successData.message)
            //             showStatusModal(successData.message, 'Success', 'Success');
            //             form.reset();
            //             document.getElementById('authorImageFileNameDisplay').textContent = 'No file chosen';
            //             document.getElementById('authorImagePreview').src = '';
            //             document.getElementById('authorImagePreview').style.display = 'none';
            //             document.getElementById('imagePlaceholder').style.display = 'block';
            //         } else {
            //             const errorData = await response.json();
            //             const errorMessage = JSON.stringify(errorData.errors || errorData.message || "An unknown error occurred on the server.");
            //             // alert(errorMessage)
            //             showStatusModal(errorMessage, 'Error', 'Error');

            //             // rollback uploaded file if backend submission fails and it was a new upload
            //             if (uploadedAuthorImageUrl) {
            //                 await deleteFileFromFirebase(uploadedAuthorImageUrl);
            //             }
            //         }

            //     } catch (error) {
            //         console.error('Submission error:', error);
            //         // alert('Submission error:', error)
            //         showStatusModal(`Submission error: ${error.message}`, 'Error', 'Error');

            //         // rollback: delete uploaded file from Firebase
            //         if (uploadedAuthorImageUrl) {
            //             await deleteFileFromFirebase(uploadedAuthorImageUrl);
            //         }

            //     } finally {
            //         submitButton.disabled = false;
            //         submitButton.textContent = 'ADD AUTHOR';
            //     }

            // });


            // confirmation modal for submission
            document.getElementById('addAuthorSubmitButton').addEventListener('click', (event) => {
                event.preventDefault();
                if (authorNameInput.value.trim() === '') {
                    toastr.warning('Author Name is required.');
                    return;
                }

                if (!authorImageFile.files || authorImageFile.files.length === 0) {
                    toastr.warning('Author image is required.');
                    return;
                }

                const confirmationModal = new bootstrap.Modal(document.getElementById('addAuthorConfirmationModal'));
                confirmationModal.show();
            });

            document.getElementById('confirmAddAuthorAction').addEventListener('click', async () => {

                const confirmationModal = bootstrap.Modal.getInstance(document.getElementById('addAuthorConfirmationModal'));
                confirmationModal.hide();

                submitButton.disabled = true;
                submitButton.textContent = 'Processing...';

                let uploadedAuthorImageUrl = null;

                try {
                    const fileToUpload = authorImageFile.files[0];
                    const MAX_FILE_SIZE_BYTES = 1 * 1024 * 1024 * 1024;
                    if (fileToUpload.size > MAX_FILE_SIZE_BYTES) {
                        toastr.error('File size exceeds the 1GB limit.');
                        authorImageUploadStatusElement.classList.add('error-message');
                        return;
                    }

                    // Upload image to Firebase
                    uploadedAuthorImageUrl = await uploadFileToFirebase(fileToUpload, 'author_covers/', authorImageUploadStatusElement);
                    if (uploadedAuthorImageUrl) {
                        authorImageUrlInput.value = uploadedAuthorImageUrl;
                    } else {
                        throw new Error('Author image upload failed during Firebase process.');
                    }

                    const formData = new FormData(addAuthorForm);
                    formData.set('AuthorImageUrl', authorImageUrlInput.value);

                    // submit form data to the controller
                    const response = await fetch(addAuthorForm.action, {
                        method: addAuthorForm.method,
                        body: formData
                    });

                    if (response.ok) {
                        const successData = await response.json();
                        toastr.success(successData.message || 'Author added successfully!');

                        addAuthorForm.reset();
                        document.getElementById('authorImagePreview').src = '';
                        document.getElementById('authorImagePreview').style.display = 'none';
                        document.getElementById('imagePlaceholder').style.display = 'block';
                        authorImageFileNameDisplay.value = '';

                        setTimeout(() => {
                            window.location.href = '/Author/Index';
                        }, 1500);

                    } else {
                        const errorData = await response.json();
                        const errorMessage = JSON.stringify(errorData.errors || errorData.message || "An unknown error occurred on the server.");
                        toastr.error(errorMessage);

                        //rollback the Firebase upload
                        if (uploadedAuthorImageUrl) {
                            await deleteFileFromFirebase(uploadedAuthorImageUrl);
                            // toastr.warning("Image upload rolled back due to backend error.");
                        }
                    }

                } catch (error) {
                    console.error('Submission error:', error);
                    toastr.error(`Submission error: ${error.message}`);

                    if (uploadedAuthorImageUrl) {
                        await deleteFileFromFirebase(uploadedAuthorImageUrl);
                        toastr.warning("Image upload rolled back due to unexpected error.");
                    }

                } finally {
                    submitButton.disabled = false;
                    submitButton.textContent = 'ADD AUTHOR';
                }
            });
        });



    </script>
}