

@{
    ViewData["Title"] = "Author List";
    Layout = "_AdminSidebarLayout"; 
}

@section styles {
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <link rel="stylesheet" href="~/css/admin/common.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/admin/books/listbook.css" asp-append-version="true" />
    <link href="//cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css" rel="stylesheet" />
    <style>

        .author-image {
            width: 50px;
            height: 50px;
            object-fit: cover;
            border-radius: 50%; 
        }
    </style>
}

<div class="content-card p-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div class="header-section">
            <h1>Authors</h1>
            <p>Manage your Author collection</p>
        </div>
        <p>
            <a href="/Author/Add" class="btn btn-secondary">
                <i class="fas fa-plus me-2" style="color: #fff"></i> ADD AUTHOR
            </a>
        </p>
    </div>

    <div class="search-filter-container">
        <div style="position: relative; flex-grow: 1;">
            <i class="fas fa-search search-icon"></i>
            <input type="text" id="searchInput" class="form-control search-field" placeholder="Search authors..." style="padding-left: 33px;" />
        </div>
        <div class="d-flex gap-2">
            <button class="btn btn-outline-secondary">
                <i class="fas fa-sort"></i> Sort
            </button>
        </div>
    </div>

    @if (Model != null && Model.Any())
    {
        <div class="table-responsive">
            <table class="data-table table table-hover">
                <thead>
                    <tr>
                        <th>Image</th>
                        <th>Name</th>
                        <th>Description</th>
                        <th>Created By</th>
                        <th>Upload Date</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var author in Model)
                    {
                        <tr>
                            <td>
                                @if (!string.IsNullOrWhiteSpace(author.AuthorImageUrl))
                                {
                                    <img src="@author.AuthorImageUrl" alt="Author Image" class="author-image" />
                                }
                                else
                                {
                                    <span>No Image</span>
                                }
                            </td>
                            <td>@author.AuthorName</td>
                            <td>@author.AuthorDescription</td>
                            <td>@author.CreatedBy</td>
                            <td>@author.UploadDate?.ToShortDateString()</td>
                            <td>
                                <div class="d-flex gap-2">
                                    @* Link to view author details *@
                                    @* <a href="/Author/Details/@author.AuthorId" class="action-icon-button text-secondary">
                            <i class="fas fa-info-circle"></i>
                            </a> *@
                                    <a href="/Author/Edit/@author.AuthorId" class="action-icon-button text-primary">
                                        <i class="fas fa-edit"></i>
                                    </a>
                                    <button type="button" class="action-icon-button text-danger delete-author-btn"
                                            data-author-id="@author.AuthorId"
                                            data-image-url="@author.AuthorImageUrl">
                                        =
                                        <i class="fas fa-trash"></i>
                                    </button>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
    else
    {
        <p class="empty-message">No authors found. Why not add some?</p>
    }
</div>


<div class="modal fade" id="deleteConfirmAuthorModal" tabindex="-1" aria-labelledby="deleteConfirmAuthorModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteConfirmAuthorModalLabel">Confirm Author Deletion</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                Are you sure you want to delete this author? This action cannot be undone and will permanently remove the author and associated image.
                <input type="hidden" id="confirmDeleteAuthorId" />
                <input type="hidden" id="confirmDeleteAuthorImageUrl" />
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" id="confirmDeleteAuthorBtn">Delete</button>
            </div>
        </div>
    </div>
</div>


@section Scripts {
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script> 
    <script src="//cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js"></script> 
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>

    <script type="module">
        // Your Firebase configuration (consider moving this to a safer, non-hardcoded place!)
        const firebaseConfig = {
            apiKey: "AIzaSyA4CTMSbgGQN_yLn9lEZlswbZ_2A2Xhl0k",
            authDomain: "basabuzz-ca8fe.firebaseapp.com",
            projectId: "basabuzz-ca8fe",
            storageBucket: "basabuzz-ca8fe.firebasestorage.app",
            messagingSenderId: "206533484485",
            appId: "1:206533484485:web:2c71a06a17d5244efe75ac"
        };

        // Initialize Firebase
        import { initializeApp } from "https://www.gstatic.com/firebasejs/11.9.1/firebase-app.js";
        import { getStorage, ref, deleteObject } from "https://www.gstatic.com/firebase/storage/9.6.1/index.esm.js"; // Updated Firebase Storage import path

        const app = initializeApp(firebaseConfig);
        const storage = getStorage(app);

        // Function to delete file from Firebase Storage
        async function deleteFileFromFirebase(fileUrl) {
            if (!fileUrl) {
                console.warn("Attempted to delete null or empty file URL from Firebase.");
                return;
            }
            try {
                const fileRef = ref(storage, fileUrl);
                await deleteObject(fileRef);
                console.log(`Successfully deleted file from Firebase: ${fileUrl}`);
            } catch (error) {
                console.error(`Failed to delete file from Firebase ${fileUrl}:`, error);
            }
        }

        const deleteButtons = document.querySelectorAll(".delete-author-btn");

        deleteButtons.forEach(button => {
            button.addEventListener("click", function () {
                const authorId = this.dataset.authorId;
                const authorImageUrl = this.dataset.imageUrl;

                document.getElementById("confirmDeleteAuthorId").value = authorId;
                document.getElementById("confirmDeleteAuthorImageUrl").value = authorImageUrl;

                var deleteModal = new bootstrap.Modal(document.getElementById('deleteConfirmAuthorModal'));
                deleteModal.show();
            });
        });

        // Delete confirmation button
        document.getElementById("confirmDeleteAuthorBtn").addEventListener("click", async function () {
            const authorIdToDelete = document.getElementById("confirmDeleteAuthorId").value;
            const authorImageUrlToDelete = document.getElementById("confirmDeleteAuthorImageUrl").value;

            var deleteModalInstance = bootstrap.Modal.getInstance(document.getElementById('deleteConfirmAuthorModal'));
            deleteModalInstance.hide();

            try {
                const antiForgeryToken = document.querySelector('input[name="__RequestVerificationToken"]').value;
                if (!antiForgeryToken) {
                    toastr.error("Anti-forgery token not found. Cannot proceed with deletion.");
                    console.error("Anti-forgery token missing.");
                    return;
                }

                const response = await fetch("/Author/Delete", { // correct route for delete action
                    method: "POST",
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': antiForgeryToken // for anti-forgery token
                    },
                    body: JSON.stringify({ AuthorId: authorIdToDelete })
                });

                const result = await response.json();

                if (response.ok) { 
                    toastr.success(result.message || "Author deleted successfully!");

                    if (authorImageUrlToDelete && authorImageUrlToDelete.trim() !== '') {
                        await deleteFileFromFirebase(authorImageUrlToDelete);
                    }

                    window.location.reload(); 
                } else {
                    toastr.error(result.message || `Error: ${response.statusText}`);
                    console.error("Server response error:", result);
                }
            } catch (error) {
                toastr.error("An unexpected error occurred while deleting the author. Please try again.");
                console.error(`Error during fetch or Firebase deletion:`, error);
            }
        });

        
    </script>
}