@*@model List<ASI.Basecode.Services.ServiceModels.AuthorViewModel>*@
@model PaginatedList<ASI.Basecode.Data.Models.Author>

@{
    ViewData["Title"] = "Authors";
    Layout = "_AdminSidebarLayout";

    var currentSearch = (string?)ViewData["CurrentSearch"];
    var currentSort = (string?)ViewData["CurrentSort"];
    var currentSortDescending = (bool)(ViewData["CurrentSortDescending"] ?? false);

    var routeValues = new Dictionary<string, string>
            {
                ["searchTerm"] = currentSearch,
                ["sortOrder"] = currentSort,
                ["sortDescending"] = currentSortDescending.ToString().ToLowerInvariant()
            };

    ViewData["CurrentPage"] = Model.PageIndex;
    ViewData["TotalPages"] = Model.TotalPages;
}

@section styles {
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <link rel="stylesheet" href="~/css/admin/common.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/admin/books/listbook.css" asp-append-version="true" />
    <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css" />
    <link rel="stylesheet" href="~/css/modal.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/pagination.css" asp-append-version="true" />

    <style>
        .author-image {
            width: 50px;
            height: 50px;
            object-fit: cover;
            border-radius: 50%;
        }


        .data-table th:last-child,
        .data-table td:last-child {
            text-align: center; 
            vertical-align: middle;
        }

        .data-table td .action-buttons {
            display: flex; 
            justify-content: center;
            align-items: center; 
            gap: 0.5rem; 
            white-space: nowrap; 
        }

        .loading-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            display: none;
            justify-content: center;
            align-items: center;
            z-index: 9999;
        }
        .loading-spinner {
            border: 4px solid #f3f3f3;
            border-top: 4px solid #3498db;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            animation: spin 1s linear infinite;
        }
        @@keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
    </style>
}

<div class="loading-overlay" id="loadingOverlay">
    <div class="loading-spinner"></div>
</div>

<div class="content-card p-4">
    @Html.AntiForgeryToken()
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div class="header-section">
            <h1>Authors</h1>
            <p>View and manage authors</p>
        </div>

        <p>
            <a class="btn btn-secondary" href="/Author/AddAuthor">
                <i class="fas fa-plus me-2" style="color: #fff"></i> ADD AUTHOR
            </a>
        </p>

    </div>

    <div class="search-filter-container">
        <div style="position: relative; flex-grow: 1;">
            <i class="fas fa-search search-icon"></i>
            <input type="text" id="searchInput" class="form-control search-field" placeholder="Search authors..." style="padding-left: 33px;" />
        </div>
        <div class="d-flex gap-2">
            <button class="btn btn-outline-secondary">
                <i class="fas fa-sort"></i> Sort
            </button>
        </div>
    </div>

    @*--------------------------------------For Searching sort and filter---------------------------------------------*@
    <form asp-action="Index" asp-controller="Author" method="get" class="d-flex align-items-center mb-3" id="searchFilterForm">
        <input type="text"
               name="searchTerm"
               value="@currentSearch"
               class="form-control me-2"
               placeholder="Search users…" />

        <input type="hidden" id="sortOrderField" name="sortOrder" value="@currentSort" />
        <input type="hidden" id="sortDescendingField" name="sortDescending" value="@(currentSortDescending.ToString().ToLowerInvariant())" />

        <button type="submit" class="btn btn-primary">Apply</button>

        <button type="button" id="sortButton" class="sort-btn">Sort By <i class="fas fa-caret-down"></i></button>

    </form>
    <div class="sort-popup card shadow" id="sortPopup" style="display: none;">
        <div class="card-header bg-secondary text-white justify-center">
            <h6 class="mb-0" style="margin-top: 6px;">Sort By:</h6>
        </div>
        <div class="card-body">
            <div class="mb-3">
                <label class="form-label fw-bold">Sort By:</label>
                <div class="ms-2">
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="popupSortOrder" id="sortName" value="Name" @(currentSort == "Name" ? "checked" : "")>
                        <label class="form-check-label" for="sortId">Name</label>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="popupSortOrder" id="sortDate" value="CreatedTime" @(currentSort == "CreatedTime" ? "checked" : "")>
                        <label class="form-check-label" for="sortDate">Created Date</label>
                    </div>
                </div>
            </div>

            <div class="mb-3">
                <label class="form-label fw-bold">Direction:</label>
                <div class="ms-2">
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="popupSortDirection" id="sortAsc" value="false" @(!currentSortDescending ? "checked" : "")>
                        <label class="form-check-label" for="sortAsc">Ascending <i class="fas fa-arrow-up"></i></label>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="popupSortDirection" id="sortDesc" value="true" @(currentSortDescending ? "checked" : "")>
                        <label class="form-check-label" for="sortDesc">Descending <i class="fas fa-arrow-down"></i></label>
                    </div>
                </div>
            </div>

            <div class="d-flex justify-content-end">
                <button type="button" class="btn btn-outline-secondary" style="margin-right: 10px" id="closeSortButton">Cancel</button>
                <button type="button" class="btn btn-secondary me-2" id="applySortButton">Apply</button>
            </div>
        </div>
    </div>
    @*------------------------------------------------------------For searching sort and filter-----------------------------------------------*@

    @if (Model != null && Model.Any())
    {
        <div class="table-responsive">
            <table class="data-table table table-hover">
                <thead>
                    <tr>
                        <th style="padding-left: 10px">Image</th>
                        <th>Author Name</th>
                        <th>Description</th>
                        <th>Upload Date</th>
                        <th class="text-md-center">Actions</th> 
                    </tr>
                </thead>
                <tbody>
                    @foreach (var author in Model)
                    {
                        <tr>
                            <td>
                                @if (!string.IsNullOrWhiteSpace(author.AuthorImageUrl))
                                {
                                    <img src="@author.AuthorImageUrl" alt="Author Image" class="author-image" />
                                }
                                else
                                {
                                    <span>No Image</span>
                                }
                            </td>
                            <td class="align-middle" style="padding-left: 10px">@author.AuthorName</td>
                            <td class="align-middle">@author.AuthorDescription</td>
                            <td class="align-middle">@author.UploadDate?.ToShortDateString()</td>
                            <td class="align-middle" style="white-space:nowrap;">
                                <div class="action-buttons">
                                 <a 
                                     asp-controller="Book" 
                                     asp-action="ListBook" 
                                     asp-route-author="@author.AuthorName"
                                     asp-route-category="@author.AuthorName"
                                     class="action-icon-button text-secondary">
                                      <i class="fas fa-info-circle"></i>
                                   </a>
                                    <a href="/Author/EditAuthor/@author.AuthorId"  class="btn btn-icon text-primary">
                                        <i class="fas fa-edit"></i>
                                    </a>
                                    <button type="button" class="btn btn-icon text-danger delete-author-btn"
                                            data-bs-toggle="modal" data-bs-target="#deleteAuthorConfirmModal"
                                            data-author-id="@author.AuthorId"
                                            data-author-image-url="@author.AuthorImageUrl"
                                            data-author-name="@author.AuthorName">
                                        <i class="fas fa-trash"></i>
                                    </button>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
    else
    {
        <p class="empty-message">No authors found. Click "ADD AUTHOR" to add some.</p>
    }
    <partial name="_PaginationPartial" view-data='@new ViewDataDictionary(ViewData) { { "RouteValues", routeValues } }' />
</div>

<div class="modal fade confirmation-modal" id="deleteAuthorConfirmModal" tabindex="-1" aria-labelledby="deleteAuthorConfirmModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header border-0">
                <h5 class="modal-title" id="deleteAuthorConfirmModalLabel">Delete Author Confirmation</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body text-center">
                <p class="mb-4" id="deleteAuthorModalText">
                    Are you sure you want to delete author:<br> 
                    <strong id="authorToDeleteName"></strong>? <br>
                    This action cannot be undone and will permanently remove the author and their associated details.</p>
                <input type="hidden" id="deleteAuthorId" />
                <input type="hidden" id="deleteAuthorImageUrl" />
                <div class="d-flex justify-content-center gap-2">
                    <button type="button" class="btn btn-secondary px-4" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-danger px-4" id="confirmDeleteAuthorBtn">Delete</button>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="//cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js"></script>

    <script type="module">
        //  Firebase configuration 
        const firebaseConfig = {
            apiKey: "AIzaSyA4CTMSbgGQN_yLn9lEZlswbZ_2A2Xhl0k",
            authDomain: "basabuzz-ca8fe.firebaseapp.com",
            projectId: "basabuzz-ca8fe",
            storageBucket: "basabuzz-ca8fe.firebasestorage.app",
            messagingSenderId: "206533484485",
            appId: "1:206533484485:web:2c71a06a17d5244efe75ac"
        };

        // Initialize Firebase
        import { initializeApp } from "https://www.gstatic.com/firebasejs/11.9.1/firebase-app.js";
        import { getStorage, ref, uploadBytesResumable, getDownloadURL, deleteObject } from "https://www.gstatic.com/firebasejs/11.9.1/firebase-storage.js";

        const app = initializeApp(firebaseConfig);
        const storage = getStorage(app);

        // Firebase Utility Functions
        // async function uploadFileToFirebase(file, path, statusElement) {
        //     if (!file) {
        //         if (statusElement) { 
        //             statusElement.textContent = 'No file selected.';
        //         }
        //         return null;
        //     }
        //     const timestamp = new Date().getTime();
        //     const randomString = Math.random().toString(36).substring(2, 8);
        //     const uniqueFileName = `${path}${timestamp}-${randomString}-${file.name}`;
        //     const storageRef = ref(storage, uniqueFileName);
        //     const uploadTask = uploadBytesResumable(storageRef, file);

        //     return new Promise((resolve, reject) => {
        //         uploadTask.on('state_changed',
        //             (snapshot) => {
        //                 const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;
        //                 if (statusElement) { 
        //                     statusElement.textContent = `Upload is ${progress.toFixed(2)}% done`;
        //                 }
        //             },
        //             (error) => {
        //                 if (statusElement) {
        //                     statusElement.textContent = `Upload failed: ${error.message}`;
        //                 }
        //                 console.error("Upload error:", error);
        //                 reject(error);
        //             },
        //             async () => {
        //                 try {
        //                     const downloadURL = await getDownloadURL(uploadTask.snapshot.ref);
        //                     if (statusElement) { 
        //                         statusElement.textContent = 'Upload successful!';
        //                     }
        //                     resolve(downloadURL);
        //                 } catch (error) {
        //                     if (statusElement) { 
        //                         statusElement.textContent = `Failed to get download URL: ${error.message}`;
        //                     }
        //                     console.error("Get Download URL error:", error);
        //                     reject(error);
        //                 }
        //             }
        //         );
        //     });
        // }

        async function deleteFileFromFirebase(fileUrl) {
            if (!fileUrl) {
                console.warn("Attempted to delete null or empty file URL from Firebase.");
                return;
            }
            try {
                const fileRef = ref(storage, fileUrl);
                await deleteObject(fileRef);
                console.log(`Successfully deleted file from Firebase: ${fileUrl}`);
            } catch (error) {
                console.error(`Failed to delete file from Firebase ${fileUrl}:`, error);
            }
        }

        // Loading Overlay Functions
        function showLoadingOverlay() {
            document.getElementById('loadingOverlay').style.display = 'flex';
        }

        function hideLoadingOverlay() {
            document.getElementById('loadingOverlay').style.display = 'none';
        }

        // --- DELETE AUTHOR MODAL LOGIC ---
        $('.delete-author-btn').on('click', function () {
            const authorId = $(this).data('author-id');
            const authorName = $(this).data('author-name');
            const authorImageUrl = $(this).data('author-image-url');

            $('#deleteAuthorId').val(authorId);
            $('#deleteAuthorImageUrl').val(authorImageUrl);
            $('#authorToDeleteName').text(authorName);
        });

        document.getElementById("confirmDeleteAuthorBtn").addEventListener("click", async function () {
            console.log("Delete button clicked");
            const authorIdToDelete = $('#deleteAuthorId').val();
            const authorImageUrlToDelete = $('#deleteAuthorImageUrl').val();

            if (!authorIdToDelete) {
                toastr.error("Author ID is missing. Cannot proceed with deletion.");
                return;
            }

            showLoadingOverlay();
            // close modal
            var deleteModalInstance = bootstrap.Modal.getInstance(document.getElementById('deleteAuthorConfirmModal'));
            deleteModalInstance.hide();

            try {
                const antiForgeryTokenElement = document.querySelector('input[name="__RequestVerificationToken"]');
                if (!antiForgeryTokenElement) {
                    hideLoadingOverlay();
                    toastr.error("Anti-forgery token not found. Cannot proceed with deletion.");
                    console.error("Anti-forgery token element not found in DOM.");
                    return;
                }
                const antiForgeryToken = antiForgeryTokenElement.value;

                const response = await fetch("/Author/DeleteAuthor", {
                    method: "POST",
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': antiForgeryToken
                    },
                    body: JSON.stringify({ AuthorId: authorIdToDelete })
                });

                const result = await response.json();


                if (response.ok) {

                    if (authorImageUrlToDelete && authorImageUrlToDelete.trim() !== '') {
                        await deleteFileFromFirebase(authorImageUrlToDelete);
                    }
                    toastr.success(result.message || "Author deleted successfully!");
                    setTimeout(() => {
                        hideLoadingOverlay();
                        window.location.reload();
                    }, 1000);
                } else {
                    hideLoadingOverlay();
                    toastr.error(result.message || `Error: ${response.statusText}`);
                    console.error("Server delete error:", result);
                }
            } catch (error) {
                hideLoadingOverlay();
                toastr.error("An unexpected error occurred while deleting the author. Please try again.");
                console.error("Error during fetch or Firebase deletion:", error);
            }
        });

        // Modal cleanup
        $(document).ready(function () {
            $('#deleteAuthorConfirmModal').on('hidden.bs.modal', function () {
                $('body').removeClass('modal-open');
                $('.modal-backdrop').remove();
                $('#deleteAuthorId').val('');
                $('#deleteAuthorImageUrl').val('');
                $('#authorToDeleteName').text('');
            });
        });

        // Search functionality
        const searchInput = document.getElementById("searchInput");
        if (searchInput) {
            searchInput.addEventListener("keyup", function () {
                const filter = searchInput.value.toLowerCase();
                const table = document.querySelector(".data-table tbody");
                const rows = table.querySelectorAll("tr");

                rows.forEach(row => {
                    const nameCol = row.children[1] ? row.children[1].textContent.toLowerCase() : '';
                    const descCol = row.children[2] ? row.children[2].textContent.toLowerCase() : '';

                    if (nameCol.includes(filter) || descCol.includes(filter)) {
                        row.style.display = "";
                    } else {
                        row.style.display = "none";
                    }
                });
            });
        }

        //--------------------------FOR SORTING-----------------------------
        // Sort popup functionality
        const sortButton = document.getElementById('sortButton');
        const sortPopup = document.getElementById('sortPopup');
        const closeSortButton = document.getElementById('closeSortButton');
        const applySortButton = document.getElementById('applySortButton');

        // Toggle the sort popup when the sort button is clicked
        sortButton.addEventListener('click', function (e) {
            e.preventDefault();
            if (sortPopup.style.display === 'none') {
                sortPopup.style.display = 'block';
            } else {
                sortPopup.style.display = 'none';
            }
        });

        // Close the sort popup when clicked outside
        document.addEventListener('click', function (e) {
            if (!sortButton.contains(e.target) &&
                !sortPopup.contains(e.target) &&
                sortPopup.style.display === 'block') {
                sortPopup.style.display = 'none';
            }
        });

        // Close button
        closeSortButton.addEventListener('click', function () {
            sortPopup.style.display = 'none';
        });

        // Apply button
        // Apply button
        applySortButton.addEventListener('click', function () {
            // Get selected values
            const sortOrderValue = document.querySelector('input[name="popupSortOrder"]:checked').value;
            const sortDirectionValue = document.querySelector('input[name="popupSortDirection"]:checked').value;

            // Update hidden form fields
            document.getElementById('sortOrderField').value = sortOrderValue;
            
            document.getElementById('sortDescendingField').value = sortDirectionValue;
            

            // Find the main form and submit it
            document.querySelector('#searchFilterForm').submit();
        });
    </script>
}