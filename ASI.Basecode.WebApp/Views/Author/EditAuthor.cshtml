@model ASI.Basecode.Services.ServiceModels.AuthorViewModel
@using ASI.Basecode.WebApp.Models
@{
    ViewData["Title"] = "Edit Author";
    Layout = "_AdminSidebarLayout";

    var originalAuthorName = Model?.AuthorName;
    var originalAuthorDescription = Model?.AuthorDescription;
    var originalAuthorImageUrl = Model?.AuthorImageUrl;

    var saveConfirmationModal = new ConfirmationModalModel
    {
        Id = "saveModal",
        Title = "Save Changes",
        Message = "Are you sure you want to save your changes?",
        CancelButtonText = "Discard",
        ConfirmButtonText = "Save",
        ConfirmButtonId = "saveConfirmBtn",
        ConfirmButtonClass = "btn-danger-2"
    };

    var cancelConfirmationModal = new ConfirmationModalModel
    {
        Id = "editAuthorConfirmationModal",
        Title = "Discard Changes?",
        Message = "You have unsaved changes! Are you sure you want to discard them?",
        CancelButtonText = "Keep Editing",
        ConfirmButtonText = "Discard",
        ConfirmButtonId = "confirmCancelBtn",
        ConfirmButtonClass = "btn-discard"
    };
}

@section styles {
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <link rel="stylesheet" href="~/css/admin/books/bookmaster.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/admin/common.css" asp-append-version="true" />
    <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css" />

    <style>
        /* Custom style for the discard button in the confirmation modal */
        .btn-discard {
            background-color: #ff5252;
            border: none;
            color: white;
            font-weight: 500;
        }

            .btn-discard:hover {
                background-color: #ff3939;
            }

        /* Disabled button style */
        .disabled-btn {
            opacity: 0.65;
            cursor: not-allowed;
            background-color: #a0b4b0 !important;
            border-color: #a0b4b0 !important;
            box-shadow: none !important;
        }

            .disabled-btn:hover {
                background-color: #a0b4b0 !important;
                box-shadow: none !important;
                transform: none !important;
            }
    </style>
}

<div class="admin-common-container-add">
    <div class="admin-common-content-wrapper-add">
        <div class="header-section">
            <h1>Edit Author</h1>
            <p>Edit author details here</p>
        </div>

        <div asp-validation-summary="ModelOnly" class="validation-summary-errors"></div>

        <form asp-action="EditAuthor" asp-controller="Author" method="post" id="editAuthorForm">
            <input type="hidden" name="AuthorId" value="@Model.AuthorId" />
            <input type="hidden" id="originalAuthorName" value="@originalAuthorName" />
            <input type="hidden" id="originalAuthorDescription" value="@originalAuthorDescription" />
            <input type="hidden" id="originalAuthorImageUrl" value="@originalAuthorImageUrl" />

            <div class="content-master-grid-add">
                <div class="image-upload-section">
                    <div class="author-image-preview-container">
                        <img id="authorImagePreview" src="@Model?.AuthorImageUrl" style="@(string.IsNullOrEmpty(Model?.AuthorImageUrl) ? "display:none;" : "")">
                        <span id="imagePlaceholder" class="placeholder-text" style="@( !string.IsNullOrEmpty(Model?.AuthorImageUrl) ? "display:none;" : "")">No Image</span>
                    </div>

                    <input type="text" class="book-master-file-input-text" readonly id="authorImageFileNameDisplay">
                    <button type="button" class="master-browse-button" onclick="document.getElementById('authorImageFile').click();">BROWSE</button>
                    <input type="file" id="authorImageFile" accept="image/*" style="display: none;">

                    <p id="authorImageUploadStatus" class="master-upload-status">
                        <span class="file-size-info required-label">Max file size: 10MB</span>
                        <span class="supported-formats-info">Supported formats: JPG, PNG, JPEG</span>
                    </p>
                    <input type="text" id="authorImageUrl" name="AuthorImageUrl" value="@Model?.AuthorImageUrl">
                </div>

                    <div class="form-column">
                        <div class="book-master-form-group">
                            <label for="authorName" class="required-label">Author Name</label>
                            <input maxlength="450" type="text" id="authorName" name="AuthorName" class="book-master-form-input tracked-field" value="@Model?.AuthorName" required>
                            <span asp-validation-for="AuthorName" class="text-danger"></span>
                        </div>
                        <div class="book-master-form-group">
                            <label for="authorDescription">Description</label>
                            <textarea maxlength="5000" type="text" id="authorDescription" name="AuthorDescription" class="book-master-form-input tracked-field" value="@Model?.AuthorDescription">
                            </textarea>
								<span asp-validation-for="AuthorDescription" class="text-danger"></span>
                        </div>
                    </div>
            </div>

            <div class="button-container">
                <button type="button" class="cancel-button" id="cancelButton">CANCEL</button>
                <button type="button" class="book-master-submit-button" id="editAuthorSubmitButton">SAVE CHANGES</button>
            </div>
        </form>
    </div>
</div>

<!-- Save confirmation modal -->
<partial name="_ConfirmationModal" model="saveConfirmationModal" />

<!-- Cancel confirmation modal -->
<partial name="_ConfirmationModal" model="cancelConfirmationModal" />

@section scripts {
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/js/toastr.min.js"></script>

    <script type="module">
        // Your Firebase configuration
        //Transfer this secretes into AnalyserNode env or file, and include it in gitignore.
        const firebaseConfig = {
            apiKey: "AIzaSyA4CTMSbgGQN_yLn9lEZlswbZ_2A2Xhl0k",
            authDomain: "basabuzz-ca8fe.firebaseapp.com",
            projectId: "basabuzz-ca8fe",
            storageBucket: "basabuzz-ca8fe.firebasestorage.app",
            messagingSenderId: "206533484485",
            appId: "1:206533484485:web:2c71a06a17d5244efe75ac"
        };

        // Initialize Firebase
        import { initializeApp } from "https://www.gstatic.com/firebasejs/11.9.1/firebase-app.js";
        import { getStorage, ref, uploadBytesResumable, getDownloadURL, deleteObject } from "https://www.gstatic.com/firebasejs/11.9.1/firebase-storage.js";

        const app = initializeApp(firebaseConfig);
        const storage = getStorage(app);

        async function deleteFileFromFirebase(fileUrl) {
            if (!fileUrl) {
                console.warn("Attempted to delete null or empty file URL.");
                return;
            }
            try {
                const fileRef = ref(storage, fileUrl);
                await deleteObject(fileRef);
                console.log(`Successfully deleted file: ${fileUrl}`);
            } catch (error) {
                toastr.error(`Failed to delete file ${fileUrl}: ${error.message}`);
                console.error(`Failed to delete file ${fileUrl}:`, error);
            }
        }

        async function rollbackFileUploads(uploadedGImageUrl, imageUploadStatusElement) {
            if (uploadedGImageUrl) {
                await deleteFileFromFirebase(uploadedGImageUrl);
                if (imageUploadStatusElement) {
                    const fileSizeInfo = imageUploadStatusElement.querySelector('.file-size-info');
                    if (fileSizeInfo) {
                        fileSizeInfo.textContent = 'Upload rolled back due to backend error.';
                    }
                    imageUploadStatusElement.classList.add('error-message');
                }
            }
        }

        //Firebase Upload Function
        async function uploadFileToFirebase(file, path, statusElement) {
            // Ensure statusElement is valid and contains the target span before trying to update it
            const fileSizeInfoSpan = statusElement ? statusElement.querySelector('.file-size-info') : null;

            if (!file) {
                if (fileSizeInfoSpan) { // Only update if the span exists
                    fileSizeInfoSpan.textContent = 'No file selected.';
                }
                return null;
            }

            const timestamp = new Date().getTime();
            const randomString = Math.random().toString(36).substring(2, 8);
            const uniqueFileName = `${timestamp}-${randomString}-${file.name}`;

            const storageRef = ref(storage, path + uniqueFileName);
            const uploadTask = uploadBytesResumable(storageRef, file);

            return new Promise((resolve, reject) => {
                uploadTask.on('state_changed',
                    (snapshot) => {
                        const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;
                        if (fileSizeInfoSpan) { // Safely update progress
                            fileSizeInfoSpan.textContent = `Upload is ${progress.toFixed(2)}% done`;
                        }
                    },
                    (error) => {
                        toastr.error(`Author image upload failed: ${error.message}`);
                        console.error("Upload error:", error);
                        reject(error);
                    },
                    async () => {
                        try {
                            const downloadURL = await getDownloadURL(uploadTask.snapshot.ref);
                            if (fileSizeInfoSpan) { // Safely update success message
                                fileSizeInfoSpan.textContent = 'Upload successful!';
                            }
                            resolve(downloadURL);
                        } catch (error) {
                            toastr.error(`Failed to get download URL: ${error.message}`);
                            console.error("Get Download URL error:", error);
                            reject(error);
                        }
                    }
                );
            });
        }


        document.addEventListener('DOMContentLoaded', function () {
            // Store original values
            const originalAuthorName = document.getElementById('originalAuthorName').value;
            const originalAuthorDescription = document.getElementById('originalAuthorDescription').value;
            const originalAuthorImageUrl = document.getElementById('originalAuthorImageUrl').value;
            let hasFormChanges = false;
            let hasImageChanges = false;

            // Get the submit button
            const submitBtn = document.getElementById('editAuthorSubmitButton');

            // Initially disable the Save Changes button
            submitBtn.disabled = true;
            submitBtn.classList.add('disabled-btn');

            // Track changes in the author fields
            document.getElementById('authorName').addEventListener('input', checkForChanges);
            document.getElementById('authorDescription').addEventListener('input', checkForChanges);

            // Function to check if any changes were made
            function checkForChanges() {
                const currentAuthorName = document.getElementById('authorName').value;
                const currentAuthorDescription = document.getElementById('authorDescription').value;
                const currentAuthorImageUrl = document.getElementById('authorImageUrl').value;

                // Check if any fields changed
                const nameChanged = currentAuthorName !== originalAuthorName;
                const descriptionChanged = currentAuthorDescription !== originalAuthorDescription;
                const imageChanged = currentAuthorImageUrl !== originalAuthorImageUrl || hasImageChanges;

                // Update overall change status
                hasFormChanges = nameChanged || descriptionChanged || imageChanged;

                // Enable/disable the Save Changes button based on changes
                if (hasFormChanges) {
                    submitBtn.disabled = false;
                    submitBtn.classList.remove('disabled-btn');
                } else {
                    submitBtn.disabled = true;
                    submitBtn.classList.add('disabled-btn');
                }
            }

            // Image Preview Logic
            const authorImageFile = document.getElementById('authorImageFile');
            const authorImagePreview = document.getElementById('authorImagePreview');
            const imagePlaceholder = document.getElementById('imagePlaceholder');
            const editAuthorForm = document.getElementById("editAuthorForm");
            const authorImageUploadStatusElement = document.getElementById('authorImageUploadStatus');
            const authorImageUrlInput = document.getElementById('authorImageUrl');

            const fileSizeInfoSpanInitial = authorImageUploadStatusElement.querySelector('.file-size-info');
            if (fileSizeInfoSpanInitial) {
                fileSizeInfoSpanInitial.textContent = 'Max file size: 10MB';
            }

            if (authorImageFile) {
                authorImageFile.addEventListener('change', function () {
                    const file = this.files[0];
                    if (file) {
                        const reader = new FileReader();
                        reader.onload = function (e) {
                            authorImagePreview.src = e.target.result;
                            authorImagePreview.style.display = 'block';
                            imagePlaceholder.style.display = 'none';

                            // Mark that we have an image change
                            hasImageChanges = true;
                            checkForChanges();
                        };
                        reader.readAsDataURL(file);
                    } else {
                        authorImagePreview.src = '';
                        authorImagePreview.style.display = 'none';
                        imagePlaceholder.style.display = 'block';
                    }

                    const fileSizeInfo = authorImageUploadStatusElement.querySelector('.file-size-info');
                    const supportedFormatsInfo = authorImageUploadStatusElement.querySelector('.supported-formats-info');
                    if (fileSizeInfo) fileSizeInfo.textContent = 'Max file size: 10MB';
                    if (supportedFormatsInfo) supportedFormatsInfo.textContent = 'Supported formats: JPG, PNG, JPEG';
                    authorImageUploadStatusElement.classList.remove('error-message');
                });
            }

            // Setup save confirmation modal
            document.getElementById('editAuthorSubmitButton').addEventListener('click', function(e) {
                e.preventDefault();

                // Only proceed if there are actual changes
                if (hasFormChanges) {
                    var saveModal = new bootstrap.Modal(document.getElementById('saveModal'));
                    saveModal.show();
                }
            });

            // Handle save confirmation
            document.getElementById('saveConfirmBtn').addEventListener('click', async function() {
                // Hide the modal
                bootstrap.Modal.getInstance(document.getElementById('saveModal')).hide();

                // Disable button to prevent multiple submissions
                const submitButton = document.getElementById('editAuthorSubmitButton');
                submitButton.disabled = true;
                submitButton.textContent = 'Processing...';
                submitButton.classList.add('disabled-btn');

                const form = document.getElementById("editAuthorForm");
                const authorNameInput = document.getElementById('authorName');
                const authorImageFileInstance = document.getElementById('authorImageFile');
                const authorImageFile = authorImageFileInstance.files[0];
                const authorImageUrlHiddenInput = document.getElementById('authorImageUrl');
                const authorImageUploadStatusElement = document.getElementById('authorImageUploadStatus');

                const originalAuthorImageUrl = document.getElementById('originalAuthorImageUrl').value;

                if (authorNameInput.value.trim() === '') {
                    toastr.warning('Author Name is required.');
                    submitButton.disabled = false;
                    submitButton.textContent = 'SAVE CHANGES';
                    submitButton.classList.remove('disabled-btn');
                    removeModalBackdrops();
                    return;
                }

                const fileSizeInfoSpan = authorImageUploadStatusElement.querySelector('.file-size-info');
                const supportedFormatsInfoSpan = authorImageUploadStatusElement.querySelector('.supported-formats-info');
                if (fileSizeInfoSpan) fileSizeInfoSpan.textContent = 'Max file size: 10MB';
                if (supportedFormatsInfoSpan) supportedFormatsInfoSpan.textContent = 'Supported formats: JPG, PNG, JPEG';
                authorImageUploadStatusElement.classList.remove('error-message');

                let uploadedAuthorImageUrl = null;

                try {
                    if (authorImageFile) {
                        const MAX_FILE_SIZE_BYTES = 10 * 1024 * 1024;
                        if (authorImageFile.size > MAX_FILE_SIZE_BYTES) {
                            toastr.error('File size exceeds the 10MB limit.');
                            if (fileSizeInfoSpan) fileSizeInfoSpan.textContent = 'File too large!';
                            authorImageUploadStatusElement.classList.add('error-message');
                            submitButton.disabled = false;
                            submitButton.textContent = 'SAVE CHANGES';
                            submitButton.classList.remove('disabled-btn');
                            removeModalBackdrops();
                            return;
                        }
                        uploadedAuthorImageUrl = await uploadFileToFirebase(authorImageFile, 'author_covers/', authorImageUploadStatusElement);
                        if (uploadedAuthorImageUrl) {
                            authorImageUrlHiddenInput.value = uploadedAuthorImageUrl;
                        } else {
                            throw new Error('New image upload failed or was cancelled.');
                        }
                    }

                    const formData = new FormData(form);

                    const response = await fetch('/Author/EditAuthor', {
                        method: form.method,
                        body: formData
                    });

                    if (response.ok) {
                        const messageData = await response.json();
                        toastr.success(messageData.message || 'Author updated successfully!');

                        if (uploadedAuthorImageUrl && originalAuthorImageUrl && uploadedAuthorImageUrl !== originalAuthorImageUrl) {
                            await deleteFileFromFirebase(originalAuthorImageUrl);
                        }

                        // Redirect back to Author/Index
                        setTimeout(function() {
                            window.location.href = '/Author/Index';
                        }, 1500);
                    } else {
                        const errorData = await response.json();

                        const errorMessage = JSON.stringify(errorData.errors || errorData.message || "An unknown error occurred on the server.");
                        toastr.error(errorMessage);

                        if (uploadedAuthorImageUrl && uploadedAuthorImageUrl !== originalAuthorImageUrl) {
                            await deleteFileFromFirebase(uploadedAuthorImageUrl);
                            toastr.warning("New image upload rolled back due to backend error.");
                            // revert if new upload failed and backend failed
                            authorImageUrlHiddenInput.value = originalAuthorImageUrl;
                        }
                    }
                } catch (error) {
                    console.error('Submission error:', error);
                    toastr.error(`Submission error: ${error.message}`);

                    if (uploadedAuthorImageUrl && uploadedAuthorImageUrl !== originalAuthorImageUrl) {
                        await deleteFileFromFirebase(uploadedAuthorImageUrl);
                        toastr.warning("New image upload rolled back due to submission error.");
                        authorImageUrlHiddenInput.value = originalAuthorImageUrl;
                    }
                } finally {
                    submitButton.disabled = false;
                    submitButton.textContent = 'SAVE CHANGES';
                    submitButton.classList.remove('disabled-btn');
                    removeModalBackdrops();
                }
            });

            // Handle cancel button click
            document.getElementById('cancelButton').addEventListener('click', function() {
                // Only show confirmation if there are changes, otherwise redirect immediately
                if (hasFormChanges) {
                    var cancelModal = new bootstrap.Modal(document.getElementById('editAuthorConfirmationModal'));
                    cancelModal.show();
                } else {
                    // No changes, redirect immediately
                    window.location.href = '/Author/Index';
                }
            });

            // Handle cancel confirmation
            document.getElementById('confirmCancelBtn').addEventListener('click', function() {
                window.location.href = '/Author/Index';
                bootstrap.Modal.getInstance(document.getElementById('editAuthorConfirmationModal')).hide();
                // Remove modal backdrop manually to prevent overlay issues
                removeModalBackdrops();
            });

            // Function to clean up modal backdrops
            function removeModalBackdrops() {
                var modals = document.querySelectorAll('.modal-backdrop');
                modals.forEach(function(modal) {
                    modal.remove();
                });
                document.body.classList.remove('modal-open');
                document.body.style.overflow = '';
                document.body.style.paddingRight = '';
            }

            // Handle modal close events
            document.getElementById('saveModal').addEventListener('hidden.bs.modal', function() {
                removeModalBackdrops();
            });

            document.getElementById('editAuthorConfirmationModal').addEventListener('hidden.bs.modal', function() {
                removeModalBackdrops();
            });

            // Run initial check for changes
            checkForChanges();
        });
    </script>
}