@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@model ASI.Basecode.Services.ServiceModels.AuthorViewModel
@{
    ViewData["Title"] = "Edit Author"; 
    Layout = "_AdminSidebarLayout";
}

@section styles {
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <link rel="stylesheet" href="~/css/admin/books/bookmaster.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/admin/books/editgenre.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/admin/common.css" asp-append-version="true" />

    <style>
        .image-preview-container {
            border-radius: 50%;
            overflow: hidden;
            width: 150px;
            height: 150px;
            display: flex;
            justify-content: center;
            align-items: center;
            border: 1px solid #ddd;
            background-color: #f8f8f8;
        }

            .image-preview-container img {
                width: 100%;
                height: 100%;
                object-fit: cover;
            }

            .image-preview-container .placeholder-text {
                color: #888;
                font-size: 0.9em;
                text-align: center;
            }

        /* book list */
        .books-by-author-section {
            margin-top: 40px;
        }

            .books-by-author-section h2 {
                margin-bottom: 20px;
                color: #333;
                font-size: 1.5em;
            }

        .book-grid {
            display: grid;
            grid-template-columns: repeat(5, 1fr);
            gap: 20px;
            margin-bottom: 30px; 
        }

        .book-item {
            border: 1px solid #e0e0e0;
            border-radius: 8px;
            overflow: hidden;
            text-align: center;
            background-color: #fff;
            box-shadow: 0 2px 4px rgba(0,0,0,0.05);
            transition: transform 0.2s ease-in-out;
        }

            .book-item:hover {
                transform: translateY(-5px);
                box-shadow: 0 4px 8px rgba(0,0,0,0.1);
            }

        .book-item-image-container {
            width: 100%;
            height: 200px;
            overflow: hidden;
            display: flex;
            justify-content: center;
            align-items: center;
            background-color: #f0f0f0;
        }

            .book-item-image-container img {
                width: 100%;
                height: 100%;
                object-fit: cover;
            }

        .book-item-details {
            padding: 15px;
        }

            .book-item-details h4 {
                font-size: 1.1em;
                margin-bottom: 5px;
                color: #333;
                white-space: nowrap;
                overflow: hidden;
                text-overflow: ellipsis;
            }

            .book-item-details p {
                font-size: 0.9em;
                color: #666;
                margin-bottom: 0;
            }

        /* Pagination */
        .pagination-controls {
            display: flex;
            justify-content: center;
            align-items: center;
            gap: 10px;
            margin-top: 20px;
        }

        .pagination-button, .pagination-arrow {
            padding: 8px 15px;
            border: 1px solid #ddd;
            border-radius: 5px;
            background-color: #f0f0f0;
            cursor: pointer;
            transition: background-color 0.2s ease-in-out, border-color 0.2s ease-in-out;
            color: #333;
            font-weight: bold;
        }

            .pagination-button:hover, .pagination-arrow:hover:not(:disabled) {
                background-color: #e0e0e0;
                border-color: #ccc;
            }

            .pagination-button.active {
                background-color: #3E4F4E;
                color: white;
                border-color: #3E4F4E;
            }

            .pagination-arrow:disabled {
                opacity: 0.5;
                cursor: not-allowed;
                background-color: #f8f8f8; 
            }

        .page-info { 
            margin: 0 15px; 
            font-size: 0.9em;
            color: #555;
            min-width: 100px;
            text-align: center;
        }
    </style>
}

<div class="admin-common-container">
    <div class="admin-common-content-wrapper">
        <div class="header-section">
            <h1>Edit Author</h1> 
            <p>Edit author details here</p> 
        </div>


        <div asp-validation-summary="ModelOnly" class="validation-summary-errors"></div>

        <form asp-action="EditAuthor" asp-controller="Author" method="post" id="addAuthorForm">
           
            <input type="hidden" id="authorImageUrl" name="AuthorImageUrl">

            <div class="edit-genre-grid">
                <div class="image-upload-section">
                    <div class="image-preview-container">
                        <img id="authorImagePreview" src="@Model?.AuthorImageUrl" style="@(string.IsNullOrEmpty(Model?.AuthorImageUrl) ? "display:none;" : "")">
                        <span id="imagePlaceholder" class="placeholder-text" style="@( !string.IsNullOrEmpty(Model?.AuthorImageUrl) ? "display:none;" : "")">No Image</span>
                    </div>

                    <input type="text" class="book-master-file-input-text" readonly id="authorImageFileNameDisplay">
                    <button type="button" class="edit-genre-browse-button" onclick="document.getElementById('authorImageFile').click();">BROWSE</button>
                    <input type="file" id="authorImageFile" accept="image/*" name="AuthorImageFile" style="display: none;">
                    @* <input type="text" class="book-master-file-input-text" readonly id="authorImageFileNameDisplay"> *@

                    <p id="authorImageUploadStatus" class="edit-genre-upload-status">
                        <span class="file-size-info">Max file size: 1GB</span>
                        <span class="supported-formats-info">Supported formats: JPG, PNG, JPEG</span>
                    </p>
                    <input type="text" id="authorImageUrl" name="AuthorImageUrl" value="@Model?.AuthorImageUrl">
                </div>

                <div>
                    <div class="book-master-form-grid">
                        <div class="book-master-form-group">
                            <label for="authorName">Author Name</label>
                            <input type="text" id="authorName" name="AuthorName" class="book-master-form-input" value="@Model?.AuthorName" required>
                            <span asp-validation-for="AuthorName" class="text-danger"></span>
                        </div>
                        <div class="book-master-form-group">
                            <label for="authorDescription">Description</label>
                            <input type="text" id="authorDescription" name="AuthorDescription" class="book-master-form-input" value="@Model?.AuthorDescription" required>

                            <span asp-validation-for="AuthorDescription" class="text-danger"></span>
                        </div>
                    </div>
                </div>
            </div>

            <div class="button-container">
                <button type="button" class="cancel-button" onclick="window.location.href='/Author/Index';">CANCEL</button>
                <button type="submit" class="book-master-submit-button" id="addAuthorSubmitButton">SAVE CHANGES</button>
            </div>
        </form>

        @* Book List section start - Stati *@
        <div class="books-by-author-section">
            <h2>Books by this Author</h2>
            <div class="book-grid" id="bookGrid">
                @for (int i = 1; i <= 25; i++) 
                {
                    <div class="book-item">
                        <div class="book-item-image-container">
                            <img src="https://via.placeholder.com/180x200?text=Book+@i+Cover" alt="Book @i Cover">
                        </div>
                        <div class="book-item-details">
                            <h4>Book Title @i</h4>
                            <p>Book ID: 100@(i)</p>
                        </div>
                    </div>
                }
            </div>

            <div class="pagination-controls" id="paginationControls">
            </div>
        </div>
        @* Book list section end *@

    </div>
</div>


<div class="modal fade confirmation-modal" id="addAuthorConfirmationModal" tabindex="-1" aria-labelledby="addAuthorConfirmationModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header border-0">
                <h5 class="modal-title" id="addAuthorConfirmationModalLabel">Edit Author Confirmation</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body text-center">
                <p class="mb-4" id="addConfirmationModalMessage">Are you sure you want to save changes for this author?</p> 
                <div class="d-flex justify-content-center gap-2">
                    <button type="button" class="btn btn-secondary px-4" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary px-4" id="confirmAddAuthorAction">Save Changes</button>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="modal fade status-modal" id="statusModal" tabindex="-1" aria-labelledby="statusModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-body text-center py-4">
                <div class="status-icon mb-3">
                    <i class="fas fa-check"></i>
                </div>
                <h5 class="modal-title mb-2" id="statusModalLabel">Status</h5>
                <p class="mb-4" id="statusModalMessage">Operation completed successfully!</p>
                <button type="button" class="btn btn-secondary px-4" data-bs-dismiss="modal" id="statusModalClose">OK</button>
            </div>
        </div>
    </div>
</div>

@section scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // Image Preview Logic
            const authorImageFile = document.getElementById('authorImageFile');
            const authorImagePreview = document.getElementById('authorImagePreview');
            const imagePlaceholder = document.getElementById('imagePlaceholder');

            if (authorImageFile) {
                authorImageFile.addEventListener('change', function () {
                    const file = this.files[0];
                    if (file) {
                        const reader = new FileReader();
                        reader.onload = function (e) {
                            authorImagePreview.src = e.target.result;
                            authorImagePreview.style.display = 'block';
                            imagePlaceholder.style.display = 'none';
                        };
                        reader.readAsDataURL(file);
                    } else {
                        authorImagePreview.src = '';
                        authorImagePreview.style.display = 'none';
                        imagePlaceholder.style.display = 'block';
                    }
                });
            }

            // Static Pagination Logic
            const bookItems = document.querySelectorAll('#bookGrid .book-item');
            const paginationControls = document.getElementById('paginationControls');
            const booksPerPage = 10; // 5 books per row * 2 rows 
            const totalBooks = bookItems.length;
            const totalPages = Math.ceil(totalBooks / booksPerPage);
            let currentPage = 1;
            let pageInfoSpan;

            function displayPage(page) {
                currentPage = page;

                bookItems.forEach(item => item.style.display = 'none');

                const startIndex = (currentPage - 1) * booksPerPage;
                const endIndex = Math.min(startIndex + booksPerPage, totalBooks);

                for (let i = startIndex; i < endIndex; i++) {
                    bookItems[i].style.display = 'block';
                }

                const startRange = startIndex + 1;
                const endRange = endIndex;
                if (pageInfoSpan) {
                    pageInfoSpan.textContent = `${startRange}-${endRange} out of ${totalBooks} Books`;
                }
                updatePaginationButtons();
            }

            function updatePaginationButtons() {
                const buttons = paginationControls.querySelectorAll('.pagination-button');
                const prevButton = paginationControls.querySelector('.pagination-arrow[data-direction="prev"]');
                const nextButton = paginationControls.querySelector('.pagination-arrow[data-direction="next"]');

                buttons.forEach(button => {
                    if (parseInt(button.dataset.page) === currentPage) {
                        button.classList.add('active');
                    } else {
                        button.classList.remove('active');
                    }
                });

                // enable/disable 
                if (prevButton) {
                    prevButton.disabled = (currentPage === 1);
                }
                if (nextButton) {
                    nextButton.disabled = (currentPage === totalPages);
                }
            }

            // pagination buttons
            function setupPagination() {
                paginationControls.innerHTML = ''; 

                // page info 
                pageInfoSpan = document.createElement('span');
                pageInfoSpan.classList.add('page-info');
                paginationControls.appendChild(pageInfoSpan); 

                // Previous button
                const prevButton = document.createElement('button');
                prevButton.classList.add('pagination-arrow');
                prevButton.dataset.direction = 'prev';
                prevButton.innerHTML = '<i class="fas fa-chevron-left"></i>';
                prevButton.addEventListener('click', () => {
                    if (currentPage > 1) {
                        displayPage(currentPage - 1);
                    }
                });
                paginationControls.appendChild(prevButton);

                // numbered page buttons
                for (let i = 1; i <= totalPages; i++) {
                    const button = document.createElement('button');
                    button.classList.add('pagination-button');
                    button.dataset.page = i;
                    button.textContent = i;
                    button.addEventListener('click', () => displayPage(i));
                    paginationControls.appendChild(button);
                }

                // Next button
                const nextButton = document.createElement('button');
                nextButton.classList.add('pagination-arrow');
                nextButton.dataset.direction = 'next';
                nextButton.innerHTML = '<i class="fas fa-chevron-right"></i>';
                nextButton.addEventListener('click', () => {
                    if (currentPage < totalPages) {
                        displayPage(currentPage + 1);
                    }
                });
                paginationControls.appendChild(nextButton);
            }

            if (totalBooks > 0) {
                setupPagination();
                displayPage(1); 
            } else {
                paginationControls.style.display = 'none';
                const noBooksMessage = document.createElement('p');
                noBooksMessage.textContent = 'No books added for this author yet.';
                document.querySelector('.books-by-author-section').appendChild(noBooksMessage);
            }
        });
    </script>
}