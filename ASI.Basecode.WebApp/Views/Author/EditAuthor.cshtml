@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@model ASI.Basecode.Services.ServiceModels.AuthorViewModel
@{
    ViewData["Title"] = "Edit Author"; 
    Layout = "_AdminSidebarLayout";
}

@section styles {
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <link rel="stylesheet" href="~/css/admin/books/bookmaster.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/admin/common.css" asp-append-version="true" />
    <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css"/>
}

<div class="admin-common-container">
    <div class="admin-common-content-wrapper">
        <div class="header-section">
            <h1>Edit Author</h1> 
            <p>Edit author details here</p> 
        </div>


        <div asp-validation-summary="ModelOnly" class="validation-summary-errors"></div>

        <form asp-action="EditAuthor" asp-controller="Author" method="post" id="editAuthorForm">
           
            @*<input type="hidden" id="authorImageUrl" name="AuthorImageUrl">*@
            <input type = "hidden" name="AuthorId" value = "@Model.AuthorId"/>

            <div class="content-master-grid">
                <div class="image-upload-section">
                    <div class="author-image-preview-container">
                        <img id="authorImagePreview" src="@Model?.AuthorImageUrl" style="@(string.IsNullOrEmpty(Model?.AuthorImageUrl) ? "display:none;" : "")">
                        <span id="imagePlaceholder" class="placeholder-text" style="@( !string.IsNullOrEmpty(Model?.AuthorImageUrl) ? "display:none;" : "")">No Image</span>
                    </div>

                    <input type="text" class="book-master-file-input-text" readonly id="authorImageFileNameDisplay">
                    <button type="button" class="master-browse-button" onclick="document.getElementById('authorImageFile').click();">BROWSE</button>
                    <input type="file" id="authorImageFile" accept="image/*" style="display: none;">

                    <p id="authorImageUploadStatus" class="master-upload-status">
                        <span class="file-size-info">Max file size: 1GB</span>
                        <span class="supported-formats-info">Supported formats: JPG, PNG, JPEG</span>
                    </p>
                    <input type="text" id="authorImageUrl" name="AuthorImageUrl" value="@Model?.AuthorImageUrl">
                </div>

                <div>
                    <div class="book-master-form-grid">
                        <div class="book-master-form-group">
                            <label for="authorName" class="required-label">Author Name</label>
                            <input type="text" id="authorName" name="AuthorName" class="book-master-form-input" value="@Model?.AuthorName" required>
                            <span asp-validation-for="AuthorName" class="text-danger"></span>
                        </div>
                        <div class="book-master-form-group">
                            <label for="authorDescription">Description</label>
                            <input type="text" id="authorDescription" name="AuthorDescription" class="book-master-form-input" value="@Model?.AuthorDescription">

                            <span asp-validation-for="AuthorDescription" class="text-danger"></span>
                        </div>
                    </div>
                </div>
            </div>

            <div class="button-container">
                <button type="button" class="cancel-button" onclick="window.location.href='/Author/Index';">CANCEL</button>
                <button type="submit" class="book-master-submit-button" id="editAuthorSubmitButton">SAVE CHANGES</button>
            </div>
        </form>
    </div>
</div>


@* <div class="modal fade confirmation-modal" id="addAuthorConfirmationModal" tabindex="-1" aria-labelledby="addAuthorConfirmationModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header border-0">
                <h5 class="modal-title" id="addAuthorConfirmationModalLabel">Edit Author Confirmation</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body text-center">
                <p class="mb-4" id="addConfirmationModalMessage">Are you sure you want to save changes for this author?</p> 
                <div class="d-flex justify-content-center gap-2">
                    <button type="button" class="btn btn-secondary px-4" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary px-4" id="confirmAddAuthorAction">Save Changes</button>
                </div>
            </div>
        </div>
    </div>
</div> *@

@section scripts {
    <script type = "module">
        // Your Firebase configuration
        //Transfer this secretes into AnalyserNode env or file, and include it in gitignore.
        const firebaseConfig = {
            apiKey: "AIzaSyA4CTMSbgGQN_yLn9lEZlswbZ_2A2Xhl0k",
            authDomain: "basabuzz-ca8fe.firebaseapp.com",
            projectId: "basabuzz-ca8fe",
            storageBucket: "basabuzz-ca8fe.firebasestorage.app",
            messagingSenderId: "206533484485",
            appId: "1:206533484485:web:2c71a06a17d5244efe75ac"
        };

        // Initialize Firebase
        import { initializeApp } from "https://www.gstatic.com/firebasejs/11.9.1/firebase-app.js";
        import { getStorage, ref, uploadBytesResumable, getDownloadURL, deleteObject } from "https://www.gstatic.com/firebasejs/11.9.1/firebase-storage.js";

        const app = initializeApp(firebaseConfig);
        const storage = getStorage(app);

        async function deleteFileFromFirebase(fileUrl) {
            if (!fileUrl) {
                console.warn("Attempted to delete null or empty file URL.");
                return;
            }
            try {
                const fileRef = ref(storage, fileUrl);
                await deleteObject(fileRef);
                console.log(`Successfully deleted file: ${fileUrl}`);
            } catch (error) {
                toastr.error(`Failed to delete file ${fileUrl}: ${error.message}`);
                console.error(`Failed to delete file ${fileUrl}:`, error);
            }
        }

        async function rollbackFileUploads(uploadedGImageUrl, imageUploadStatusElement) {
            if (uploadedGImageUrl) {
                await deleteFileFromFirebase(uploadedGImageUrl);
                if (imageUploadStatusElement) {
                    const fileSizeInfo = imageUploadStatusElement.querySelector('.file-size-info');
                    if (fileSizeInfo) {
                        fileSizeInfo.textContent = 'Upload rolled back due to backend error.';
                    }
                    imageUploadStatusElement.classList.add('error-message');
                }
            }
        }

        //Firebase Upload Function
        async function uploadFileToFirebase(file, path, statusElement) {
            // Ensure statusElement is valid and contains the target span before trying to update it
            const fileSizeInfoSpan = statusElement ? statusElement.querySelector('.file-size-info') : null;

            if (!file) {
                if (fileSizeInfoSpan) { // Only update if the span exists
                    fileSizeInfoSpan.textContent = 'No file selected.';
                }
                return null;
            }

            const timestamp = new Date().getTime();
            const randomString = Math.random().toString(36).substring(2, 8);
            const uniqueFileName = `${timestamp}-${randomString}-${file.name}`;

            const storageRef = ref(storage, path + uniqueFileName);
            const uploadTask = uploadBytesResumable(storageRef, file);

            return new Promise((resolve, reject) => {
                uploadTask.on('state_changed',
                    (snapshot) => {
                        const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;
                        if (fileSizeInfoSpan) { // Safely update progress
                            fileSizeInfoSpan.textContent = `Upload is ${progress.toFixed(2)}% done`;
                        }
                    },
                    (error) => {
                        toastr.error(`Author image upload failed: ${error.message}`);
                        console.error("Upload error:", error);
                        reject(error);
                    },
                    async () => {
                        try {
                            const downloadURL = await getDownloadURL(uploadTask.snapshot.ref);
                            if (fileSizeInfoSpan) { // Safely update success message
                                fileSizeInfoSpan.textContent = 'Upload successful!';
                            }
                            resolve(downloadURL);
                        } catch (error) {
                            toastr.error(`Failed to get download URL: ${error.message}`);
                            console.error("Get Download URL error:", error);
                            reject(error);
                        }
                    }
                );
            });
        }


        document.addEventListener('DOMContentLoaded', function () {
            // Image Preview Logic
            const authorImageFile = document.getElementById('authorImageFile');
            const authorImagePreview = document.getElementById('authorImagePreview');
            const imagePlaceholder = document.getElementById('imagePlaceholder');


            const editAuthorForm = document.getElementById("editAuthorForm");
            const authorImageUploadStatusElement = document.getElementById('authorImageUploadStatus');
            const authorImageUrlInput = document.getElementById('authorImageUrl');

            if (authorImageFile) {
                authorImageFile.addEventListener('change', function () {
                    const file = this.files[0];
                    if (file) {
                        const reader = new FileReader();
                        reader.onload = function (e) {
                            authorImagePreview.src = e.target.result;
                            authorImagePreview.style.display = 'block';
                            imagePlaceholder.style.display = 'none';
                        };
                        reader.readAsDataURL(file);
                    } else {
                        authorImagePreview.src = '';
                        authorImagePreview.style.display = 'none';
                        imagePlaceholder.style.display = 'block';
                    }
                });
            }


            // document.getElementById('confirmAddAuthorAction').addEventListener('click', function () {
            //     const modal = bootstrap.Modal.getInstance(document.getElementById('addAuthorConfirmationModal'));
            //     modal.hide();
            //     document.getElementById('editAuthorForm').dispatchEvent(new Event('submit'));
            // });



            //Edit function
            document.getElementById('editAuthorForm').addEventListener('submit', async (event) => {
                event.preventDefault()

                const form = document.getElementById("editAuthorForm");
                const authorNameInput = document.getElementById('authorName');
                const authorImageFileInstance = document.getElementById('authorImageFile');
                const authorImageFile = authorImageFileInstance.files[0];
                const authorImageUrlHiddenInput = document.getElementById('authorImageUrl');
                const submitButton = document.getElementById('editAuthorSubmitButton');
                const authorImageUploadStatusElement = document.getElementById('authorImageUploadStatus');

                const originalAuthorImageUrl = authorImageUrlInput.value;

                if (authorNameInput.value.trim() === '') {
                    toastr.warning('Author Name is required.');
                    return;
                }

                if (!authorImageFile && !originalAuthorImageUrl) {
                    toastr.warning('Author Image is required.');
                    return;
                }

                const fileSizeInfoSpan = authorImageUploadStatusElement.querySelector('.file-size-info');
                const supportedFormatsInfoSpan = authorImageUploadStatusElement.querySelector('.supported-formats-info');
                if (fileSizeInfoSpan) fileSizeInfoSpan.textContent = 'Max file size: 1GB';
                if (supportedFormatsInfoSpan) supportedFormatsInfoSpan.textContent = 'Supported formats: JPG, PNG, JPEG';
                authorImageUploadStatusElement.classList.remove('error-message');


                submitButton.disabled = true;
                submitButton.textContent = 'Processing...';

                let uploadedAuthorImageUrl = null;

                try {
                    if (authorImageFile) {
                        const MAX_FILE_SIZE_BYTES = 1 * 1024 * 1024 * 1024;
                        if (authorImageFile.size > MAX_FILE_SIZE_BYTES) {
                            toastr.error('File size exceeds the 1GB limit.');
                            if (fileSizeInfoSpan) fileSizeInfoSpan.textContent = 'File too large!';
                            authorImageUploadStatusElement.classList.add('error-message');
                            submitButton.disabled = false;
                            submitButton.textContent = 'SAVE CHANGES';
                            return;
                        }
                        uploadedAuthorImageUrl = await uploadFileToFirebase(authorImageFile, 'author_covers/', authorImageUploadStatusElement);
                        if (uploadedAuthorImageUrl) {
                            authorImageUrlHiddenInput.value = uploadedAuthorImageUrl;
                        } else {
                            throw new Error('New image upload failed or was cancelled.');
                        }
                    }

                    const formData = new FormData(form);
                    console.log(form.action)

                    const response = await fetch('/Author/EditAuthor', {
                        method: form.method,
                        body: formData
                    });

                    if (response.ok) {
                        const messageData = await response.json();
                        // alert(messageData.message)
                        toastr.success(messageData.message || 'Author updated successfully!');

                        if (uploadedAuthorImageUrl && originalAuthorImageUrl && uploadedAuthorImageUrl !== originalAuthorImageUrl) {
                            await deleteFileFromFirebase(originalAuthorImageUrl);
                        }
                        // location.reload()
                    } else {
                        const errorData = await response.json();
                        
                        const errorMessage = JSON.stringify(errorData.errors || errorData.message || "An unknown error occurred on the server.");
                        // alert(errorMessage)
                        toastr.error(errorMessage);

                        
                        if (uploadedAuthorImageUrl && uploadedAuthorImageUrl !== originalAuthorImageUrl) {
                            await deleteFileFromFirebase(uploadedAuthorImageUrl);
                            toastr.warning("New image upload rolled back due to backend error.");
                            // revert if new upload failed and backend failed
                            authorImageUrlHiddenInput.value = originalAuthorImageUrl;

                            /*if (uploadedAuthorImageUrl) {
                                genreImagePreview.src = originalGenreImageUrl;
                                genreImagePreview.style.display = 'block';
                                imagePlaceholder.style.display = 'none';
                            } else {
                                genreImagePreview.src = '';
                                genreImagePreview.style.display = 'none';
                                imagePlaceholder.style.display = 'block';
                            }*/
                        }
                    }

                } catch (error) {
                    console.error('Submission error:', error);
                    // alert('Submission error:' + error
                    toastr.error(`Submission error: ${error.message}`);

                    if (uploadedAuthorImageUrl && uploadedAuthorImageUrl !== originalAuthorImageUrl) {
                        await deleteFileFromFirebase(uploadedAuthorImageUrl);
                        toastr.warning("New image upload rolled back due to submission error.");
                        authorImageUrlHiddenInput.value = originalAuthorImageUrl;
                        /*updateImagePreview(null);
                        if (originalGenreImageUrl) {
                            genreImagePreview.src = originalGenreImageUrl;
                            genreImagePreview.style.display = 'block';
                            imagePlaceholder.style.display = 'none';
                        } else {
                            genreImagePreview.src = '';
                            genreImagePreview.style.display = 'none';
                            imagePlaceholder.style.display = 'block';
                        }*/
                    }
                } finally {
                    submitButton.disabled = false;
                    submitButton.textContent = 'SAVE CHANGES';
                }
            });
        });
    </script>
}