@model OtpViewModel
@using static ASI.Basecode.Resources.Views.Screen
@using ASI.Basecode.Services.ServiceModels;
@section styles {
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" />
    <link rel="stylesheet" href="~/css/login.css" />
    <style>
        html, body {
            height: 100%;
            margin: 0;
            background-color: #f6f3ea;
        }

        body {
            display: flex;
            flex-direction: column;
            min-height: 100vh;
        }

        main {
            flex: 1 0 auto;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .container {
            display: flex;
            align-items: center;
            justify-content: center;
            height: 100%;
            padding: 0;
            max-width: 100%;
        }

        .page-container
        {
            display: flex;
            align-items: center;
            justify-content: center;
            height: 100%;
            padding: 0;
            max-width: 100%;
        }

        .footer {
            margin-top: auto;
            position: relative !important;
        }

        .otp-container {
            max-width: 480px;
            width: 100%;
            background: white;
            border-radius: 18px;
            box-shadow: 0px 4px 20px rgba(0, 0, 0, 0.15);
            padding: 32px;
            text-align: center;
            position: absolute;
            top: 40%;
            left: 50%;
            transform: translate(-50%, -50%);
            z-index: 10;
        }

        .logo-container {
            position: absolute;
            top: 24px;
            left: 24px;
            z-index: 20;
        }

        .bb-logo {
            width: 120px;
            height: auto;
        }


        .otp-icon {
            color: #5b7c78;
            font-size: 48px;
            margin-bottom: 16px;
        }

        .otp-title {
            font-family: 'Merriweather', serif;
            font-size: 24px;
            font-weight: 700;
            margin-bottom: 8px;
            color: #3a4a47;
        }

        .otp-subtitle {
            color: #777;
            font-size: 14px;
            margin-bottom: 24px;
        }

        .otp-input-group {
            display: flex;
            justify-content: center;
            gap: 12px;
            margin-bottom: 24px;
        }

        .otp-input {
            width: 48px;
            height: 48px;
            text-align: center;
            font-size: 20px;
            border: 1px solid #bfc8c6;
            border-radius: 8px;
            background-color: #fafafa;
        }

        .otp-button {
            width: 100%;
            background: #4b5f5a;
            color: #fff;
            font-family: 'Montserrat', sans-serif;
            font-size: 16px;
            font-weight: 500;
            border: none;
            border-radius: 24px;
            padding: 10px 0;
            margin-bottom: 16px;
            cursor: pointer;
            transition: background 0.2s;
            position: relative;
        }

        .otp-button:hover {
            background: #5b7c78;
        }

        .otp-button.secondary {
            background: transparent;
            border: 1px solid #4b5f5a;
            color: #4b5f5a;
        }

        .otp-button.secondary:hover {
            background: #f6f3ea;
        }

        .otp-timer-resend {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-top: 16px;
            font-size: 14px;
            color: #777;
        }

        .otp-timer {
            color: #777;
        }
        
        .otp-timer span {
            font-weight: 600;
            color: #5b7c78;
        }

        .otp-resend {
            margin-top: 16px;
            font-size: 14px;
            color: #777;
        }

        .otp-resend a {
            color: #5b7c78;
            text-decoration: underline;
            cursor: pointer;
        }

        .site-footer {
            position: fixed;
            bottom: 0;
            left: 0;
            width: 100%;
            z-index: 100;
        }

        .resend-link {
            color: #4b5f5a;
            font-weight: 700;
        }

        .resend-link.disabled {
            color: #aaa;
            pointer-events: none;
            text-decoration: none;
            cursor: default;
        }

    </style>
}
@{
    ViewBag.LoginView = true;
    ViewData["Title"] = "Verify OTP";
    var modelStateErrors = ViewData.ModelState.Values.SelectMany(v => v.Errors);
}

<div class="page-container">
  @* <div class="logo-container">
        <img src="~/img/bb_logo_black.png" alt="BasaBuzz Logo" class="bb-logo">
    </div>*@ 
    <div class="otp-container">       
        @Html.AntiForgeryToken()

        @if (modelStateErrors.Any())
        {
            <div class="alert alert-danger alert-dismissible fade show" role="alert">
                @foreach (var error in modelStateErrors)
                {
                    <p>@error.ErrorMessage</p>
                }
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
        }

        <div class="otp-icon">
            <i class="fas fa-shield-alt"></i>
        </div>
        <h2 class="otp-title">Verify Your Email</h2>
        <p class="otp-subtitle">Please enter the verification code sent to your email address</p>

        <form method="post" action="/Account/VerifyOtp" id="loginForm">
            <!-- Hidden actual input that will store concatenated OTP value -->
            <input type="hidden" id="otpCodeFinal" asp-for="OtpCode" />
            <input type="hidden" id="form2Example11" asp-for="Email" value="@Model.Email" />

            <div class="otp-input-group">
                <input type="text" class="otp-input" maxlength="1" data-index="1" />
                <input type="text" class="otp-input" maxlength="1" data-index="2" />
                <input type="text" class="otp-input" maxlength="1" data-index="3" />
                <input type="text" class="otp-input" maxlength="1" data-index="4" />
                <input type="text" class="otp-input" maxlength="1" data-index="5" />
                <input type="text" class="otp-input" maxlength="1" data-index="6" />
            </div>

            <span asp-validation-for="OtpCode" class="text-danger"></span>

            <button type="submit" class="otp-button">Verify</button>
            
            <div class="otp-timer-resend">
                <div class="otp-timer">
                    Remaining time: <span id="countdown">05:00</span>
                </div>
                <div>
                    Didn't get the code? <a class="resend-link" id="resendOtpLink">Resend</a>
                </div>
            </div>
        </form>
    </div>
</div>



@section Scripts {
    <script>
        // Check for error message and display Toastr notification
        var errorMessage = '@TempData["ErrorMessage"]';
        if (errorMessage) {
            toastr.error(errorMessage);
        }

        var successMessage = '@TempData["SuccessMessage"]';
        if (successMessage) {
            toastr.success(successMessage);
        }

        // OTP input handling
        document.addEventListener('DOMContentLoaded', function() {
            const inputs = document.querySelectorAll('.otp-input');
            const form = document.getElementById('loginForm');
            const otpCodeFinal = document.getElementById('otpCodeFinal');
            const resendLink = document.getElementById('resendOtpLink');
            const countdownElement = document.getElementById('countdown');
            
            // Initialize countdown timer - 5 minutes
            let timeLeft = 5 * 60; // 5 minutes in seconds
            
            // Check if we have a stored timestamp from a previous session
            const storedExpiry = sessionStorage.getItem('otpExpiryTime');
            if (storedExpiry) {
                const now = Math.floor(Date.now() / 1000); // Current time in seconds
                const expiryTime = parseInt(storedExpiry);
                
                if (expiryTime > now) {
                    // Calculate remaining time
                    timeLeft = expiryTime - now;
                } else {
                    // OTP has expired, reset the timer
                    sessionStorage.removeItem('otpExpiryTime');
                    timeLeft = 5 * 60;
                    
                    // Store new expiry time
                    const newExpiryTime = now + timeLeft;
                    sessionStorage.setItem('otpExpiryTime', newExpiryTime.toString());
                }
            } else {
                // First time, set expiry time
                const now = Math.floor(Date.now() / 1000);
                const expiryTime = now + timeLeft;
                sessionStorage.setItem('otpExpiryTime', expiryTime.toString());
            }
            
            // Start countdown
            const countdownTimer = setInterval(function() {
                timeLeft--;
                
                if (timeLeft <= 0) {
                    clearInterval(countdownTimer);
                    countdownElement.innerHTML = "00:00";
                    
                    // Enable resend link when time expires
                    resendLink.classList.remove('disabled');
                    
                    // Show expiry message
                    toastr.warning('Your OTP has expired. Please request a new one.');
                } else {
                    // Format time as MM:SS
                    const minutes = Math.floor(timeLeft / 60);
                    const seconds = timeLeft % 60;
                    
                    countdownElement.innerHTML = 
                        (minutes < 10 ? "0" : "") + minutes + ":" + 
                        (seconds < 10 ? "0" : "") + seconds;
                    
                    // If less than a minute, make text red
                    if (timeLeft < 60) {
                        countdownElement.style.color = "#ff4444";
                    }
                }
            }, 1000);

            // Auto focus and navigate between inputs
            inputs.forEach(input => {
                input.addEventListener('keyup', function(e) {
                    // If input has a value, move to next input
                    if (this.value.length === this.maxLength) {
                        const nextIndex = parseInt(this.getAttribute('data-index')) + 1;
                        const nextInput = document.querySelector(`.otp-input[data-index="${nextIndex}"]`);
                        if (nextInput) nextInput.focus();
                    }

                    // On backspace, move to previous input
                    if (e.key === 'Backspace' && this.value.length === 0) {
                        const prevIndex = parseInt(this.getAttribute('data-index')) - 1;
                        const prevInput = document.querySelector(`.otp-input[data-index="${prevIndex}"]`);
                        if (prevInput) prevInput.focus();
                    }

                    // Update the hidden input with concatenated value
                    updateFinalOtp();
                });

                // Handle paste event
                input.addEventListener('paste', function(e) {
                    e.preventDefault();
                    const pastedData = e.clipboardData.getData('text').trim();
                    
                    if (/^\d+$/.test(pastedData)) {
                        for (let i = 0; i < Math.min(pastedData.length, inputs.length); i++) {
                            inputs[i].value = pastedData[i] || '';
                        }
                        // Focus on the next empty input or the last one
                        const lastFilledIndex = Math.min(pastedData.length, inputs.length);
                        if (inputs[lastFilledIndex]) {
                            inputs[lastFilledIndex].focus();
                        } else {
                            inputs[inputs.length - 1].focus();
                        }
                        updateFinalOtp();
                    }
                });
            });

            // Combine all inputs into one value
            function updateFinalOtp() {
                let otp = '';
                inputs.forEach(input => {
                    otp += input.value;
                });
                otpCodeFinal.value = otp;
            }

            // Before form submission, ensure the OTP is updated
            form.addEventListener('submit', function(e) {
                updateFinalOtp();
                
                // Check if OTP has expired
                if (timeLeft <= 0) {
                    e.preventDefault();
                    toastr.error('Your OTP has expired. Please request a new one.');
                    return false;
                }
            });

            // Auto-focus first input on page load
            if (inputs.length > 0) {
                inputs[0].focus();
            }
        });

        // Resend OTP logic
        document.getElementById('resendOtpLink').addEventListener('click', function (e) {
            e.preventDefault(); // Prevent the default link behavior

            var emailInput = document.querySelector('input[name="Email"]');
            var email = emailInput ? emailInput.value : '';

            if (!email) {
                alert('Error: Email address not found. Cannot resend OTP.');
                return;
            }

            // Reset the timer in session storage
            sessionStorage.removeItem('otpExpiryTime');

            //Create a hidden form
            var form = document.createElement('form');
            form.method = 'post';
            form.action = '@Url.Action("ResendOtp", "Account")'; //Matches your route

            var hiddenEmailInput = document.createElement('input');
            hiddenEmailInput.type = 'hidden';
            hiddenEmailInput.name = 'email';//should match the parameter in the controller
            hiddenEmailInput.value = email;
            form.appendChild(hiddenEmailInput);

            // Append the form to the body and submit it
            document.body.appendChild(form);
            form.submit();
        });
    </script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
}