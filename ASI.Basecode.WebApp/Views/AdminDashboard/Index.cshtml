@using ASI.Basecode.Services.ServiceModels
@model AdminDashboardViewModel

@{
    Layout = "_AdminSidebarLayout";
}

@section styles {
    <link rel="stylesheet" href="~/css/admin/dashboard.css" asp-append-version="true" />
}

<div class="admin-common-container">
    <div class="admin-common-content-wrapper">
        <div class="header-section">
            <h1>Dashboard</h1>
            <p>Overview of your book review platform</p>
        </div>

        <!-- Stats Cards -->
        <div class="row g-4 mb-4">
            <div class="col-md-6 col-lg-3">
                <div class="stats-card a" onclick="window.location.href='@Url.Action("ListBook", "Book")'">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <h3 class="mb-0">@Model.TotalReviews</h3>
                            <p class="text-muted mb-0">Total Reviews</p>
                        </div>
                        <i class="fas fa-star stats-icon"></i>
                    </div>
                </div>
            </div>
            <div class="col-md-6 col-lg-3">
                <div class="stats-card b" onclick="window.location.href='@Url.Action("ListBook", "Book")'">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <h3 class="mb-0">@Model.TotalBooks</h3>
                            <p class="text-muted mb-0">Total Books</p>
                        </div>
                        <i class="fas fa-book stats-icon"></i>
                    </div>
                </div>
            </div>
            <div class="col-md-6 col-lg-3">
                <div class="stats-card a" onclick="window.location.href='@Url.Action("Index", "User")'">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <h3 class="mb-0">@Model.TotalUsers</h3>
                            <p class="text-muted mb-0">Total Users</p>
                        </div>
                        <i class="fas fa-users stats-icon"></i>
                    </div>
                </div>
            </div>
            <div class="col-md-6 col-lg-3">
                <div class="stats-card b" onclick="window.location.href='@Url.Action("ListGenre", "BookGenre")'">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <h3 class="mb-0">@Model.TotalGenres</h3>
                            <p class="text-muted mb-0">Total Genres</p>
                        </div>
                        <i class="fas fa-tags stats-icon"></i>
                    </div>
                </div>
            </div>
        </div>

         <!-- Top 10 Rated Books Section -->
        <section class="section-card admin-carousel-section">
            <div class="book-list-header">
                <h2>Top 10 Rated Books</h2>
                <div class="see-more-link-wrapper">
                    <a asp-controller="Book"
                       asp-action="ListBook"
                       asp-route-sortOrder="rating"
                       asp-route-sortDescending="true"
                       asp-route-category="Top Rated">See More</a>
                </div>
            </div>
            <div class="admin-book-carousel-container top-rated-carousel">
                <button class="carousel-button admin-carousel-btn prev-button"
                        aria-label="Previous books">
                    <span class="button-icon">&#x25C0;</span>
                </button>
                <div class="admin-book-display-wrapper">
                    @for (int i = 0; i < Model.TopRatedBooks.Count; i++)
                    {
                        var book = Model.TopRatedBooks[i];
                        <div class="admin-carousel-card hidden-book-card" onclick="window.location.href='/Book/BookDetails/@book.BookId'" style="cursor: pointer">
                            <img class="admin-carousel-img" src="@book.CoverImage" alt="@book.Title Book Cover">
                            <div class="admin-carousel-content">
                                <h3 class="admin-carousel-title">@book.Title</h3>
                                <p class="admin-carousel-author">by @book.Author</p>
                                <p class="admin-carousel-desc"><i>@book.Description</i></p>
                                <div class="star-rating admin-star-rating">
                                    <div class="stars">
                                        @for (int j = 0; j < 5; j++)
                                        {
                                            if (j < book.AverageRating)
                                            {
                                                <svg viewBox="0 0 24 24"><path d="M12 .587l3.668 7.568 8.332 1.151-6.064 5.828 1.48 8.212L12 18.896l-7.416 3.948 1.48-8.212L.001 9.306l8.332-1.151L12 .587z" /></svg>
                                            }
                                            else
                                            {
                                                <svg class="empty-star" viewBox="0 0 24 24"><path d="M12 .587l3.668 7.568 8.332 1.151-6.064 5.828 1.48 8.212L12 18.896l-7.416 3.948 1.48-8.212L.001 9.306l8.332-1.151L12 .587z" /></svg>
                                            }
                                        }
                                    </div>
                                </div>
                                                                                                    <p style="font-size: 10px">@book.AverageRating/5.0</p>

                                <div class="genre-tags">
                                    @{
                                        var genres = book.GenreList?.Split(new[] { ',', ';' }, StringSplitOptions.RemoveEmptyEntries)
                                        .Select(s => s.Trim())
                                        .ToList() ?? new List<string>();

                                        var colorClasses = new string[] {
                                                                "dynamic-genre-1", "dynamic-genre-2", "dynamic-genre-3", "dynamic-genre-4", "dynamic-genre-5",
                                                                "dynamic-genre-6", "dynamic-genre-7", "dynamic-genre-8", "dynamic-genre-9", "dynamic-genre-10"
                                                                };

                                        foreach (var tag in genres)
                                        {
                                            var colorIndex = Math.Abs(tag.GetHashCode()) % colorClasses.Length;
                                            <span class="genre-tag @colorClasses[colorIndex]" id="genre-tag-id">@tag</span>
                                        }
                                    }
                                </div>
                            </div>
                        </div>
                    }
                </div>
                <button class="carousel-button admin-carousel-btn next-button"
                        aria-label="Next books">
                    <span class="button-icon">&#x25B6;</span>
                </button>
            </div>
        </section>  
        <!-- Newly Added Books Section -->
        <section class="section-card admin-carousel-section">
            <div class="book-list-header">
                <h2>Newly Added Books</h2>
                <div class="see-more-link-wrapper">
                    <a asp-controller="Book"
                       asp-action="ListBook"
                       asp-route-sortOrder="uploaddate"
                       asp-route-sortDescending="true"
                       asp-route-category="New Books">See More</a>
                </div>
            </div>
            <div class="admin-book-carousel-container new-books-carousel">
                <button class="carousel-button admin-carousel-btn prev-button"
                        aria-label="Previous books">
                    <span class="button-icon">&#x25C0;</span>
                </button>
                <div class="admin-book-display-wrapper">
                    @for (int i = 0; i < Model.NewBooks.Count; i++)
                    {
                        var book = Model.NewBooks[i];
                        <div class="admin-carousel-card hidden-book-card" onclick="window.location.href='/Book/BookDetails/@book.BookId'" style="cursor: pointer">
                            <img class="admin-carousel-img" src="@book.CoverImage" alt="@book.Title Book Cover">
                            <div class="admin-carousel-content">
                                <h3 class="admin-carousel-title">@book.Title</h3>
                                <p class="admin-carousel-author">by @book.Author</p>
                                <p class="admin-carousel-desc text-truncate"><i>@book.Description</i></p>
                                <div class="star-rating admin-star-rating">
                                    <div class="stars">
                                        @for (int j = 0; j < 5; j++)
                                        {
                                            if (j < book.AverageRating)
                                            {
                                                <svg viewBox="0 0 24 24"><path d="M12 .587l3.668 7.568 8.332 1.151-6.064 5.828 1.48 8.212L12 18.896l-7.416 3.948 1.48-8.212L.001 9.306l8.332-1.151L12 .587z" /></svg>
                                            }
                                            else
                                            {
                                                <svg class="empty-star" viewBox="0 0 24 24"><path d="M12 .587l3.668 7.568 8.332 1.151-6.064 5.828 1.48 8.212L12 18.896l-7.416 3.948 1.48-8.212L.001 9.306l8.332-1.151L12 .587z" /></svg>
                                            }
                                        }
                                    </div>
                                </div>
                                                                    <p style="font-size: 10px">@book.AverageRating/5.0</p>

                                <div class="genre-tags">
                                    @{
                                        var genres = book.GenreList?.Split(new[] { ',', ';' }, StringSplitOptions.RemoveEmptyEntries)
                                        .Select(s => s.Trim())
                                        .ToList() ?? new List<string>();

                                        var colorClasses = new string[] {
                                                                "dynamic-genre-1", "dynamic-genre-2", "dynamic-genre-3", "dynamic-genre-4", "dynamic-genre-5",
                                                                "dynamic-genre-6", "dynamic-genre-7", "dynamic-genre-8", "dynamic-genre-9", "dynamic-genre-10"
                                                                };

                                        foreach (var tag in genres)
                                        {
                                            var colorIndex = Math.Abs(tag.GetHashCode()) % colorClasses.Length;
                                            <span class="genre-tag @colorClasses[colorIndex]" id="genre-tag-id">@tag</span>
                                        }
                                    }
                                </div>
                            </div>
                        </div>
                    }
                </div>
                <button class="carousel-button admin-carousel-btn next-button"
                        aria-label="Next books">
                    <span class="button-icon">&#x25B6;</span>
                </button>
            </div>
        </section>
    </div>
</div>

@section Scripts {
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script type="module">
        var genreTag = document.querySelectorAll("#genre-tag-id");
        try {
            const response = await fetch('/Book/GetGenre', { method: 'GET' });
            let itemsToPopulate = [];

            if (response.ok) {
                const result = await response.json();
                itemsToPopulate = result.message;
            } else {
                console.error(`Server error fetching`);
            }

            for(var tag of genreTag){
                var isGenreExist = false;
                for(var item of itemsToPopulate){
                    const parts = item.split(',');
                    const itemName = parts[0].trim();
                    const itemValue = parts[1].trim();
                    

                    if (tag.textContent.includes(parts[1].trim().toLowerCase())) {
                        tag.textContent = itemName;
                        isGenreExist = true;
                    }
                }
                if(!isGenreExist){
                    tag.remove()
                }
            }

        } catch (error) {
            console.error(`Error initializing`, error);
        }
    </script>
    <script>
        $(document).ready(function () {
            console.log("Document ready, jQuery loaded");

            // Completely rewritten carousel function for 2 books per page
            function setupTwoBookCarousel(containerClass) {
                const container = $(containerClass);
                const bookCards = container.find('.admin-carousel-card');
                const prevButton = container.find('.prev-button');
                const nextButton = container.find('.next-button');

                // Hide all books initially
                bookCards.addClass('hidden-book-card');

                const booksPerPage = 4; 
                const totalBooks = bookCards.length;
                const totalPages = Math.ceil(totalBooks / booksPerPage);

                console.log(`Setting up ${containerClass}: ${totalBooks} books, ${totalPages} pages`);

                // Handle edge case with too few books
                if (totalBooks <= booksPerPage) {
                    bookCards.removeClass('hidden-book-card');
                    prevButton.hide();
                    nextButton.hide();
                    return;
                }

                let currentPage = 0;

                // Function to update the display
                function showPage(pageIndex) {
                    if (pageIndex < 0 || pageIndex >= totalPages) return;

                    // Hide all books first
                    bookCards.addClass('hidden-book-card');

                    // Calculate start and end indices
                    const startIndex = pageIndex * booksPerPage;
                    const endIndex = Math.min(startIndex + booksPerPage, totalBooks);

                    // Show only the books for current page
                    for (let i = startIndex; i < endIndex; i++) {
                        bookCards.eq(i).removeClass('hidden-book-card');
                    }

                    // Update button states
                    prevButton.prop('disabled', pageIndex === 0);
                    nextButton.prop('disabled', pageIndex >= totalPages - 1);

                    // Update current page tracker
                    currentPage = pageIndex;

                    console.log(`${containerClass}: Showing page ${currentPage + 1}/${totalPages}`);
                }

                // Event handlers
                prevButton.on('click', function() {
                    console.log('Previous button clicked');
                    if (currentPage > 0) {
                        showPage(currentPage - 1);
                    }
                });

                nextButton.on('click', function() {
                    console.log('Next button clicked');
                    if (currentPage < totalPages - 1) {
                        showPage(currentPage + 1);
                    }
                });

                // Show first page initially
                showPage(0);
            }

            // Initialize both carousels
            setupTwoBookCarousel('.new-books-carousel');
            setupTwoBookCarousel('.top-rated-carousel');

            function setupGenreTagsOverflow() {
            $('.genre-tags').each(function () {
                const $container = $(this);
                let $tags = $container.find('.genre-tag');

                $container.find('.genre-tags-more-indicator').remove();
                $tags.removeClass('hidden-tag').css('display', 'inline-flex');

                if ($tags.length === 0) {
                    $container.css('max-height', 'none');
                    return;
                }

                const containerHeight = $container[0].scrollHeight;
                const maxHeight = parseInt($container.css('max-height')) || 56;

                if (containerHeight <= maxHeight) {
                    return;
                }

                let visibleHeight = 0;
                let visibleTagsCount = 0;
                $tags.each(function (index) {
                    const $tempContainer = $('<div>').css({
                        display: 'flex',
                        'flex-wrap': 'wrap',
                        gap: '8px',
                        width: $container.width(),
                        'max-height': 'none',
                        visibility: 'hidden',
                        position: 'absolute',
                        left: '-9999px'
                    }).append($tags.slice(0, index + 1).clone());
                    $('body').append($tempContainer);
                    visibleHeight = $tempContainer[0].scrollHeight;
                    $tempContainer.remove();

                    if (visibleHeight <= maxHeight) {
                        visibleTagsCount++;
                    } else {
                        $(this).addClass('hidden-tag');
                    }
                });

                const hiddenTagsCount = $tags.length - visibleTagsCount;

                if (hiddenTagsCount > 0) {
                    const $moreIndicator = $(`<span class="genre-tags-more-indicator">+${hiddenTagsCount}</span>`);
                    $container.append($moreIndicator);
                    $container.addClass('has-overflow');
                } else {
                    $container.removeClass('has-overflow');
                }
            });
        }

            setupGenreTagsOverflow();
            $(window).on('resize', setupGenreTagsOverflow);
        });
    </script>
}