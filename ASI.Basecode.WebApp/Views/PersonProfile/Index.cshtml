@using System.Security.Claims
@model ASI.Basecode.Services.ServiceModels.PersonProfileViewModel;
@{
    ViewData["Title"] = "My Profile";
}

@section styles {
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-datepicker@1.9.0/dist/css/bootstrap-datepicker.min.css" rel="stylesheet" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/css/toastr.min.css">
    <link rel="stylesheet" href="~/css/admin/common.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/userui/viewuser.css" asp-append-version="true" />
}

<div class="container profile-container">
    <h1 class="header-section h1">My Profile</h1>
    <div class="profile-main-row">
        <div class="profile-card">
            <div class="profile-avatar">
                @if (!string.IsNullOrEmpty(Model?.ProfilePicture))
                {
                    <img id="avatarImg"
                         src="@(Model.ProfilePicture)"
                         alt="Profile picture"
                         class="w-100 h-100 rounded-circle object-fit-cover" />
                }
                else
                {
                    <i class="fas fa-user fa-5x text-secondary"></i>
                }

            </div>
            <div class="profile-name">@(Model?.FirstName ?? "") @(Model?.LastName ?? "")</div>
            <div class="profile-username">@(Model?.UserId ?? "")</div>
            <div class="profile-bio">
                @(Model?.AboutMe ?? "No bio available")
            </div>
        </div>

        <div class="profile-info-stack">
            <div class="info-card">
                <div class="info-card-header">
                    Personal Information
                    <i class="fas fa-pen" data-bs-toggle="modal" data-bs-target="#personalInfoEdit"></i>
                </div>
                <div class="info-card-body">
                    <div class="info-fields-row">
                        <div class="info-field-col">
                            <div class="info-label">First Name</div>
                            <div class="info-value">@Model.FirstName</div>
                        </div>
                        <div class="info-field-col">
                            <div class="info-label">Middle Name</div>
                            <div class="info-value">@Model.MiddleName</div>
                        </div>
                        <div class="info-field-col">
                            <div class="info-label">Last Name</div>
                            <div class="info-value">@Model.LastName</div>
                        </div>
                        <div class="info-field-col">
                            <div class="info-label">Birthdate</div>
                            <div class="info-value">
                                @(Model.Birthdate
                                                                ?.ToString("MM/dd/yyyy")
                                                                ?? "MM/DD/YYYY" )
                            </div>
                        </div>
                        <div class="info-field-col">
                            <div class="info-label">Gender</div>
                            <div class="info-value">@Model.Gender</div>
                        </div>
                        <div class="info-field-col">
                            <div class="info-label">Location</div>
                            <div class="info-value">@Model.Location</div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="info-cards-bottom-row">
                <div class="info-card">
                    <div class="info-card-header">
                        User Information
                        <i class="fas fa-pen" data-bs-toggle="modal" data-bs-target="#userInfoEdit"></i>
                    </div>
                    <div class="info-card-body">
                        <div class="info-fields-stack">
                            <div class="info-field-col">
                                <div class="info-label">Username</div>
                                <div class="info-value">marawr_97</div>
                            </div>
                            <div class="info-field-col">
                                <div class="info-label">Email</div>
                                <div class="info-value">maria.garcia@gmail.com</div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="info-card">
                    <div class="info-card-header">
                        Password
                        <i class="fas fa-pen" data-bs-toggle="modal" data-bs-target="#updatePass"></i>
                    </div>
                    <div class="info-card-body">
                        <div class="info-fields-row">
                            <div class="info-field-col">
                                <div class="info-label">Password</div>
                                <div class="info-value">********</div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Enhanced Reviews Section -->
    <section id="my-reviews" class="profile-reviews-section mt-5">
        <div class="section-header">
            <div class="section-icon">
                <i class="fas fa-comments"></i>
            </div>
            <h2>My Reviews (@Model.Reviews.Count)</h2>
        </div>
        <div class="section-content">
            @if (Model.Reviews == null || !Model.Reviews.Any())
            {
                <div class="no-reviews">
                    <i class="far fa-comment-alt"></i>
                    <p>You haven't written any reviews yet.</p>
                    <small class="text-muted">Start exploring books and share your thoughts!</small>
                </div>
            }
            else
            {
                <div class="reviews-container">
                    @foreach (var review in Model.Reviews)
                    {
                        <div class="modern-review-box" data-review-id="@review.ReviewId">
                            <div class="review-header">
                                <div class="book-info">
                                    <div class="book-title">
                                        <a asp-route="BookDetails" asp-route-bookId="@review.BookId" class="book-link">
                                            Book ID: @review.BookId
                                        </a>
                                    </div>
                                </div>
                                <div class="review-rating">
                                    <div class="stars">
                                        @for (var i = 1; i <= 5; i++)
                                        {
                                            if (i <= review.Rating)
                                            {
                                                <i class="fas fa-star"></i>
                                            }
                                            else if (i - 0.5 <= review.Rating)
                                            {
                                                <i class="fas fa-star-half-alt"></i>
                                            }
                                            else
                                            {
                                                <i class="far fa-star"></i>
                                            }
                                        }
                                    </div>
                                    <span class="rating-value">@review.Rating / 5</span>
                                </div>
                            </div>

                            <div class="review-content">
                                <div class="review-comment">@review.Comment</div>
                            </div>

                            <div class="review-footer">
                                <div class="review-meta">
                                    <div class="review-date">
                                        <i class="fas fa-calendar-alt"></i>
                                        Posted: @review.UploadDate?.ToString("MMMM dd, yyyy")
                                    </div>
                                    @if (review.UpdatedDate.HasValue && review.UpdatedDate != review.UploadDate)
                                    {
                                        <div class="review-updated">
                                            <i class="fas fa-edit"></i>
                                            Updated: @review.UpdatedDate?.ToString("MMMM dd, yyyy")
                                        </div>
                                    }
                                    
                                </div>
                                <div class="review-actions">
                                    <button class="btn btn-edit-review" onclick="editUserReview('@review.ReviewId', '@review.BookId', '@review.Rating', '@Html.Raw(Html.Encode(review.Comment))', '@review.UploadDate?.ToString("yyyy-MM-ddTHH:mm:ss")')">
                                        <i class="fas fa-edit"></i> Edit
                                    </button>
                                    <button class="btn btn-delete-review" onclick="deleteUserReview('@review.ReviewId')">
                                        <i class="fas fa-trash-alt"></i> Delete
                                    </button>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            }
        </div>
    </section>
</div>

<!-- Personal Information Edit Modal -->
<div class="modal fade profile-edit-modal" id="personalInfoEdit" tabindex="-1" aria-labelledby="personalInfoEditLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header border-0">
                <h5 class="modal-title" id="personalInfoEditLabel">Personal Information</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body pt-0">
                <form id="personalInfoForm" asp-action="Edit" asp-controller="PersonProfile" method="post">
                    @Html.AntiForgeryToken()
                    <input asp-for="UserId" type="hidden" />
                    <div class="add-book-form-group add-book-form-grid-span-2 text-center">
                        <div class="d-flex align-items-center justify-content-center gap-3" style="flex-direction: column">
                            <div style="width:100px; height:100px; position:relative;">
                                <img id="profilePicturePreview"
                                     src="@(Model?.ProfilePicture ?? "")"
                                     alt="Profile Preview"
                                     class="rounded-circle object-fit-cover"
                                     style="width:100px; height:100px; background:#f4f4f6; border:1px solid #ddd; display:@(string.IsNullOrEmpty(Model?.ProfilePicture) ? "none" : "block");" />
                                <span id="profilePictureDefaultIcon" style="position:absolute; top:0; left:0; width:100px; height:100px; display:@(string.IsNullOrEmpty(Model?.ProfilePicture) ? "flex" : "none"); align-items:center; justify-content:center; background:#f4f4f6; border-radius:50%;">
                                    <i class="fas fa-user" style="font-size:64px; color:#222;"></i>
                                </span>
                                <input type="file" id="profilePictureFile" accept="image/*" style="display: none;">
                                <button type="button"
                                        class="edit-avatar-btn"
                                        onclick="document.getElementById('profilePictureFile').click();"
                                        aria-label="Edit profile picture">
                                    <i class="fas fa-pen"></i>
                                </button>
                            </div>
                            <input type="hidden" asp-for="ProfilePicture" id="ProfilePictureHidden" name="ProfilePicture" value="@Model?.ProfilePicture">
                            <input type="text" id="profilePictureNameDisplay" style="display:none;" /> <!-- Add this line -->
                            <p id="profilePictureUploadStatus" class="add-book-upload-status mt-2" style="display: flex; flex-direction: row; align-items: center; gap: 4px">
                                <span class="file-size-info" style="font-size:10px">Max file size: 1GB; </span>
                                <span class="supported-formats-info" style="font-size:10px">  Supported formats: JPG, PNG, JPEG</span>
                            </p>
                        </div>

                    </div>
                    <div class="mb-3">
                        <label asp-for="FirstName" class="form-label"></label>
                        <input asp-for="FirstName" class="form-control" />
                        <span asp-validation-for="FirstName" class="text-danger"></span>
                    </div>
                    <div class="mb-3">
                        <label asp-for="MiddleName" class="form-label"></label>
                        <input asp-for="MiddleName" class="form-control" />
                        <span asp-validation-for="MiddleName" class="text-danger"></span>
                    </div>
                    <div class="mb-3">
                        <label asp-for="LastName" class="form-label"></label>
                        <input asp-for="LastName" class="form-control" />
                        <span asp-validation-for="LastName" class="text-danger"></span>
                    </div>
                    <div class="row mb-3">
                        <div class="col">
                            <label for="birthdate" class="form-label">Birthdate</label>
                            <div class="input-group date">
                                <input asp-for="Birthdate" type="text" class="form-control" id="birthdate" placeholder="MM/DD/YYYY">
                                <button type="button" class="input-group-text" id="calendarButton">
                                    <i class="fas fa-calendar"></i>
                                </button>
                            </div>
                            <span asp-validation-for="Birthdate" class="text-danger"></span>
                        </div>
                        <div class="col">
                            <label asp-for="Gender" class="form-label"></label>
                            <select asp-for="Gender" class="form-select">
                                <option value="">Select gender</option>
                                <option value="male" selected="@(Model.Gender == "male")">Male</option>
                                <option value="female" selected="@(Model.Gender == "female")">Female</option>
                            </select>
                            <span asp-validation-for="Gender" class="text-danger"></span>
                        </div>
                    </div>
                    <div class="mb-4">
                        <label asp-for="AboutMe" class="form-label">About Me</label>
                        <textarea asp-for="AboutMe" class="form-control" id="aboutme" rows="4" placeholder="Tell us about yourself"></textarea>
                        <span asp-validation-for="AboutMe" class="text-danger"></span>
                    </div>
                    <div class="text-center">
                        <button type="submit" class="btn btn-primary px-4">SAVE CHANGES</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- User Information Edit Modal -->
<div class="modal fade profile-edit-modal" id="userInfoEdit" tabindex="-1" aria-labelledby="userInfoEditLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header border-0">
                <h5 class="modal-title" id="userInfoEditLabel">User Information</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body pt-0">
                <form id="userInfoForm">
                    <div class="mb-3">
                        <label for="userName" class="form-label">Username</label>
                        <input type="text" class="form-control" id="userName" placeholder="Text">
                    </div>
                    <div class="mb-3">
                        <label for="email" class="form-label">Email</label>
                        <input type="text" class="form-control" id="email" placeholder="Text">
                    </div>
                    <div class="text-center">
                        <button type="submit" class="btn btn-primary px-4">SAVE CHANGES</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- Update Password Modal -->
<div class="modal fade profile-edit-modal" id="updatePass" tabindex="-1" aria-labelledby="updatePassLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header border-0">
                <h5 class="modal-title" id="updatePassLabel">Update Password</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body pt-0">
                <form id="updatePassForm">
                    <div class="mb-3">
                        <label for="currentPass" class="form-label">Current Password</label>
                        <div class="input-group">
                            <input type="password" class="form-control" id="currentPass" placeholder="Text">
                            <button class="btn btn-outline-secondary password-toggle" type="button" data-target="currentPass">
                                <i class="fas fa-eye"></i>
                            </button>
                        </div>
                    </div>
                    <div class="mb-3">
                        <label for="newPass" class="form-label">New Password</label>
                        <div class="input-group">
                            <input type="password" class="form-control" id="newPass" placeholder="Text">
                            <button class="btn btn-outline-secondary password-toggle" type="button" data-target="newPass">
                                <i class="fas fa-eye"></i>
                            </button>
                        </div>
                    </div>
                    <div class="mb-3">
                        <label for="confirmnewPass" class="form-label">Confirm New Password</label>
                        <div class="input-group">
                            <input type="password" class="form-control" id="confirmnewPass" placeholder="Text">
                            <button class="btn btn-outline-secondary password-toggle" type="button" data-target="confirmnewPass">
                                <i class="fas fa-eye"></i>
                            </button>
                        </div>
                    </div>
                    <div class="text-center">
                        <button type="submit" class="btn btn-primary px-4">SAVE CHANGES</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<div class="modal fade success-modal" id="successLanguageModal" tabindex="-1" aria-labelledby="successLanguageModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-body text-center py-4">
                <div class="success-icon mb-3">
                    <i class="fas fa-check"></i>
                </div>
                <h5 class="modal-title mb-2" id="successLanguageModalTitle"></h5>
                <p class="mb-4" id="successLanguageModalMessage"></p>
                <button type="button" class="btn btn-secondary px-4" data-bs-dismiss="modal" id="successLanguageModalOkBtn">OK</button>
            </div>
        </div>
    </div>
</div>

<!-- Edit Review Modal -->
<div class="modal fade review-modal" id="editUserReview" tabindex="-1" aria-labelledby="editUserReviewLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header border-0">
                <button class="btn border-0 back-button" data-bs-dismiss="modal" aria-label="Close">
                    <i class="fas fa-arrow-left"></i>
                </button>
            </div>
            <div class="modal-body pt-0">
                <div class="book-details text-center mb-4">
                    <h2 class="edit-book-title">Edit Your Review</h2>
                    <p class="edit-book-id">Book ID: <span id="editBookId"></span></p>
                </div>

                <form id="editUserReviewForm">
                    @Html.AntiForgeryToken()
                    <input type="hidden" id="edit-user-bookId" name="BookId">
                    <input type="hidden" id="edit-user-userId" name="UserId" value="@User.FindFirstValue(ClaimTypes.NameIdentifier)">
                    <input type="hidden" id="edit-user-reviewId" name="ReviewId">
                    <input type="hidden" id="edit-user-uploadDate" name="UploadDate">

                    <div class="mb-4">
                        <label class="form-label">What do you think of the book?</label>
                        <textarea class="form-control" id="edit-user-comment" name="Comment" rows="5" placeholder="Share your thoughts about this book"></textarea>
                    </div>
                    <div class="mb-4">
                        <label class="form-label">How would you rate the book?</label>
                        <div class="rating">
                            <div class="stars" id="editUserStarsRating">
                                <i class="far fa-star" data-rating="1"></i>
                                <i class="far fa-star" data-rating="2"></i>
                                <i class="far fa-star" data-rating="3"></i>
                                <i class="far fa-star" data-rating="4"></i>
                                <i class="far fa-star" data-rating="5"></i>
                            </div>
                            <input type="hidden" name="Rating" id="edit-user-rating-value">
                        </div>
                    </div>

                    <div class="text-center">
                        <button type="button" id="updateUserReviewBtn" class="btn btn-submit">Update Review</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- Delete Confirmation Modal -->
<div class="modal fade confirmation-modal" id="deleteUserReviewModal" tabindex="-1" aria-labelledby="deleteUserReviewModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header border-0">
                <h5 class="modal-title" id="deleteUserReviewModalLabel">Confirm Delete</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body text-center">
                <h6>Are you sure you want to delete this review?</h6>
                 <p class="text-muted">This action cannot be undone.</p>
            </div>
            <div class="modal-footer border-0 justify-content-center">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" id="confirmDeleteUserReview" class="btn btn-danger-2">Delete Review</button>
            </div>
        </div>
    </div>
</div>


@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/jquery@3.6.0/dist/jquery.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap-datepicker@1.9.0/dist/js/bootstrap-datepicker.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/js/toastr.min.js"></script>
    <script>
        let editUserStars;
        let editUserSelectedRating = 0;

        // Function to highlight stars up to a certain rating
        function highlightStars(rating, starsSelector) {
            starsSelector.each(function() {
                const star = $(this);
                const starRating = parseInt(star.data('rating'));

                if (starRating <= rating) {
                    star.removeClass('far').addClass('fas');
                } else {
                    star.removeClass('fas').addClass('far');
                }
            });
        }

        // Function to reset all stars
        function resetStars(starsSelector, containerSelector) {
            if (starsSelector) {
                starsSelector.removeClass('fas').addClass('far');
                $(containerSelector).removeClass('selection-locked');
            }
        }

        // Function to extract rating value from text
        function extractRatingValue(ratingText) {
            if (!ratingText) return 0;
            const match = ratingText.match(/(\d+(?:\.\d+)?)/);
            const rating = match ? parseFloat(match[1]) : 0;
            return rating;
        }

        // Edit user review function
        function editUserReview(reviewId, bookId, rating, comment, uploadDate) {
            try {
                console.log("Edit review data:", { reviewId, bookId, rating, comment, uploadDate });

                // Populate the edit form
                $('#edit-user-reviewId').val(reviewId);
                $('#edit-user-bookId').val(bookId);
                $('#edit-user-comment').val(comment);
                $('#edit-user-rating-value').val(rating);
                $('#edit-user-uploadDate').val(uploadDate);

                // Set book info in modal
                $('#editBookId').text(bookId);

                // Reset stars and set rating
                resetStars(editUserStars, '#editUserStarsRating');
                editUserSelectedRating = parseFloat(rating);
                highlightStars(Math.floor(editUserSelectedRating), editUserStars);
                $('#editUserStarsRating').addClass('selection-locked');

                // Open the edit modal
                var editModal = new bootstrap.Modal(document.getElementById('editUserReview'));
                editModal.show();
            } catch (error) {
                console.error("Error preparing review edit:", error);
                toastr.error("Error preparing review for editing: " + error.message);
            }
        }

        // Delete user review function
        let reviewToDelete = null;

        function deleteUserReview(reviewId) {
            reviewToDelete = reviewId;
            var deleteModal = new bootstrap.Modal(document.getElementById('deleteUserReviewModal'));
            deleteModal.show();
        }

        $(document).ready(function() {
            // Initialize stars variables
            editUserStars = $('#editUserStarsRating i');

            // Set toastr options
            toastr.options = {
                "closeButton": true,
                "debug": false,
                "newestOnTop": true,
                "progressBar": true,
                "positionClass": "toast-top-right",
                "preventDuplicates": false,
                "showDuration": "300",
                "hideDuration": "1000",
                "timeOut": "5000",
                "extendedTimeOut": "1000",
                "showEasing": "swing",
                "hideEasing": "linear",
                "showMethod": "fadeIn",
                "hideMethod": "fadeOut"
            };

            // Initialize datepicker
            $('#birthdate').datepicker({
                format: 'mm/dd/yyyy',
                autoclose: true,
                todayHighlight: true,
                endDate: new Date(),
                orientation: "bottom auto",
                trigger: 'manual'
            });

            // Show datepicker only when calendar icon is clicked
            $('#calendarButton').click(function(e) {
                e.preventDefault();
                e.stopPropagation();
                $('#birthdate').datepicker('show');
            });

            // Prevent the datepicker from showing when clicking the input
            $('#birthdate').click(function(e) {
                e.preventDefault();
                e.stopPropagation();
            });

            // Modal handling
            $('#personalInfoEdit','#userInfoEdit', '#passwordEdit', '#editUserReview').on('hidden.bs.modal', function () {
                $('body').removeClass('modal-open');
                $('.modal-backdrop').remove();

                // Reset edit review form when closed
                if ($(this).attr('id') === 'editUserReview') {
                    $('#editUserReviewForm')[0].reset();
                    resetStars(editUserStars, '#editUserStarsRating');
                    editUserSelectedRating = 0;
                }
            });

            // Password toggle functionality
            $('.password-toggle').click(function() {
                const targetId = $(this).data('target');
                const input = $(`#${targetId}`);
                const icon = $(this).find('i');

                if (input.attr('type') === 'password') {
                    input.attr('type', 'text');
                    icon.removeClass('fa-eye').addClass('fa-eye-slash');
                } else {
                    input.attr('type', 'password');
                    icon.removeClass('fa-eye-slash').addClass('fa-eye');
                }
            });

            // Handle star hover effect for edit review
            editUserStars.hover(
                function() { // mouseenter
                    if (!$('#editUserStarsRating').hasClass('selection-locked')) {
                        const star = $(this);
                        const hoverRating = parseInt(star.data('rating'));
                        highlightStars(hoverRating, editUserStars);
                    }
                },
                function() { // mouseleave
                    if (!$('#editUserStarsRating').hasClass('selection-locked')) {
                        highlightStars(editUserSelectedRating, editUserStars);
                    }
                }
            );

            // Handle star click for edit review
            editUserStars.click(function() {
                const star = $(this);
                const clickedRating = parseInt(star.data('rating'));

                if (editUserSelectedRating === clickedRating) {
                    editUserSelectedRating = 0;
                    $('#edit-user-rating-value').val(editUserSelectedRating);
                    resetStars(editUserStars, '#editUserStarsRating');
                } else {
                    editUserSelectedRating = clickedRating;
                    $('#edit-user-rating-value').val(editUserSelectedRating);
                    highlightStars(editUserSelectedRating, editUserStars);
                    $('#editUserStarsRating').addClass('selection-locked');
                }
            });

            // Update review button click handler
            $('#updateUserReviewBtn').click(function() {
                const rating = $('#edit-user-rating-value').val();
                const comment = $('#edit-user-comment').val().trim();
                const reviewId = $('#edit-user-reviewId').val();
                const bookId = $('#edit-user-bookId').val();
                const uploadDate = $('#edit-user-uploadDate').val();

                if (!rating || rating == 0) {
                    toastr.warning("Please select a rating for the book.");
                    return;
                }

                if (!comment) {
                    toastr.warning("Please provide a comment about the book.");
                    return;
                }

                const token = $('#editUserReviewForm input[name="__RequestVerificationToken"]').val();

                const formData = {
                    ReviewId: reviewId,
                    BookId: bookId,
                    Rating: rating,
                    Comment: comment,
                    UserId: $('#edit-user-userId').val(),
                    UploadDate: uploadDate,
                    __RequestVerificationToken: token
                };

                $.ajax({
                    url: '@Url.Action("Edit", "Review")',
                    type: 'POST',
                    data: formData,
                    headers: {
                        'RequestVerificationToken': token
                    },
                    success: function(response) {
                        if (response && response.success) {
                            var editReviewModal = bootstrap.Modal.getInstance(document.getElementById('editUserReview'));
                            editReviewModal.hide();

                            toastr.success("Review updated successfully!");

                            setTimeout(function() {
                                location.reload();
                            }, 1500);
                        } else {
                            toastr.error("Error: " + ((response && response.errors) ? response.errors.join(", ") : "Unknown error"));
                        }
                    },
                    error: function(xhr, status, error) {
                        console.error("Error details:", xhr.responseText);
                        toastr.error("Error updating review: " + error);
                    }
                });
            });

            // Confirm delete review
            $('#confirmDeleteUserReview').click(function() {
                if (reviewToDelete) {
                    const token = $('input[name="__RequestVerificationToken"]').first().val();

                    $.ajax({
                        url: '@Url.Action("Delete", "Review")',
                        type: 'POST',
                        data: {
                            id: reviewToDelete,
                            __RequestVerificationToken: token
                        },
                        success: function(response) {
                            var deleteModal = bootstrap.Modal.getInstance(document.getElementById('deleteUserReviewModal'));
                            deleteModal.hide();

                            toastr.success("Review deleted successfully!");

                            // Remove the review from the page
                            $(`[data-review-id="${reviewToDelete}"]`).fadeOut(500, function() {
                                $(this).remove();

                                // Update review count
                                const remainingReviews = $('.modern-review-box').length;
                                $('.section-header h2').text(`My Reviews (${remainingReviews})`);

                                // Show no reviews message if none left
                                if (remainingReviews === 0) {
                                    $('.reviews-container').html(`
                                        <div class="no-reviews">
                                            <i class="far fa-comment-alt"></i>
                                            <p>You haven't written any reviews yet.</p>
                                            <small class="text-muted">Start exploring books and share your thoughts!</small>
                                        </div>
                                    `);
                                }
                            });

                            reviewToDelete = null;
                        },
                        error: function(xhr, status, error) {
                            console.error("Error details:", xhr.responseText);
                            toastr.error("Error deleting review: " + error);
                        }
                    });
                }
            });

            // Profile picture change handling
            document.getElementById('profilePictureFile').addEventListener('change', function () {
                const file = this.files[0];
                const preview = document.getElementById('profilePicturePreview');
                const defaultIcon = document.getElementById('profilePictureDefaultIcon');
                if (file) {
                    const reader = new FileReader();
                    reader.onload = function (e) {
                        preview.src = e.target.result;
                        preview.style.display = 'block';
                        defaultIcon.style.display = 'none';
                    };
                    reader.readAsDataURL(file);
                } else {
                    preview.src = '';
                    preview.style.display = 'none';
                    defaultIcon.style.display = 'flex';
                }
            });
        });
    </script>

    <script type="module">
        document.getElementById('profilePictureFile').addEventListener('change', function () {
            const fileName = this.files[0] ? this.files[0].name : '';
            document.getElementById('profilePictureNameDisplay').value = fileName;
            const profilePictureUploadStatus = document.getElementById('profilePictureUploadStatus');
            profilePictureUploadStatus.querySelector('.file-size-info').textContent = 'Max file size: 1GB';
            profilePictureUploadStatus.querySelector('.supported-formats-info').textContent = 'Supported formats: JPG, PNG, JPEG';
            profilePictureUploadStatus.classList.remove('error-message');
        });

        const firebaseConfig = {
            apiKey: "AIzaSyA4CTMSbgGQN_yLn9lEZlswbZ_2A2Xhl0k",
            authDomain: "basabuzz-ca8fe.firebaseapp.com",
            projectId: "basabuzz-ca8fe",
            storageBucket: "basabuzz-ca8fe.firebasestorage.app",
            messagingSenderId: "206533484485",
            appId: "1:206533484485:web:2c71a06a17d5244efe75ac"
        };

        import { initializeApp } from "https://www.gstatic.com/firebasejs/11.9.1/firebase-app.js";
        import { getStorage, ref, uploadBytesResumable, getDownloadURL, deleteObject } from "https://www.gstatic.com/firebasejs/11.9.1/firebase-storage.js";

        const app = initializeApp(firebaseConfig);
        const storage = getStorage(app);

        async function deleteFileFromFirebase(fileUrl) {
            if (!fileUrl) {
                console.warn("Attempted to delete null or empty file URL.");
                return;
            }
            try {
                const fileRef = ref(storage, fileUrl);
                await deleteObject(fileRef);
                console.log(`Successfully deleted file: ${fileUrl}`);
            } catch (error) {
                alert(`Failed to delete file ${fileUrl}: ${error.message}`);
                console.error(`Failed to delete file ${fileUrl}:`, error);
            }
        }

        async function uploadFileToFirebase(file, path, statusElement) {
            if (!file) {
                statusElement.textContent = 'No file selected.';
                return null;
            }

            statusElement.innerHTML = `
                <span class="spinner-border spinner-border-sm text-primary" role="status" aria-hidden="true" style="width: 20px; height: 10px"></span>
                <span class="ms-1" style="font-size: 12px">Uploading…</span>
            `;

            const timestamp = new Date().getTime();
            const randomString = Math.random().toString(36).substring(2, 8);
            const uniqueFileName = `${path}${timestamp}-${randomString}-${file.name}`;

            const storageRef = ref(storage, uniqueFileName);
            const uploadTask = uploadBytesResumable(storageRef, file);

            return new Promise((resolve, reject) => {
                uploadTask.on('state_changed',
                    (snapshot) => {
                        const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;
                        statusElement.innerHTML = `
                            <span class="spinner-border spinner-border-sm text-primary" role="status" aria-hidden="true"></span>
                            <span class="ms-1" style="font-size: 12px">Uploading… ${progress.toFixed(0)}%</span>
                        `;
                    },
                    (error) => {
                        statusElement.innerHTML = `<span class="text-danger">Upload failed: ${error.message}</span>`;
                        reject(error);
                    },
                    async () => {
                        try {
                            const downloadURL = await getDownloadURL(uploadTask.snapshot.ref);
                            statusElement.innerHTML = `
                                <span class="fa-stack" style="vertical-align: middle; font-size:12px">
                                    <i class="fas fa-circle fa-stack-2x text-success" style="height: 10px; weight: 10px"></i>
                                    <i class="fas fa-check fa-stack-1x fa-inverse" style="height: 10px; weight: 10px"></i>
                                </span>
                                <span class="ms-2 text-success" style="font-size:12px">Upload successful!</span>
                            `;
                            resolve(downloadURL);
                        } catch (error) {
                            statusElement.innerHTML = `<span class="text-danger">Failed to get download URL: ${error.message}</span>`;
                            reject(error);
                        }
                    }
                );
            });
        }

        const picker = document.getElementById('profilePictureFile');
        const displayName = document.getElementById('profilePictureNameDisplay');
        const statusEl = document.getElementById('profilePictureUploadStatus');
        const hiddenInput = document.getElementById('ProfilePictureHidden');

        picker.addEventListener('change', async () => {
            const file = picker.files[0];
            if (!file) return;

            displayName.value = file.name;
            try {
                const downloadURL = await uploadFileToFirebase(file, 'profile-images/', statusEl);
                console.log('Download URL:', downloadURL);
                hiddenInput.value = downloadURL;
            } catch {
                // Error already handled in uploadFileToFirebase
            }
        });
    </script>

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            function getQueryParam(name) {
                const url = new URL(window.location.href);
                return url.searchParams.get(name);
            }
            var type = getQueryParam('success');
            if (type) {
                var title = "";
                var message = "";
                if (type === "personal") {
                    title = "Success!";
                    message = "Personal Information saved successfully!";
                } else if (type === "user") {
                    title = "Success!";
                    message = "User Information saved successfully!";
                } else if (type === "password") {
                    title = "Updated";
                    message = "Password updated successfully!";
                }
                document.getElementById('successLanguageModalTitle').textContent = title;
                document.getElementById('successLanguageModalMessage').textContent = message;
                var modal = new bootstrap.Modal(document.getElementById('successLanguageModal'));
                modal.show();

                if (window.history.replaceState) {
                    const url = new URL(window.location);
                    url.searchParams.delete('success');
                    window.history.replaceState({}, document.title, url.pathname + url.search);
                }
            }
        });
    </script>
}