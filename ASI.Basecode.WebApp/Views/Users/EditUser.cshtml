@using ASI.Basecode.Services.ServiceModels
@model UserViewModel
@using ASI.Basecode.WebApp.Models
@{
    Layout = "_AdminSidebarLayout";
    var errorMessage = TempData["ErrorMessage"] as string;
    var isUsernameError = errorMessage != null && errorMessage.ToLower().Contains("username");

    var successModal = new SuccessModalModel
    {
        Id = "successModal",
        Title = "Success!",
        Message = "User information saved successfully!",
        OkButtonText = "OK"
    };

    var saveConfirmationModal = new ConfirmationModalModel
    {
        Id = "saveModal",
        Title = "Save Changes",
        Message = "Are you sure you want to save your changes?",
        CancelButtonText = "Discard",
        ConfirmButtonText = "Save",
        ConfirmButtonId = "saveConfirmBtn",
        ConfirmButtonClass = "btn-danger-2"
    };

    var cancelConfirmationModal = new ConfirmationModalModel
    {
        Id = "editUserConfirmationModal",
        Title = "Discard Changes?",
        Message = "You have unsaved changes! Are you sure you want to discard them?",
        CancelButtonText = "Keep Editing",
        ConfirmButtonText = "Discard",
        ConfirmButtonId = "confirmCancelBtn",
        ConfirmButtonClass = "btn-discard"
    };
}

@section styles {
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/css/toastr.min.css">
    <link rel="stylesheet" href="~/css/admin/common.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/admin/users/edituser.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/modal.css" asp-append-version="true" />
}

<div class="admin-common-container">
    <div class="admin-common-content-wrapper">
        <div class="header-section">
            <h1>Edit User Details</h1>
            <p>Edit details of the new user here.</p>
        </div>

        <form id="editUserForm" class="edit-user-form" asp-action="EditUser" asp-controller="User" method="post">
            <input type="hidden" name="id" value="@ViewContext.RouteData.Values["id"]" />
            <input type="hidden" asp-for="IsUpdate" value="true" />
            <input type="hidden" id="originalUsername" value="@Model.UserName" />
            <div class="form-row" style="margin-bottom: 30px">
                <div class="form-group">
                    <label for="userId">Email</label>
                    <input type="email" id="userId" class="form-control" disabled readonly
                           asp-for="Email" placeholder="sample@gmail.com" />
                    <input type="hidden" asp-for="Email" />
                    <span asp-validation-for="Email" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <label for="name">Username</label>
                    <input type="text" id="name" class="form-control tracked-field"
                           asp-for="UserName" placeholder="Username"
                           data-bs-toggle="tooltip" data-bs-placement="top"
                           data-bs-custom-class="custom-tooltip" />
                    <span asp-validation-for="UserName" class="text-danger"></span>
                </div>
            </div>
            <div class="form-row">
                <div class="form-check form-switch custom-switch-lg">
                    <input class="form-check-input" type="checkbox" role="switch" id="switchToggle">
                    <label class="form-check-label custom-switch-label" for="switchToggle">Update Password</label>
                </div>
            </div>

            <div class="form-row">
                <div class="form-group">
                    <label for="password">Password</label>
                    <input type="password" id="password" class="form-control tracked-field"
                           asp-for="Password" placeholder="••••••••" />
                    <span asp-validation-for="Password" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <label for="confirmpassword">Confirm password</label>
                    <input type="password" id="confirmpassword" class="form-control tracked-field"
                           asp-for="ConfirmPassword" placeholder="••••••••" />
                    <span asp-validation-for="ConfirmPassword" class="text-danger"></span>
                </div>
            </div>
            @Html.AntiForgeryToken()

            <div class="button-container">
                <div class="button-group">
                    <button type="button" class="cancel-btn" id="cancelButton">CANCEL</button>
                    <button type="button" class="submit-btn">SAVE CHANGES</button>
                </div>
            </div>
        </form>
    </div>
</div>

<!-- Save confirmation modal -->
<partial name="_ConfirmationModal" model="saveConfirmationModal" />

<!-- Cancel confirmation modal -->
<partial name="_ConfirmationModal" model="cancelConfirmationModal" />

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/js/toastr.min.js"></script>
    <script src="~/js/modal-helper.js" asp-append-version="true"></script>

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // Store original values
            var originalUsername = document.getElementById('originalUsername').value;
            var hasPasswordChanges = false;
            var hasFormChanges = false;

            // Get the submit button
            var submitBtn = document.querySelector('.submit-btn');

            // Initially disable the Save Changes button
            submitBtn.disabled = true;
            submitBtn.classList.add('disabled-btn');

            // Track changes in the username field
            document.getElementById('name').addEventListener('input', function() {
                checkForChanges();
            });

            // Track password toggle and changes
            document.getElementById('switchToggle').addEventListener('change', function() {
                togglePasswordFields();
                checkForChanges();
            });

            document.getElementById('password').addEventListener('input', function() {
                checkForChanges();
            });

            document.getElementById('confirmpassword').addEventListener('input', function() {
                checkForChanges();
            });

            // Function to check if any changes were made
            function checkForChanges() {
                var currentUsername = document.getElementById('name').value;
                var passwordToggle = document.getElementById('switchToggle').checked;
                var passwordValue = document.getElementById('password').value;
                var confirmPasswordValue = document.getElementById('confirmpassword').value;

                // Check if username changed
                var usernameChanged = currentUsername !== originalUsername;

                // Check if passwords changed
                hasPasswordChanges = passwordToggle && (passwordValue !== '' || confirmPasswordValue !== '');

                // Update overall change status
                hasFormChanges = usernameChanged || hasPasswordChanges;

                // Enable/disable the Save Changes button based on changes
                if (hasFormChanges) {
                    submitBtn.disabled = false;
                    submitBtn.classList.remove('disabled-btn');
                } else {
                    submitBtn.disabled = true;
                    submitBtn.classList.add('disabled-btn');
                }
            }

            // Run check initially
            checkForChanges();

            // Initial state
            togglePasswordFields();

            // Setup save confirmation modal
            document.querySelector('.submit-btn').addEventListener('click', function(e) {
                e.preventDefault();

                // Only proceed if there are actual changes
                if (hasFormChanges) {
                    var saveModal = new bootstrap.Modal(document.getElementById('saveModal'));
                    saveModal.show();
                }
            });

            // Handle save confirmation
            document.getElementById('saveConfirmBtn').addEventListener('click', function() {
                document.getElementById('editUserForm').submit();
                bootstrap.Modal.getInstance(document.getElementById('saveModal')).hide();
                // Remove modal backdrop manually to prevent overlay issues
                removeModalBackdrops();
            });

            // Handle cancel button click
            document.getElementById('cancelButton').addEventListener('click', function() {
                // Only show confirmation if there are changes, otherwise redirect immediately
                if (hasFormChanges) {
                    var cancelModal = new bootstrap.Modal(document.getElementById('editUserConfirmationModal'));
                    cancelModal.show();
                } else {
                    // No changes, redirect immediately
                    window.location.href = '/User/Index';
                }
            });

            // Handle cancel confirmation
            document.getElementById('confirmCancelBtn').addEventListener('click', function() {
                window.location.href = '/User/Index';
                bootstrap.Modal.getInstance(document.getElementById('editUserConfirmationModal')).hide();
                // Remove modal backdrop manually to prevent overlay issues
                removeModalBackdrops();
            });

            // Function to clean up modal backdrops
            function removeModalBackdrops() {
                var modals = document.querySelectorAll('.modal-backdrop');
                modals.forEach(function(modal) {
                    modal.remove();
                });
                document.body.classList.remove('modal-open');
                document.body.style.overflow = '';
                document.body.style.paddingRight = '';
            }

            // Handle modal close events
            document.getElementById('saveModal').addEventListener('hidden.bs.modal', function() {
                removeModalBackdrops();
            });

            document.getElementById('editUserConfirmationModal').addEventListener('hidden.bs.modal', function() {
                removeModalBackdrops();
            });

            toastr.options = {
                "closeButton": true,
                "progressBar": true,
                "positionClass": "toast-top-right",
                "timeOut": "3000"
            };

            // Show toastr for success messages
            @if (TempData["SuccessMessage"] != null)
            {
                        var msg = TempData["SuccessMessage"] as string;
                        if (!string.IsNullOrEmpty(msg))
                        {
                                    <text>toastr.success("@msg");</text>
                        }
            }
            @if (ViewData["SaveSuccess"] != null && (bool)ViewData["SaveSuccess"])
            {
                        <text>toastr.success("User info updated successfully!");</text>
            }
        });
    </script>
    <script>
        // On page load and when the switch changes, toggle password fields
        function togglePasswordFields() {
            var isChecked = document.getElementById('switchToggle').checked;
            var passwordInput = document.getElementById('password');
            var confirmPasswordInput = document.getElementById('confirmpassword');

            passwordInput.disabled = !isChecked;
            confirmPasswordInput.disabled = !isChecked;

            if (!isChecked) {
                passwordInput.value = '';
                confirmPasswordInput.value = '';
            }
        }
    </script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // Initialize all tooltips
            var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
            tooltipTriggerList.forEach(function (tooltipTriggerEl) {
                new bootstrap.Tooltip(tooltipTriggerEl);
            });

            // Show tooltip if username error exists
            var errorMessage = '@(errorMessage ?? "")';
            var isUsernameError = @isUsernameError.ToString().ToLower();

            if (isUsernameError) {
                var usernameInput = document.getElementById('name');
                usernameInput.setAttribute('data-bs-title', errorMessage);
                var tooltip = bootstrap.Tooltip.getOrCreateInstance(usernameInput);
                tooltip.show();
                usernameInput.classList.add('is-invalid');
            }
        });
    </script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            var errorMessage = '@(errorMessage ?? "")';
            var isUsernameError = @isUsernameError.ToString().ToLower();
            if (errorMessage && isUsernameError) {
                toastr.warning(errorMessage);
            }
        });
    </script>
}