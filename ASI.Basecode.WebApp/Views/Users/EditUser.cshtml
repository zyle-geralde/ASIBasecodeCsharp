@using ASI.Basecode.Services.ServiceModels
@model UserViewModel
@{
    Layout = "_AdminSidebarLayout";
    var errorMessage = TempData["ErrorMessage"] as string;
    var isUsernameError = errorMessage != null && errorMessage.ToLower().Contains("username");
}

@section styles {
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <link rel="stylesheet" href="~/css/admin/common.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/admin/users/edituser.css" asp-append-version="true" />
}

<div class="admin-common-container">
    <div class="admin-common-content-wrapper">
        <div class="header-section">
            <h1>Edit User Details</h1>
            <p>Edit details of the new user here.</p>
        </div>

        <form class="edit-user-form needs-validation" asp-action="EditUser" asp-controller="User" method="post" novalidate>
            <input type="hidden" name="id" value="@ViewContext.RouteData.Values["id"]" />
            <input type="hidden" asp-for="IsUpdate" value="true" />
            <div class="form-row" style="margin-bottom: 30px">
                <div class="form-group position-relative">
                    <label for="userId">Email</label>
                    <input type="text" id="userId" class="form-control" disabled readonly
                           asp-for="Email" placeholder="sample@gmail.com" />
                    <input type="hidden" asp-for="Email" />
                    <div class="invalid-tooltip">
                        Please provide a valid email.
                    </div>
                </div>
                <div class="form-group position-relative">
                    <label for="name">Username</label>
                    <input type="text" id="name" class="form-control @(isUsernameError ? "is-invalid" : "")"
                           asp-for="UserName" placeholder="Username" required />
                    <div class="invalid-tooltip">
                        @(isUsernameError? errorMessage : "Please provide a username.")
                    </div>
                </div>
            </div>
            <div class="form-row">
                <div class="form-check form-switch custom-switch-lg">
                    <input class="form-check-input" type="checkbox" role="switch" id="switchToggle">
                    <label class="form-check-label custom-switch-label" for="switchToggle">Update Password</label>
                </div>
            </div>

            <div class="form-row">
                <div class="form-group position-relative">
                    <label for="password">Password</label>
                    <input type="password" id="password" class="form-control"
                           asp-for="Password" placeholder="••••••••" />
                    <div class="invalid-tooltip">
                        Please provide a valid password.
                    </div>
                </div>
                <div class="form-group position-relative">
                    <label for="confirmpassword">Confirm password</label>
                    <input type="password" id="confirmpassword" class="form-control"
                           asp-for="ConfirmPassword" placeholder="••••••••" required />
                    <div class="invalid-tooltip id=confirmPwdTooltip" style="display: none">
                        Passwords must match!
                    </div>
                </div>
            </div>
            @Html.AntiForgeryToken()

            <div class="button-container">
                <div class="button-group">
                    <button type="button" class="cancel-btn" onclick="window.location.href='/User/Index'">CANCEL</button>
                    <button type="button" class="submit-btn" id="validateAndShowModal">
                        SAVE CHANGES
                    </button>
                </div>
            </div>
        </form>
    </div>
</div>

<div class="modal fade confirmation-modal" id="saveModal" tabindex="-1" aria-labelledby="saveModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header border-0">
                <h5 class="modal-title" id="saveModalLabel">Save Changes</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body text-center">
                <p class="mb-4">Are you sure you want to save your changes?</p>
                <div class="d-flex justify-content-center gap-2">
                    <button type="button" class="btn btn-secondary px-4" data-bs-dismiss="modal">Discard</button>
                    <button type="button" class="btn btn-danger-2 px-4" id="saveConfirmBtn">Save</button>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="modal fade success-modal" id="successModal" tabindex="-1" aria-labelledby="successModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-body text-center py-4">
                <div class="success-icon mb-3">
                    <i class="fas fa-check"></i>
                </div>
                <h5 class="modal-title mb-2">Success!</h5>
                <p class="mb-4">User information saved successfully!</p>
                <button type="button" class="btn btn-secondary px-4" data-bs-dismiss="modal" id="successModalOkBtn">OK</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>

    <script>
        // Real-time username validation with debounce
        let usernameCheckTimeout = null;
                function checkUsernameAvailability(username) {
            const usernameField = document.getElementById('name');
            const tooltip = usernameField.nextElementSibling;
            const currentUserId = document.querySelector('input[name="id"]').value;

            if (usernameCheckTimeout) {
                clearTimeout(usernameCheckTimeout);
            }

            if (!username.trim()) {
                usernameField.classList.remove('is-invalid', 'is-valid');
                if (tooltip) tooltip.style.display = 'none';
                return;
            }

            usernameCheckTimeout = setTimeout(() => {
                fetch(`/User/CheckUsernameAvailability?username=${encodeURIComponent(username)}&currentUserId=${currentUserId}`)
                    .then(response => response.json())
                    .then(data => {
                        if (!data.isAvailable) {
                            // Username not available, show error and keep it until user changes input
                            usernameField.classList.add('is-invalid');
                            usernameField.classList.remove('is-valid');
                            if (tooltip) {
                                tooltip.textContent = data.message;
                                tooltip.style.display = 'block';
                            }
                        } else {
                            // Username is available, show success
                            usernameField.classList.remove('is-invalid');
                            usernameField.classList.add('is-valid');
                            if (tooltip) tooltip.style.display = 'none';
                        }
                    })
                    .catch(error => {
                        console.error('Error checking username:', error);
                    });
            }, 500);
        }

        document.addEventListener('DOMContentLoaded', function() {
            // Get form reference
            const form = document.querySelector('.edit-user-form');

            // Password field toggling
            function togglePasswordFields() {
                const isChecked = document.getElementById('switchToggle').checked;
                const passwordInput = document.getElementById('password');
                const confirmPasswordInput = document.getElementById('confirmpassword');

                passwordInput.disabled = !isChecked;
                confirmPasswordInput.disabled = !isChecked;

                if (!isChecked) {
                    passwordInput.value = '';
                    confirmPasswordInput.value = '';
                    passwordInput.classList.remove('is-invalid');
                    confirmPasswordInput.classList.remove('is-invalid');

                    const passwordTooltip = passwordInput.nextElementSibling;
                    const confirmTooltip = confirmPasswordInput.nextElementSibling;
                    if (passwordTooltip) passwordTooltip.style.display = 'none';
                    if (confirmTooltip) confirmTooltip.style.display = 'none';
                }
            }

            // Initialize password fields
            togglePasswordFields();

            // Listen for switch changes
            document.getElementById('switchToggle').addEventListener('change', togglePasswordFields);

            // Add username check on input
            const usernameField = document.getElementById('name');
            if (usernameField) {
                usernameField.addEventListener('input', function() {
                    checkUsernameAvailability(this.value);
                });

                // Also check initial value for server-side errors
                const initialUsername = usernameField.value;
                if (initialUsername.trim()) {
                    checkUsernameAvailability(initialUsername);
                }
            }

                    // Password match tooltip logic
        const passwordInput = document.getElementById('password');
        const confirmPasswordInput = document.getElementById('confirmpassword');
        const confirmPwdTooltip = document.getElementById('confirmPwdTooltip');
        function validatePasswordMatch() {
            if (
                passwordInput.value &&
                confirmPasswordInput.value &&
                passwordInput.value !== confirmPasswordInput.value
            ) {
                confirmPasswordInput.classList.add('is-invalid');
                confirmPwdTooltip.style.display = 'block';
            } else {
                confirmPasswordInput.classList.remove('is-invalid');
                confirmPwdTooltip.style.display = 'none';
            }
        }

        // Show tooltip when user stops typing (debounced)
        let confirmPwdTimeout = null;
        confirmPasswordInput.addEventListener('input', function() {
            if (confirmPwdTimeout) clearTimeout(confirmPwdTimeout);
            confirmPwdTimeout = setTimeout(validatePasswordMatch, 400); // 400ms after typing stops
        });

        // Also validate on password input change
        passwordInput.addEventListener('input', function() {
            if (confirmPwdTimeout) clearTimeout(confirmPwdTimeout);
            confirmPwdTimeout = setTimeout(validatePasswordMatch, 400);
        });

            // IMPORTANT: Custom validation before showing modal
            document.getElementById('validateAndShowModal').addEventListener('click', function(event) {
                event.preventDefault();

                // First, manually call the validation API
                const isFormValid = form.checkValidity();

                // Add visual feedback regardless of validity
                form.classList.add('was-validated');

                // Additional custom validation for password match
                let passwordsMatch = true;
                const switchToggle = document.getElementById('switchToggle');
                    if (switchToggle.checked) {
                    const password = document.getElementById('password');
                    const confirmPassword = document.getElementById('confirmpassword');

                    if (password.value && confirmPassword.value && password.value !== confirmPassword.value) {
                        passwordsMatch = false;
                        confirmPassword.setCustomValidity("Passwords do not match");
                        confirmPassword.classList.add('is-invalid');
                        // Show tooltip
                        var tooltip = bootstrap.Tooltip.getOrCreateInstance(confirmPassword);
                        tooltip.show();
                    } else {
                        confirmPassword.setCustomValidity("");
                        // Hide tooltip
                        var tooltip = bootstrap.Tooltip.getOrCreateInstance(confirmPassword);
                        tooltip.hide();
                    }
                }

                // Check for duplicated username (the field will be marked invalid by our AJAX check)
                const hasUsernameError = usernameField.classList.contains('is-invalid');

                // Only show modal if all validations pass
                if (isFormValid && passwordsMatch && !hasUsernameError) {
                    // Show confirmation modal
                    const modal = new bootstrap.Modal(document.getElementById('saveModal'));
                    modal.show();
                } else {
                    // Focus the first invalid field
                    const firstInvalid = form.querySelector('.is-invalid');
                    if (firstInvalid) {
                        firstInvalid.focus();
                    }
                }
            });

            // Save button in confirmation modal
            document.getElementById('saveConfirmBtn').addEventListener('click', function() {
                form.submit();
            });

            // Implement the auto-hide tooltip functionality
            document.querySelectorAll('input[required], input.form-control').forEach(input => {
                input.addEventListener('input', function() {
                    if (this.value.trim() !== '') {
                        // If field is no longer empty, remove error after delay
                        if (this.classList.contains('is-invalid') && this.id !== 'name') {
                            // Skip username field as it has its own validation
                            // Clear any existing timeout
                            if (this.dataset.timeout) {
                                clearTimeout(parseInt(this.dataset.timeout));
                            }

                            // Set new timeout
                            const timeout = setTimeout(() => {
                                this.classList.remove('is-invalid');
                                this.setCustomValidity(''); // Clear custom validation message
                            }, 4000);

                            this.dataset.timeout = timeout;
                        }
                    }
                });
            });

            // Handle server-side errors
            var errorMessage = '@(errorMessage ?? "")';
            var isUsernameError = @isUsernameError.ToString().ToLower();

            if (isUsernameError && errorMessage) {
                var toastBody = document.getElementById('customToastBody');
                toastBody.textContent = errorMessage;
                var toast = new bootstrap.Toast(document.getElementById('customToast'));
                toast.show();
            }

            // Show success modal if needed
            @if (ViewData["SaveSuccess"] != null && (bool)ViewData["SaveSuccess"])
            {
                    <text>
                    setTimeout(function() {
                        var successModal = new bootstrap.Modal(document.getElementById('successModal'));
                        successModal.show();
                        document.getElementById('successModalOkBtn').addEventListener('click', function() {
                            window.location.href = '/User/Index';
                        });
                    }, 300);
                    </text>
            }
        });
    </script>
}