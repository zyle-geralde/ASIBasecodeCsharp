@using ASI.Basecode.Data.Interfaces;
@model PaginatedList<ASI.Basecode.Data.Models.User>
@using Microsoft.AspNetCore.Routing;

@{
    ViewData["Title"] = "Users";
    Layout = "_AdminSidebarLayout";

    var currentSearch = (string?)ViewData["CurrentSearch"];
    var currentSort = (string?)ViewData["CurrentSort"];
    var currentSortDescending = (bool)(ViewData["CurrentSortDescending"] ?? false);
    var currentRoleFilter = (string?)ViewData["CurrentRoleFilter"];

    var routeValues = new Dictionary<string, string> {
        ["searchTerm"]     = currentSearch,
        ["role"]           = currentRoleFilter,
        ["sortOrder"]      = currentSort,
        ["sortDescending"] = currentSortDescending.ToString().ToLowerInvariant()
    };

    ViewData["CurrentPage"] = Model.PageIndex;
    ViewData["TotalPages"] = Model.TotalPages;

    var deleteConfirmationModal = new ConfirmationModalModel
    {
        Id = "deleteModal",
        Title = "Delete Confirmation",
        Message = "Are you sure you want to delete this user?",
        CancelButtonText = "Cancel",
        ConfirmButtonText = "Delete",
        ConfirmButtonId = "deleteConfirmBtn",
        ConfirmButtonClass = "btn-danger"
    };

    var successModal = new SuccessModalModel
    {
        Id = "successModal",
        Title = "Deleted!",
        Message = "User deleted successfully!",
        OkButtonText = "OK"
    };
    
    // Clear any success flags to prevent modals from showing on page load
    ViewData["SaveSuccess"] = null;
}

@section styles {
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/css/toastr.min.css">
    <link rel="stylesheet" href="~/css/admin/common.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/admin/users/userlist.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/modal.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/pagination.css" asp-append-version="true" />
}

<div class="users-container">
    <div class="d-flex justify-content-between align-items-center mb-2">
        <div class="header-section">
            <h1>Users</h1>
            <p>View and manage users</p>
        </div>

        <a href="/User/AddUser" class="btn btn-secondary">
            <i class="fas fa-plus me-2" style="color: #fff"></i> ADD USERS
        </a>
    </div>

    <div class="card">
        <div class="card-body">  
            <div class="search-filter-container" style="height: 50px; align-items: stretch; margin-top: 10px; margin-bottom: 15px">
                <form asp-action="Index" asp-controller="User" method="get" class="d-flex align-items-center mb-3">
                    <div class="search-container" style="margin-right: 10px">
                        <i class="fas fa-search"></i>
                        <input type="text"
                               name="searchTerm"
                               value="@currentSearch"
                               class="book-master-form-input align-self-center" style="font-weight: 300; margin-right: 10px"
                               placeholder="Search users…" />
                    </div>
                    <div class="action-buttons">



                        <button type="button" id="sortButton" class="btn btn-outline-secondary sort-btn"><i class="fas fa-sort"></i> Sort & Filter</button>
                                                <a asp-action="Index" class="btn btn-outline-secondary">
                    Clear All</a>
                    </div>

                    <input type="hidden" id="roleField" name="role" value="@currentRoleFilter" />
                    <input type="hidden" id="sortOrderField" name="sortOrder" value="@currentSort" />
                    <input type="hidden" id="sortDescendingField" name="sortDescending" value="@(currentSortDescending.ToString().ToLowerInvariant())" />
                </form>
            </div>
                            <p style="font-size: 12px; color:"gray">Showing  @Model.StartIndex - @Model.EndIndex out of @Model.TotalCount users</p>

            @* } *@

            <div class="sort-popup card shadow" id="sortPopup" style="display: none;">
                <div class="card-header bg-secondary text-white justify-center">
                    <h6 class="mb-0" style="margin-top: 6px;">Sort By:</h6>
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <label class="form-label fw-bold">Role:</label>
                        <div class="ms-2">
                            <div class="form-check">
                                <input class="form-check-input" type="radio" name="popupRole" id="roleAll" value="" @(string.IsNullOrEmpty(currentRoleFilter) ? "checked" : "")>
                                <label class="form-check-label" for="roleAll">All Roles</label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input" type="radio" name="popupRole" id="roleAdmin" value="Admin" @(currentRoleFilter == "Admin" ? "checked" : "")>
                                <label class="form-check-label" for="roleAdmin">Admin</label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input" type="radio" name="popupRole" id="roleUser" value="User" @(currentRoleFilter == "User" ? "checked" : "")>
                                <label class="form-check-label" for="roleUser">User</label>
                            </div>
                        </div>
                    </div>

                    <div class="mb-3">
                        <label class="form-label fw-bold">Sort By:</label>
                        <div class="ms-2">
                            <div class="form-check">
                                <input class="form-check-input" type="radio" name="popupSortOrder" id="sortId" value="id" @(currentSort == "id" ? "checked" : "")>
                                <label class="form-check-label" for="sortId">ID</label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input" type="radio" name="popupSortOrder" id="sortEmail" value="email" @(currentSort == "email" ? "checked" : "")>
                                <label class="form-check-label" for="sortEmail">Email</label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input" type="radio" name="popupSortOrder" id="sortCreatedDate" value="createddate" @(currentSort == "createddate" ? "checked" : "")>
                                <label class="form-check-label" for="sortCreatedDate">Created Date</label>
                            </div>
                                                        <div class="form-check">
                                <input class="form-check-input" type="radio" name="popupSortOrder" id="sortUpdatedDate" value="updateddate" @(currentSort == "updateddate" ? "checked" : "")>
                                <label class="form-check-label" for="sortUpdatedDate">Updated Date</label>
                            </div>
                        </div>
                    </div>

                    <div class="mb-3">
                        <label class="form-label fw-bold">Direction:</label>
                        <div class="ms-2">
                            <div class="form-check">
                                <input class="form-check-input" type="radio" name="popupSortDirection" id="sortAsc" value="false" @(!currentSortDescending ? "checked" : "")>
                                <label class="form-check-label" for="sortAsc">Ascending <i class="fas fa-arrow-up"></i></label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input" type="radio" name="popupSortDirection" id="sortDesc" value="true" @(currentSortDescending ? "checked" : "")>
                                <label class="form-check-label" for="sortDesc">Descending <i class="fas fa-arrow-down"></i></label>
                            </div>
                        </div>
                    </div>

                    <div class="d-flex justify-content-end">                       
                        <button type="button" class="btn btn-outline-secondary" style="margin-right: 10px" id="closeSortButton">Cancel</button>
                        <button type="button" class="btn btn-secondary me-2" id="applySortButton">Apply</button>
                    </div>
                </div>
            </div>

            <div class="table-container">
                          @if (Model != null && Model.Any())
                {
                <div class="scrollable-table-container">
                    <table class="table table-hover user-table">
							<colgroup>
								<col style="width: 20%;">
								<col style="width: 35%;">
								<col style="width: 25%;">
								<col style="width: 10%;">

								<col style="width: 30%;">
							</colgroup>
                        <thead>
                            <tr>
                                <th asp-action="Index" asp-route-searchTerm=@ViewData["CurrentSearch"]>Username</th>
                                <th asp-action="Index" asp-route-searchTerm=@ViewData["CurrentSearch"]>Email</th>
                                                                <th>Created Date</th>
									<th> Role</th>
									
                                <th class="text-center">Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var u in Model)
                            {
                                                        <tr>

                                @* <tr style="cursor:pointer" onclick="window.location='/> *@
                                    <td>@u.UserName</td>
                                    <td>@u.Email</td>
										<td>@u.CreatedTime.ToString("dd MMMM yyyy")</td>
										<td>@u.Role</td>
                                    <td class="text-center">
                                            <div class="d-flex gap-2 justify-content-center">
												<a class="action-icon-button text-secondary" onclick="window.location.href='@Url.Action("ViewUserProfile", "PersonProfile", new { id = u.Id })'" style="cursor: pointer">
                                                    <i class="fas fa-info-circle"></i>
												</a>
                                                <a href="/User/EditUser/@u.Id" class="action-icon-button text-primary">
                                                    <i class="fas fa-edit" style="color: #447D9B"></i>
                                            </a>
                                                <button type="button" class="action-icon-button text-danger delete"
                                                    onclick="setupDeleteModal(this)"
                                                    data-user-id="@u.Email"
                                                    data-user-name="@u.Email">
                                                    <i class="fas fa-trash" style="color: #B22222"></i>
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                    </div>
                }
                else
                {
                    <p class="empty-message">No users found. Why not add some?</p>

                }
                <partial name="_PaginationPartial" view-data='@new ViewDataDictionary(ViewData) { { "RouteValues", routeValues } }' />
            </div>
        </div>
    </div>
</div>

<partial name="_ConfirmationModal" model="deleteConfirmationModal" />
<div class="loading-overlay" id="loadingOverlay">
    <div class="loading-spinner"></div>
</div>

<form id="deleteUserForm" method="post" action="/User/Delete" style="display:none;">
    @Html.AntiForgeryToken()
    <input type="hidden" name="userId" id="deleteUserId" />
</form>

<!-- Hidden field for TempData success message -->
@if (ViewData["SuccessMessage"] != null)
{
    <input type="hidden" id="tempDataSuccessMessage" value="@ViewData["SuccessMessage"]" />
}

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/js/toastr.min.js"></script>
    <script src="~/js/modal-helper.js" asp-append-version="true"></script>
    <script>
        function showLoadingOverlay() {
            document.getElementById('loadingOverlay').style.display = 'flex';
        }

        function hideLoadingOverlay() {
            document.getElementById('loadingOverlay').style.display = 'none';
        }

        function setupDeleteModal(button) {
            const userId = button.getAttribute('data-user-id');
            const userName = button.getAttribute('data-user-name');

            document.getElementById('deleteUserId').value = userId;

            showConfirmationModal(
                'deleteModal',
                'Delete Confirmation',
                `Are you sure you want to delete user "${userName}"?`,
                submitDeleteForm
            );
        }

        function submitDeleteForm() {
            const deleteModalElement = document.getElementById('deleteModal');
            const deleteModalInstance = bootstrap.Modal.getInstance(deleteModalElement);
            if (deleteModalInstance) {
                deleteModalInstance.hide();
            }

            // Show loading overlay immediately
            showLoadingOverlay();

            const form = document.getElementById('deleteUserForm');
            const formData = new FormData(form);

            fetch(form.action, {
                method: 'POST',
                body: formData,
                headers: {
                    'RequestVerificationToken': form.querySelector('[name="__RequestVerificationToken"]').value
                }
            })
                .then(response => {
                    if (response.ok) {
                        toastr.success('User deleted successfully!');
                        setTimeout(() => {
                            window.location.reload();
                        }, 300);
                        
                    } else {
                        return response.text().then(text => {
                            try {
                                const errorData = JSON.parse(text);
                                throw new Error(errorData.message || 'Delete failed');
                            } catch (e) {
                                throw new Error(text || 'Delete failed');
                            }
                        });
                    }
                })
                .catch(error => {
                    console.error('Delete error:', error);
                    toastr.error(`Failed to delete user: ${error.message}`);
                })
                .finally(() => {
                    hideLoadingOverlay();
                });
        }

        document.addEventListener('DOMContentLoaded', function () {
            toastr.options = {
                "closeButton": true,
                "progressBar": true,
                "positionClass": "toast-top-right",
                "timeOut": "3000"
            };

            // Show toastr for success messages from TempData
            const successMessageInput = document.getElementById('tempDataSuccessMessage');
            if (successMessageInput && successMessageInput.value) {
                toastr.success(successMessageInput.value);
            }

            // Sort popup functionality
            const sortButton = document.getElementById('sortButton');
            const sortPopup = document.getElementById('sortPopup');
            const closeSortButton = document.getElementById('closeSortButton');
            const applySortButton = document.getElementById('applySortButton');

            // Toggle the sort popup when the sort button is clicked
            sortButton.addEventListener('click', function (e) {
                e.preventDefault();
                if (sortPopup.style.display === 'none') {
                    sortPopup.style.display = 'block';
                } else {
                    sortPopup.style.display = 'none';
                }
            });

            // Close the sort popup when clicked outside
            document.addEventListener('click', function (e) {
                if (!sortButton.contains(e.target) &&
                    !sortPopup.contains(e.target) &&
                    sortPopup.style.display === 'block') {
                    sortPopup.style.display = 'none';
                }
            });

            // Close button
            closeSortButton.addEventListener('click', function () {
                sortPopup.style.display = 'none';
            });

            // Apply button
            applySortButton.addEventListener('click', function () {
                // Get selected values
                const roleValue = document.querySelector('input[name="popupRole"]:checked').value;
                const sortOrderValue = document.querySelector('input[name="popupSortOrder"]:checked').value;
                const sortDirectionValue = document.querySelector('input[name="popupSortDirection"]:checked').value;

                // Update hidden form fields
                document.getElementById('roleField').value = roleValue;
                document.getElementById('sortOrderField').value = sortOrderValue;
                document.getElementById('sortDescendingField').value = sortDirectionValue;

                // Find the main form and submit it
                document.querySelector('.card-body form').submit();
            });
        });
    </script>
}