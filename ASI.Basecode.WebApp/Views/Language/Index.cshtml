@*@model IEnumerable<ASI.Basecode.Services.ServiceModels.LanguageViewModel>;*@
@model PaginatedList<ASI.Basecode.Data.Models.Language>

@using ASI.Basecode.WebApp.Models;
@{
    ViewData["Title"] = "Users";
    Layout = "_AdminSidebarLayout";

    var currentSearch = (string?)ViewData["CurrentSearch"];
    var currentSort = (string?)ViewData["CurrentSort"];
    var currentSortDescending = (bool)(ViewData["CurrentSortDescending"] ?? false);

    var routeValues = new Dictionary<string, string>
            {
                ["searchTerm"] = currentSearch,
                ["sortOrder"] = currentSort,
                ["sortDescending"] = currentSortDescending.ToString().ToLowerInvariant()
            };

    ViewData["CurrentPage"] = Model.PageIndex;
    ViewData["TotalPages"] = Model.TotalPages;

    var addLanguageModal = new ConfirmationModalModel
    {
        Id = "addLanguageModal",
        Title = "Add New Language",
        Message = "",
        ConfirmButtonText = "ADD",
        ConfirmButtonId = "submitAddLanguageBtn",
        ConfirmButtonClass = "add-language-btn"
    };

    var deleteLanguageModal = new ConfirmationModalModel
    {
        Id = "deleteLanguageModal",
        Title = "Delete Confirmation",
        Message = "Are you sure you want to delete this language?",
        ConfirmButtonText = "Delete",
        ConfirmButtonId = "delete-button-submit",
        ConfirmButtonClass = "btn-danger"
    };

    var editLanguageModal = new ConfirmationModalModel
    {
        Id = "editLanguageModal",
        Title = "Edit Language",
        Message = "",
        ConfirmButtonText = "SAVE CHANGES",
        ConfirmButtonId = "edit-button-submit",
        ConfirmButtonClass = "add-language-btn"
    };

    var editCancelConfirmationModal = new ConfirmationModalModel
    {
        Id = "editLanguageCancelModal",
        Title = "Discard Changes?",
        Message = "You have unsaved changes! Are you sure you want to discard them?",
        CancelButtonText = "Keep Editing",
        ConfirmButtonText = "Discard",
        ConfirmButtonId = "confirmCancelEditBtn",
        ConfirmButtonClass = "btn-discard"
    };
}


@section styles {
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/css/toastr.min.css">
    <link rel="stylesheet" href="~/css/admin/common.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/admin/language.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/modal.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/pagination.css" asp-append-version="true" />
}

<div class="users-container">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div class="header-section">
            <h1>Languages</h1>
            <p>View and manage language</p>
        </div>


        <a class="btn btn-secondary" data-bs-toggle="modal" data-bs-target="#addLanguageModal">
            <i class="fas fa-plus me-2" style="color: #fff"></i> ADD LANGUAGE
        </a>
    </div>

    <div class="card">
        <div class="card-body">
            <div class="search-filter-container" style="height: 50px; align-items: stretch; margin-top: 10px; margin-bottom: 15px">
                <form asp-action="Index" asp-controller="Language" method="get" class="d-flex align-items-center mb-3" id="searchFilterForm">
                    <div class="search-container" style="margin-right: 10px">
                        <i class="fas fa-search"></i>
                        <input type="text"
                               name="searchTerm"
                               value="@currentSearch"
                               class="book-master-form-input align-self-center" style="font-weight: 300; margin-right: 10px"
                               placeholder="Search languages…" />
                    </div>
                    <div class="action-buttons">
                        <button type="button" id="sortButton" class="btn btn-outline-secondary sort-btn"> <i class="fas fa-sort"></i> Sort & Filter</button>
                                             <a asp-action="Index" class="btn btn-outline-secondary">Clear All</a>

                    </div>
                    <input type="hidden" id="sortOrderField" name="sortOrder" value="@currentSort" />
                    <input type="hidden" id="sortDescendingField" name="sortDescending" value="@(currentSortDescending.ToString().ToLowerInvariant())" />
                </form>
            </div>
            <div class="sort-popup card shadow" id="sortPopup" style="display: none;">
                <div class="card-header bg-secondary text-white justify-center">
                    <h6 class="mb-0" style="margin-top: 6px;">Sort By:</h6>
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <label class="form-label fw-bold">Sort By:</label>
                        <div class="ms-2">
                            <div class="form-check">
                                <input class="form-check-input" type="radio" name="popupSortOrder" id="sortName" value="Name" @(currentSort == "Name" ? "checked" : "")>
                                <label class="form-check-label" for="sortId">Name</label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input" type="radio" name="popupSortOrder" id="sortDate" value="CreatedTime" @(currentSort == "CreatedTime" ? "checked" : "")>
                                <label class="form-check-label" for="sortDate">Created Date</label>
                            </div>
                        </div>
                    </div>

                    <div class="mb-3">
                        <label class="form-label fw-bold">Direction:</label>
                        <div class="ms-2">
                            <div class="form-check">
                                <input class="form-check-input" type="radio" name="popupSortDirection" id="sortAsc" value="false" @(!currentSortDescending ? "checked" : "")>
                                <label class="form-check-label" for="sortAsc">Ascending <i class="fas fa-arrow-up"></i></label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input" type="radio" name="popupSortDirection" id="sortDesc" value="true" @(currentSortDescending ? "checked" : "")>
                                <label class="form-check-label" for="sortDesc">Descending <i class="fas fa-arrow-down"></i></label>
                            </div>
                        </div>
                    </div>

                    <div class="d-flex justify-content-end">
                        <button type="button" class="btn btn-outline-secondary" style="margin-right: 10px" id="closeSortButton">Cancel</button>
                        <button type="button" class="btn btn-secondary me-2" id="applySortButton">Apply</button>
                    </div>
                </div>
            </div>
                            <p style="font-size: 12px; color:"gray">Showing  @Model.StartIndex - @Model.EndIndex out of @Model.TotalCount languages</p>

            @*------------------------------------------------------------For searching sort and filter-----------------------------------------------*@

            <div class="table-container">
                @if(Model!=null && Model.Any())
                {
                     <div class="table-scroll-container">
                    <table class="table table-hover">

                        <colgroup>
                            <col style="width: 30%;">
                            <col style="width: 20%;">
                            <col style="width: 20%;">
								<col style="width: 10%;">

                        </colgroup>
                        <thead>
                            <tr>
                                <th style="padding-left: 10px">Language</th>
									<th>Created At</th>

                                <th>Books</th>

                                <th class="text-md-center">Actions</th>
                            </tr>
                        </thead>
                        <tbody>

                            @if (Model != null && Model.Any())
                            {
                                @foreach (var language in Model)
                                {
                                    <tr>
                                        <td class="align-middle" style="padding-left: 10px">@language.LanguageName</td>
											<td class="align-middle">@language.UploadDate?.ToString("dd MMMM yyyy")

										<td >
                                            <a asp-controller="Book"
                                                   asp-action="ListBook"
                                                   asp-route-languageFilter="@language.LanguageId"
                                                   asp-route-category="@language.LanguageName"
                                                   class="action-icon-button text-secondary">
                                                   View books
                                                </a>
                                        </td>

                                        <td class="align-middle" style="white-space:nowrap;">
                                                <div class="d-flex gap-2 justify-content-center">
                                                <a asp-controller="Book"
                                                   asp-action="ListBook"
                                                   asp-route-languageFilter="@language.LanguageId"
                                                   asp-route-category="@language.LanguageName"
                                                   class="action-icon-button text-secondary">
                                                </a>
                                                @*<a href="/Language/LanguageView/@language.LanguageId" class="action-icon-button text-secondary">
                                                    <i class="fas fa-info-circle"></i>
                                                </a>*@
                                                    <button type="button" class="action-icon-button text-primary edit-language-btn"
                                                            data-bs-toggle="modal" data-bs-target="#editLanguageModal"
                                                            data-id="@language.LanguageId" data-name="@language.LanguageName" id="edit_language_button">
                                                        <i class="fas fa-edit"></i>
                                                    </button>
                                                <button type="button" class="action-icon-button text-danger delete-language-btn"
                                                        data-bs-toggle="modal" data-bs-target="#deleteLanguageModal"
                                                        data-id="@language.LanguageId" data-name="@language.LanguageName" id="delete_language_button">
                                                    <i class="fas fa-trash"></i>
                                                </button>
                                                
                                            </div>
                                        </td>
                                    </tr>
                                }
                            }
                            else
                            {
                                <tr>
                                    <td colspan="3" class="text-center">No languages found.</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
                }
                else
                {
                                        <p class="empty-message">No languages found. Why not add some?</p>

                }
               

                <partial name="_PaginationPartial" view-data='@new ViewDataDictionary(ViewData) { { "RouteValues", routeValues } }' />

            </div>
          </div>
    </div>
</div>

<partial name="_ConfirmationModal" model="deleteLanguageModal" />
<partial name="_ConfirmationModal" model="editCancelConfirmationModal" />
<partial name="_Notification" />

<div class="modal fade" id="addLanguageModal" tabindex="-1" aria-labelledby="addLanguageLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content add-language-modal-content p-4">
            <div class="modal-header border-0 pb-0 mb-3">
                <h5 class="modal-title add-language-title" id="addLanguageLabel">Add New Language</h5>
                <button type="button" class="btn-close add-language-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body pt-2">
                <div id="addLanguageErrorAlert">
                </div>
                <div id="addLanguageForm">
                    <div class="mb-3">
                        <label for="newLanguage" class="form-label">Language</label>
                        <input type="text" class="form-control" id="newLanguage" name="LanguageName" maxlength="300">
                        <span id="languageNameError" class="text-danger"></span>
                    </div>
                    <div class="d-flex justify-content-end">
                        <button type="button" class="btn add-language-btn" id="submitAddLanguageBtn">ADD</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="editLanguageModal" tabindex="-1" aria-labelledby="editLanguageLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content add-language-modal-content p-4">
            <div class="modal-header border-0 pb-0 mb-3">
                <h5 class="modal-title add-language-title" id="editLanguageLabel">Edit Language</h5>
                <button type="button" class="btn-close add-language-close" id="editCloseBtn" aria-label="Close"></button>
            </div>
            <div class="modal-body pt-2">
                <div id="editLanguageForm">
                    <input type="hidden" id="originalLanguageName" />
                    <div class="mb-3">
                        <label for="editLanguage" class="form-label">Language</label>
						<input type="text" class="form-control" id="editLanguage" maxlength="300" />
                    </div>
                    <div class="d-flex justify-content-end">
                        <button type="button" class="btn add-language-btn disabled-btn" id="edit-button-submit" disabled>SAVE CHANGES</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="~/js/modal-helper.js" asp-append-version="true"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/js/toastr.min.js"></script>
    <script>
                $(document).ready(function() {
            toastr.options = {
                "closeButton": true,
                "debug": false,
                "newestOnTop": false,
                "progressBar": true,
                "positionClass": "toast-top-right",
                "preventDuplicates": false,
                "onclick": null,
                "showDuration": "1500",
                "hideDuration": "1000",
                "timeOut": "5000",
                "extendedTimeOut": "1000",
                "showEasing": "swing",
                "hideEasing": "linear",
                "showMethod": "fadeIn",
                "hideMethod": "fadeOut",
                "opacity": 0.8
            };

            // Add Language
            $('#submitAddLanguageBtn').on('click', function(e) {
                e.preventDefault();
                $('#languageNameError').text('');
                $('#addLanguageErrorAlert').empty();
                var languageName = $('#newLanguage').val();

                $.ajax({
                    url: '/Language/AddLanguage',
                    type: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify({ LanguageName: languageName }),
                    success: function() {
                        $('#addLanguageModal').modal('hide');
                        toastr.success('Language added successfully!');
                        setTimeout(function() {
                            window.location.href = '/Language/Index';
                        }, 500);
                    },
                    error: function(xhr) {
                        try {
                            var errorResponse = JSON.parse(xhr.responseText);
                            toastr.error(errorResponse.message || 'An error occurred while adding the language.');
                        } catch (e) {
                            toastr.error('An error occurred while adding the language.');
                        }
                    }
                });
            });

            // Delete Language
            const deleteButtons = document.querySelectorAll(".delete-language-btn");
            let languageIdToDelete = null;

            deleteButtons.forEach(button => {
                button.addEventListener("click", function() {
                    languageIdToDelete = this.getAttribute("data-id");
                });
            });

            $("#delete-button-submit").on("click", function(e) {
                e.preventDefault();

                $.ajax({
                    url: '/Language/Delete',
                    type: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify({ LanguageId: languageIdToDelete }),
                    success: function() {
                        $('#deleteLanguageModal').modal('hide');
                        toastr.success('Language deleted successfully!');
                        setTimeout(function() {
                            window.location.href = '/Language/Index';
                        }, 1500);
                    },
                    error: function(xhr) {
                        try {
                            var errorResponse = JSON.parse(xhr.responseText);
                            toastr.error(errorResponse.message || 'An error occurred while deleting the language.');
                        } catch (e) {
                            toastr.error('An error occurred while deleting the language.');
                        }
                    }
                });
            });

            // Edit Language - Updated with change tracking and confirmation
            const editButtons = document.querySelectorAll(".edit-language-btn");
            let languageIdToEdit = null;
            let hasLanguageChanges = false;
            let originalLanguageName = "";

            // Function to check for changes in edit form
            function checkForLanguageChanges() {
                const currentValue = $("#editLanguage").val();
                hasLanguageChanges = currentValue !== originalLanguageName;

                // Enable or disable save button based on changes
                if (hasLanguageChanges) {
                    $("#edit-button-submit").prop('disabled', false);
                    $("#edit-button-submit").removeClass('disabled-btn');
                } else {
                    $("#edit-button-submit").prop('disabled', true);
                    $("#edit-button-submit").addClass('disabled-btn');
                }
            }

            // Initialize edit modal
            editButtons.forEach(button => {
                button.addEventListener("click", function() {
                    languageIdToEdit = this.getAttribute("data-id");
                    originalLanguageName = this.getAttribute("data-name");

                    // Store original value and set current value
                    $("#originalLanguageName").val(originalLanguageName);
                    $("#editLanguage").val(originalLanguageName);

                    // Initial check for changes (should be disabled at start)
                    hasLanguageChanges = false;
                    $("#edit-button-submit").prop('disabled', true);
                    $("#edit-button-submit").addClass('disabled-btn');
                });
            });

            // Track changes in the edit language field
            $("#editLanguage").on('input', function() {
                checkForLanguageChanges();
            });

            // Handle close button with confirmation if there are changes
            $("#editCloseBtn").on('click', function() {
                if (hasLanguageChanges) {
                    // First hide the edit modal
                    $('#editLanguageModal').modal('hide');

                    // Then show the confirmation modal after a brief delay
                    setTimeout(function() {
                        $('#editLanguageCancelModal').modal('show');
                    }, 300);
                } else {
                    // Close the edit modal directly if no changes
                    $('#editLanguageModal').modal('hide');
                }
            });

            // Handle "Discard" button in confirmation modal
            $("#confirmCancelEditBtn").on('click', function() {
                // Just hide the confirmation modal
                $('#editLanguageCancelModal').modal('hide');
            });

            // Handle "Keep Editing" button in confirmation modal
            $(document).on('click', '#editLanguageCancelModal .btn-secondary', function() {
                // Hide the confirmation modal first
                $('#editLanguageCancelModal').modal('hide');

                // Show edit modal again with a brief delay
                setTimeout(function() {
                    $('#editLanguageModal').modal('show');
                }, 300);
            });

            // Submit edit changes
            $("#edit-button-submit").on("click", function(e) {
                e.preventDefault();

                if (!hasLanguageChanges) {
                    return; // Do nothing if no changes
                }

                $.ajax({
                    url: '/Language/Edit',
                    type: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify({
                        LanguageId: languageIdToEdit,
                        LanguageName: $("#editLanguage").val()
                    }),
                    success: function() {
                        $('#editLanguageModal').modal('hide');
                        toastr.success('Language updated successfully!');
                        setTimeout(function() {
                            window.location.href = '/Language/Index';
                        }, 500);
                    },
                    error: function(xhr) {
                        try {
                            var errorResponse = JSON.parse(xhr.responseText);
                            toastr.error(errorResponse.message || 'An error occurred while updating the language.');
                        } catch (e) {
                            toastr.error('An error occurred while updating the language.');
                        }
                    }
                });
            });

            // Sort popup functionality
            const sortButton = document.getElementById('sortButton');
            const sortPopup = document.getElementById('sortPopup');
            const closeSortButton = document.getElementById('closeSortButton');
            const applySortButton = document.getElementById('applySortButton');

            // Toggle the sort popup when the sort button is clicked
            sortButton.addEventListener('click', function (e) {
                e.preventDefault();
                if (sortPopup.style.display === 'none') {
                    sortPopup.style.display = 'block';
                } else {
                    sortPopup.style.display = 'none';
                }
            });

            // Close the sort popup when clicked outside
            document.addEventListener('click', function (e) {
                if (!sortButton.contains(e.target) &&
                    !sortPopup.contains(e.target) &&
                    sortPopup.style.display === 'block') {
                    sortPopup.style.display = 'none';
                }
            });

            // Close button
            closeSortButton.addEventListener('click', function () {
                sortPopup.style.display = 'none';
            });

            // Apply button
            applySortButton.addEventListener('click', function () {
                // Get selected values
                const sortOrderValue = document.querySelector('input[name="popupSortOrder"]:checked').value;
                const sortDirectionValue = document.querySelector('input[name="popupSortDirection"]:checked').value;

                // Update hidden form fields
                document.getElementById('sortOrderField').value = sortOrderValue;
                document.getElementById('sortDescendingField').value = sortDirectionValue;

                // Find the main form and submit it
                document.querySelector('#searchFilterForm').submit();
            });
        });
    </script>
}
